{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.90",
        "coverage_diff": "0.00032067984126347857",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int page = fdp.ConsumeIntegral<int>();\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n  std::vector<char> buf = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(buf.data(), 0, buf.size(), &obj);\\n  \\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(str, NULL, NULL, NULL);\\n    if (doc->isOk()) {\\n      doc->displayPageSlice(NULL, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n    }\\n  } catch (...) {\\n  }\\n  \\n  delete doc;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.97",
        "coverage_diff": "0.00032067984126347857",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"Dict.h\"\\n#include \"OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n\\n    int iFirstPage = fdp.ConsumeIntegral<int>();\\n    double hDPI = fdp.ConsumeFloatingPoint<double>();\\n    double vDPI = fdp.ConsumeFloatingPoint<double>();\\n    int rotate = fdp.ConsumeIntegral<int>();\\n    GBool useMediaBox = fdp.ConsumeIntegral<GBool>();\\n    GBool crop = fdp.ConsumeIntegral<GBool>();\\n    GBool printing = fdp.ConsumeIntegral<GBool>();\\n    int sliceX = fdp.ConsumeIntegral<int>();\\n    int sliceY = fdp.ConsumeIntegral<int>();\\n    int sliceW = fdp.ConsumeIntegral<int>();\\n    int sliceH = fdp.ConsumeIntegral<int>();\\n\\n    std::vector<char> pdfSource = fdp.ConsumeRemainingBytes<char>();\\n    if(pdfSource.empty()) {\\n        return 0;\\n    }\\n    Object obj;\\n    obj.initNull();\\n    MemStream *str = new MemStream(pdfSource.data(), 0, pdfSource.size(), &obj);\\n\\n    PDFDoc *doc = NULL;\\n    try {\\n        doc = new PDFDoc(str, NULL, NULL, NULL);\\n        if(doc->isOk()) {\\n            OutputDev *output_dev = nullptr;\\n            doc->displayPageSlice(output_dev, iFirstPage, hDPI, vDPI, rotate,\\n                useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n        }\\n    } catch (...) {\\n\\n    }\\n\\n    delete doc;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}