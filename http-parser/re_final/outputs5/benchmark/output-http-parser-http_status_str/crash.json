{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.66",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"http_parser.h\"\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  // Need at least one byte to interpret an http_status\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  // Parse an http_status from data (ensure inside enum range by using modulo operator)\\n  enum http_status status = (enum http_status)(data[0] % (HTTP_STATUS_SWITCHING_PROTOCOLS+1));\\n\\n  // Call the function-under-test\\n  const char * status_str = http_status_str(status);\\n  \\n  return 0; \\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.07",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // The size must be equal or larger than an integer to make sure we can deal with the data safely.\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  // Convert data to int\\n  int raw_status = 0;\\n  memcpy(&raw_status, data, sizeof(int));\\n\\n  // The range of HTTP status codes is 100 to 599.\\n  // So, get only the values between 100 and 599.\\n  int http_status_code = (raw_status % 500) + 100;\\n\\n  // Convert the status code into an enum type\\n  enum http_status status = (enum http_status) http_status_code;\\n\\n  // Call the function-under-test\\n  const char * str = http_status_str(status);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}