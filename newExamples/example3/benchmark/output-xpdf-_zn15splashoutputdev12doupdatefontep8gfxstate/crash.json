{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"Object.h\"\\n#include \"JBIG2Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream1 = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream2 = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    PDFDoc doc(stream1);\\n    if (doc.isOk() == gTrue) {\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      splashOut->setNoComposite(gTrue);\\n      splashOut->startDoc(doc.getXRef());\\n      for (size_t i = 1; i <= doc.getNumPages(); ++i) {\\n        auto page = doc.getCatalog()->getPage(i);\\n        if (!page->isOk()) {\\n          continue;\\n        }\\n        GfxState* gfxState = new GfxState(72.0, 72.0, page->getArtBox(), page->getRotate(), gTrue);\\n        splashOut->updateFont(gfxState); // Fixed line: replaced 'doUpdateFont' with 'updateFont'\\n        delete gfxState;\\n      }\\n      delete splashOut;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"GfxState.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n\\n  // the size of this vector is arbitrary since it doesn't affect the further operations.\\n  std::vector<char> payload = fdp.ConsumeBytes<char>(200);\\n  \\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n  \\n  PDFDoc *doc = nullptr;\\n  try {\\n    doc = new PDFDoc(stream);\\n    if (doc->isOk() == gTrue) {\\n      doc->getNumPages();\\n      doc->okToPrint(gTrue);\\n      doc->okToCopy(gTrue);\\n      doc->okToChange(gTrue);\\n      doc->okToAddNotes(gTrue);\\n      \\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev* splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      splashOut->startDoc(doc->getXRef());\\n\\n      for (size_t i = 1; i <= doc->getNumPages(); ++i) {\\n        GfxState* state = new GfxState(hdpi, vdpi, NULL, 0, gTrue);\\n        splashOut->drawChar(state, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false, NULL, NULL, false);\\n        // Removed the line calling the private method doUpdateFont\\n        delete state;\\n      }\\n\\n      delete splashOut;\\n    }\\n  } catch (...) {\\n    // Handle exception here\\n  }\\n\\n  delete doc;\\n  delete stream;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}