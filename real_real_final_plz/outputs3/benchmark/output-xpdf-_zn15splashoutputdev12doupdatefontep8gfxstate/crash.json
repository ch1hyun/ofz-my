{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Gfx.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer (cannot be NULL)\\n    GfxState gfxState(nullptr, gTrue); // Pass appropriate arguments to GfxState constructor\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeMono8, 0, gFalse, nullptr); // Pass appropriate arguments to SplashOutputDev constructor\\n    splashOutputDev.doUpdateFont(&gfxState); // Call the required function doUpdateFont with a non-null GfxState pointer\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer\\n    GfxState state(72, 72, nullptr, 0, gFalse);\\n\\n    // Call the function-under-test\\n    SplashOutputDev dev(SplashColorMode::splashModeRGB8, 0, gFalse, nullptr, gTrue, gTrue);\\n\\n    // Call the required function to satisfy the build error\\n    dev.startDoc(nullptr);\\n\\n    // Call the function to satisfy the build error\\n    dev.doUpdateFont(&state);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}