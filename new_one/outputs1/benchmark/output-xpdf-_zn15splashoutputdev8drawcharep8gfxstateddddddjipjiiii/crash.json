{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"SplashOutputDev.h\"\\n#include \"Object.h\" // Include the header file for 'Object'\\n#include \"Dict.h\" // Include the header file for 'Dict'\\n#include \"Stream.h\" // Include the header file for 'Stream'\\n#include \"GfxState.h\" // Include the header file for 'GfxState'\\n#include \"Gfx.h\" // Include the header file for 'Gfx'\\n#include \"OutputDev.h\" // Include the header file for 'OutputDev'\\n\\n#include \"XRef.h\" // Include the header file for 'XRef'\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    GfxState *gfxState = nullptr; // Cannot be NULL\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *u = nullptr; // Cannot be NULL\\n    int uLen = stream.ConsumeIntegral<int>();\\n    GBool rotate = stream.ConsumeBool();\\n    GBool scaleX = stream.ConsumeBool();\\n    GBool scaleY = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(gFalse, 0, gFalse, nullptr, gTrue, gTrue);\\n    Ref ref;\\n    Stream str;\\n    Dict dict;\\n    XRef xref;\\n    splashOutputDev.tilingPatternFill(gfxState, new Gfx(), &ref, 0, 0, &dict, &xref);\\n    splashOutputDev.drawImageMask(gfxState, &ref, &str, &xref);\\n    splashOutputDev.drawImage(gfxState, &ref, &str, &xref);\\n    splashOutputDev.drawMaskedImage(gfxState, &ref, &str, &ref, &str);\\n    splashOutputDev.drawSoftMaskedImage(gfxState, &ref, &str, &ref, &str);\\n    splashOutputDev.opiBegin(gfxState, &dict);\\n    splashOutputDev.opiEnd(gfxState, &dict);\\n    splashOutputDev.beginStructureItem(\"tag\", 0, &dict);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\" // Include Dict header file\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\" // Include Stream header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create and initialize parameters for drawChar function\\n    GfxState* gfxState = reinterpret_cast<GfxState*>(0x12345678); // Dummy address\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode* unicode = nullptr; // Initialize with nullptr\\n    int len = 0;\\n    if (nBytes > 0) {\\n        len = nBytes / sizeof(Unicode);\\n        unicode = new Unicode[len];\\n        for (int i = 0; i < len; ++i) {\\n            unicode[i] = stream.ConsumeIntegral<Unicode>();\\n        }\\n    }\\n    GBool rotated = stream.ConsumeBool();\\n    GBool upright = stream.ConsumeBool();\\n    GBool bold = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 0, gFalse, nullptr, gFalse, gTrue);\\n    splashOutputDev.drawChar(gfxState, x, y, dx, dy, ox, oy, charCode, nBytes, unicode, len, rotated, upright, bold);\\n\\n    // Clean up memory\\n    if (unicode) {\\n        delete[] unicode;\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}