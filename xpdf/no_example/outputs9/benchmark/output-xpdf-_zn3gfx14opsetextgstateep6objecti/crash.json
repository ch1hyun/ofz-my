{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n\\nclass MyGfx : public Gfx {\\npublic:\\n  MyGfx(PDFDoc *docA, OutputDev *outA, Dict *resDict) : Gfx(docA, outA, resDict) {}\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  // Create a FuzzedDataProvider instance\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create an object of any accessible/built-in type (here used as int)\\n  Object arg1;\\n  arg1.initInt(stream.ConsumeIntegral<int>());\\n\\n  // Consume an int from the provider\\n  int arg2 = stream.ConsumeIntegral<int>();\\n\\n  // Initialize required arguments\\n  PDFDoc *docA = new PDFDoc();\\n  OutputDev *outA = new OutputDev();\\n  Dict *resDict = new Dict();\\n\\n  // Call the API\\n  MyGfx gfxObject(docA, outA, resDict);\\n\\n  // Call the target function\\n  gfxObject.opSetExtGState(&arg1, arg2);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"Gfx.h\" \\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  Object info, xfa;\\n  Object *acroForm;\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes);\\n  globalParams->setErrQuiet(1);\\n\\n  try {\\n    PDFDoc doc(stream);\\n    if (doc.isOk() == gTrue) {\\n      SplashColor splashColor;\\n      SplashColorMode splashColorMode = splashModeRGB8;\\n      SplashOutputDev splashOut(splashColorMode, 4, gFalse, splashColor);\\n      splashOut.startDoc(doc.getXRef());\\n      Page *page = doc.getPage(1); \\n      if (page != NULL) {\\n        page->display(&splashOut, hdpi, vdpi, rotate, useMediaBox, crop, printing);\\n      }\\n      int nums = fdp.ConsumeIntegralInRange<int>(0, 10);\\n      Object* obj = new Object[nums];\\n        \\n      Object *acroForm = doc.getCatalog()->getAcroForm();\\n      if (acroForm && acroForm->isDict()) {\\n\t    Dict* dict = acroForm->getDict();\\n\t    for (int j = 0; j < dict->getLength() && j < nums; ++j) {\\n\t      Object tempObj; \\n\t      obj[j] = *(dict->getVal(j, &tempObj)); \\n\t\t  int i = fdp.ConsumeIntegralInRange<int>(0, j);\\n\t      splashOut.updateFont(&obj[i]); \\n\t    }\\n      }\\n      // Call the function Gfx::opSetExtGState\\n      Gfx gfx(doc.getXRef(), &splashOut, doc.getCatalog()->getResourceDict(), &obj[0], NULL);\\n      gfx.opSetExtGState(&obj[0], nums);\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}