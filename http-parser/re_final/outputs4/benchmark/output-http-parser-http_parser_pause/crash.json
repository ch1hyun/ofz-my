{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "19.45",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  // Execute parser given the data and depending on size\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n  \\n  // Only call pause function if parsing was successful\\n  if (parsed == size) {\\n    // Call function-under-test\\n    http_parser_pause(&parser, 1);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "21.61",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern void http_parser_pause(http_parser *, int);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  http_parser parser;\\n  // Initialize parser.\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  int p = data[0] % 2; // making it a boolean value\\n\\n  if (nparsed != size && parser.http_errno == HPE_PAUSED) {\\n    http_parser_pause(&parser, p);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}