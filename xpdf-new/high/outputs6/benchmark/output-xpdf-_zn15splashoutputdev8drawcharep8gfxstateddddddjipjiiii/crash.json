{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  if (stream.remaining_bytes() == 0) {\\n    return 0;\\n  }\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double origin_x = stream.ConsumeFloatingPoint<double>();\\n  double origin_y = stream.ConsumeFloatingPoint<double>();\\n  CharCode code = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = stream.ConsumeIntegral<int>();\\n  Unicode u = stream.ConsumeIntegral<Unicode>();\\n  GBool ff = stream.ConsumeBool();\\n  GBool fi = stream.ConsumeBool();\\n  GBool fs = stream.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *gstr = new GString(\"dummy.pdf\");\\n  GString *ownerpw = new GString(\"ownerpw\");\\n  GString *userpw = new GString(\"userpw\");\\n\\n  PDFDoc *doc = new PDFDoc(gstr, ownerpw, userpw);\\n  SplashColor paperColor = {0xff, 0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n\\n  const int rotate = 0;\\n  \\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n  splashOut->drawChar(state, x, y, dx, dy, origin_x, origin_y, code, nBytes, &u, 1, ff, fi, fs);\\n\\n  delete state;\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams; // Move the deletion of globalParams here\\n  delete userpw;\\n  delete ownerpw;\\n  delete gstr;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"config.h\"\\n#include \"XRef.h\"\\n#include \"Catalog.h\"\\n#include \"Page.h\"\\n\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double xd = fdp.ConsumeFloatingPoint<double>();\\n  double yd = fdp.ConsumeFloatingPoint<double>();\\n  double xRadius = fdp.ConsumeFloatingPoint<double>();\\n  double yRadius = fdp.ConsumeFloatingPoint<double>();\\n  double angle1 = fdp.ConsumeFloatingPoint<double>();\\n  double angle2 = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nComps = fdp.ConsumeIntegral<int>();\\n  Unicode *u = new Unicode[nComps];\\n  for (int j = 0; j < nComps; j++) {\\n    u[j] = fdp.ConsumeIntegral<Unicode>();\\n  }\\n  GBool overprint1 = fdp.ConsumeIntegral<GBool>();\\n  GBool overprint2 = fdp.ConsumeIntegral<GBool>();\\n  GBool overprint3 = fdp.ConsumeIntegral<GBool>();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(password, ownerPassword);\\n  SplashColor splashColor;\\n  splashColor[0] = 255;\\n  splashColor[1] = 255;\\n  splashColor[2] = 255;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, splashColor);\\n  doc->displayPage(splashOut, 1, 72, 72, 0, gFalse, gTrue, gFalse);\\n  GfxState *state = new GfxState(72, 72, doc->getCatalog()->getPage(1)->getMediaBox(), 0, gFalse);\\n  Gfx *gfx = new Gfx(doc, splashOut, doc->getCatalog()->getPage(1)->getResourceDict(), state, state);\\n  splashOut->startDoc(doc->getXRef());\\n  splashOut->drawChar(gfx->getState(), xd, yd, xRadius, yRadius, angle1, angle2, code, nComps, u, nComps, overprint1, overprint2, overprint3);\\n\\n  delete[] u;\\n  delete gfx;\\n  delete splashOut;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}