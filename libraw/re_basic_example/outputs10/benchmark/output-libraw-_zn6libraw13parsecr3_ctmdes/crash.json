{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  LibRaw MyCoolRawProcessor;\\n\\n  // Create a datastream from the fuzzing input\\n  LibRaw_buffer_datastream ds(reinterpret_cast<const char*>(data), size);\\n\\n  int ret = MyCoolRawProcessor.open_datastream(&ds);\\n  if (ret != LIBRAW_SUCCESS) {\\n    return 0;  // Wrong arg, test input not interesting\\n  }\\n\\n  // Call the function open_file with a non-null argument\\n  if (size > 0) {\\n    MyCoolRawProcessor.open_file(static_cast<short>(*data));\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdlib.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;  // not enough data to call function \\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  short input_short = stream.ConsumeIntegral<short>();\\n  \\n  LibRaw RawProcessor;\\n  int retval = RawProcessor.open_buffer(data, size); \\n  \\n  // Call the function parseCR3_CTMD\\n  retval = RawProcessor.parseCR3_CTMD(input_short);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}