LLVMFuzzerTestOneInput:
   23|     53|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   24|     53|auto start_target = std::chrono::high_resolution_clock::now();
   25|     53|    FuzzedDataProvider stream(data, size);
   26|       |
   27|       |    // Create a GfxState pointer
   28|     53|    GfxState gfxState;
   29|       |
   30|       |    // Consume doubles for the parameters
   31|     53|    double param1 = stream.ConsumeFloatingPoint<double>();
   32|     53|    double param2 = stream.ConsumeFloatingPoint<double>();
   33|     53|    double param3 = stream.ConsumeFloatingPoint<double>();
   34|     53|    double param4 = stream.ConsumeFloatingPoint<double>();
   35|     53|    double param5 = stream.ConsumeFloatingPoint<double>();
   36|     53|    double param6 = stream.ConsumeFloatingPoint<double>();
   37|       |
   38|       |    // Consume a CharCode
   39|     53|    CharCode charCode = stream.ConsumeIntegral<CharCode>();
   40|       |
   41|       |    // Consume an integer
   42|     53|    int intParam = stream.ConsumeIntegral<int>();
   43|       |
   44|       |    // Consume a Unicode string
   45|     53|    std::string unicodeString = stream.ConsumeRandomLengthString();
   46|     53|    std::vector<Unicode> unicodeVector(unicodeString.begin(), unicodeString.end());
   47|     53|    Unicode* unicodePtr = unicodeVector.empty() ? nullptr : unicodeVector.data();
  ------------------
  |  Branch (47:27): [True: 33, False: 20]
  ------------------
   48|       |
   49|       |    // Consume additional integers
   50|     53|    int additionalIntParam = stream.ConsumeIntegral<int>();
   51|       |
   52|       |    // Consume GBool values
   53|     53|    GBool boolParam1 = stream.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (53:24): [True: 0, False: 53]
  ------------------
   54|     53|    GBool boolParam2 = stream.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (54:24): [True: 0, False: 53]
  ------------------
   55|     53|    GBool boolParam3 = stream.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (55:24): [True: 0, False: 53]
  ------------------
   56|       |
   57|       |    // Call the function under test
   58|     53|    SplashOutputDev splashOutputDev;
   59|     53|	auto start_func = std::chrono::high_resolution_clock::now();
   60|     53|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, additionalIntParam, boolParam1, boolParam2, boolParam3);
   61|     53|	auto end_func = std::chrono::high_resolution_clock::now();
   62|     53|auto end_target = std::chrono::high_resolution_clock::now();
   63|     53|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   64|       |
   65|     53|    return 0;
   66|     53|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjiiii:
   18|     53|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   19|       |        // Function implementation
   20|     53|    }

