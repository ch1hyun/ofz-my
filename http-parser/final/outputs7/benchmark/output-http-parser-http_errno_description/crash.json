{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\n// Define a possible range for DW_TAG_enumeration_typehttperrno enumeration\\n#define HTTP_ERRNO_MIN 0\\n#define HTTP_ERRNO_MAX 63\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  if(size<sizeof(int))\\n    return 0;\\n  \\n  int err_raw;\\n  memcpy(&err_raw, data, sizeof(int));\\n\\n  if(err_raw < HTTP_ERRNO_MIN || err_raw > HTTP_ERRNO_MAX)\\n    return 0;\\n\\n  enum http_errno err = static_cast<enum http_errno>(err_raw);\\n  \\n  // Executing the function-under-test\\n  const char * description = http_errno_description(err);\\n\\n  return 0;  \\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern const char * http_errno_description(int);\\n\\n#define HTTP_ERRNO_MIN 0\\n#define HTTP_ERRNO_MAX 62\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  int http_error = *(int *)data;\\n  if(http_error < HTTP_ERRNO_MIN || http_error > HTTP_ERRNO_MAX) {\\n    return 0;\\n  }\\n\\n  const char * error_desc = http_errno_description(http_error);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}