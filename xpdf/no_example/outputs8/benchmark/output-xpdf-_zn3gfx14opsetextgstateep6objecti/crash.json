{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"config.h\"\\n#include \"parseargs.h\"\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include <XRef.h>\\n#include \"/src/xpdf-4.05/goo/GList.h\"\\n#include \"/src/xpdf-4.05/goo/gfile.h\"\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/goo/gmem.h\"\\n#include \"/src/xpdf-4.05/goo/Trace.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Array.h\"\\n#include \"Link.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiBase.h\"\\n#include \"Page.h\"\\n#include \"PDFDocEncoding.h\"\\n#include \"UnicodeMap.h\"\\n#include \"UnicodeTypeTable.h\"\\n#include \"Catalog.h\"\\n#include \"Form.h\"\\n#include \"ErrorCodes.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  if (size < 5) {\treturn 0;\t}\\n\\n  FuzzedDataProvider fdp(data, size);\\n    \\n  char* pdf_data = strdup((const char*)fdp.data());\\n\\n  char *filename = pdf_data;\\n\\n  // read config file\\n  Object info;\\n\\n  if (!globalParams) {\\n    globalParams = new GlobalParams();\\n    if (globalParams->getPSFile()) {\\n      out = new PSOutputDev(globalParams->getPSFile(), firstPage, lastPage,\\n                        mode, paperWidth, paperHeight, duplex);\\n    }\\n  }\\n\\n  // load config file\\n  Object postBreakIndent;\\n\\n  FILE *f;\\n  char buf[512];\\n\\n  f = fopen(filename, \"rb\");\\n  if (f == NULL) {\\n    return 0;\\n  }\\n\\n  // Call the function that the fuzzer is expecting\\n  Gfx gfx;\\n  gfx.opSetExtGState(&info, 1);\\n\\n  delete globalParams;\\n  fclose(f);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"goo/gtypes.h\"\\n#include \"Object.h\"\\n#include \"XRef.h\"\\n#include \"Dict.h\"\\n#include \"Annot.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n#include \"Catalog.h\"\\n#include \"Page.h\"\\n#include \"GfxResources.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n  std::vector<char> arguments = fdp.ConsumeBytes<char>(size - 1);\\n  Object gstate;\\n\\n  // Initialize GlobalParams that needed by Gfx and PDFDoc \\n  // Consume some data to use as string\\n  std::string cstData = fdp.ConsumeRandomLengthString();\\n  globalParams = new GlobalParams(cstData.c_str());\\n  globalParams->setupBaseFonts(nullptr);\\n\\n  // Declare and Initialize required objects \\n  GString fileName(\"dummy\");\\n  PDFDoc doc(&fileName); \\n  XRef xref(doc.getBaseStream(), gFalse); \\n  Catalog cat(&doc); \\n  Dict *dict = cat.getForm()->getDict();\\n  PageAttrs attrs(dict, nullptr, nullptr);\\n  Page page(&doc, 1, dict, &attrs);\\n  GfxResources res(&xref, dict, nullptr);\\n  OutputDev *out = nullptr;\\n\\n  PDFRectangle box;\\n  PDFRectangle cropBox;\\n  Gfx gfx(&doc, out, dict, &box, &cropBox, &gstate, nullptr, &xref);\\n  \\n  // gfx.opSetExtGState(&gstate, 1); // opSetExtGState is a private member of Gfx, so it cannot be accessed here.\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}