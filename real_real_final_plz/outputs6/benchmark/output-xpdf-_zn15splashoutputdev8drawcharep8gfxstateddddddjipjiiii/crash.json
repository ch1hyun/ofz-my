{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "// Include the necessary header files\\n#include <cstdint>\\n#include <cstdlib>\\n#include \"GfxState.h\"\\n#include \"OutputDev.h\"  // Include OutputDev.h before SplashOutputDev.h\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"  // Corrected include path\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    GfxState *gfxState = new GfxState(0, 0, nullptr, 0, gFalse); // Providing necessary arguments for GfxState constructor\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *u = new Unicode[nBytes]; // Cannot be NULL\\n    for (int i = 0; i < nBytes; i++) {\\n        u[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n    int uLen = nBytes;\\n    GBool rotated = stream.ConsumeBool();\\n    GBool uRightToLeft = stream.ConsumeBool();\\n    GBool uVertical = stream.ConsumeBool();\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the drawChar function with initialized parameters using the instance\\n    splashOutputDev.drawChar(gfxState, x, y, dx, dy, ox, oy, code, nBytes, u, uLen, rotated, uRightToLeft, uVertical);\\n\\n    delete gfxState;\\n    delete[] u;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n\\n#include \"SplashOutputDev.h\" // Include the header file for SplashOutputDev\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for SplashOutputDev::drawChar function\\n    GfxState *gfxState = reinterpret_cast<GfxState*>(0x12345678); // Example address\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double originX = stream.ConsumeFloatingPoint<double>();\\n    double originY = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = static_cast<CharCode>(stream.ConsumeIntegral<uint32_t>());\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *u = nullptr; // Initialize to nullptr\\n    int uLen = 0; // Initialize to 0\\n    GBool rotate = stream.ConsumeBool();\\n    GBool scaleX = stream.ConsumeBool();\\n    GBool scaleY = stream.ConsumeBool();\\n\\n    // Create an instance of SplashOutputDev with parameters for the constructor\\n    SplashColorMode colorMode = splashModeMono8;\\n    int bitmapRowPad = 0;\\n    GBool reverseVideo = gFalse;\\n    SplashColorPtr paperColor = nullptr;\\n    GBool bitmapTopDown = gTrue;\\n    GBool allowAntialias = gTrue;\\n\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n\\n    // Call the function-under-test using the instance\\n    splashOutputDev.drawChar(gfxState, x, y, dx, dy, originX, originY, charCode, nBytes, u, uLen, rotate, scaleX, scaleY);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}