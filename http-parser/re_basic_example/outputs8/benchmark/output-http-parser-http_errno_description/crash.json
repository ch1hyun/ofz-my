{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size != sizeof(uint8_t)){\\n    return 0;\\n  }\\n\\n  // Cast the binary data into an unsigned integer.\\n  uint8_t i = data[0];\\n\\n  // Checking if the status code lies in the enumeration.\\n  if(i > 0 && i < sizeof(enum http_errno)){\\n    http_parser parser;\\n    parser.http_errno = i;\\n    const char *desc = http_errno_description(HTTP_PARSER_ERRNO(&parser));\\n  }\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  // Divide the enum range by 256 to avoid overflows.\\n  int reduced_range = (int)HTTP_ERRNO_MAX / 256;\\n\\n  // Cast the first byte of data to an integer between 0 and reduced_range.\\n  uint8_t fuzzed_errno = data[0] % reduced_range;\\n\\n  // Multiply it again to get it to expected range for http_errno enum\\n  enum http_errno h_errno = (enum http_errno)(fuzzed_errno * 256);\\n  \\n  const char * err_description = http_errno_description(h_errno);\\n  \\n  if (!err_description) {\\n      return 0;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}