{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <cstring>\\n\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"config.h\"\\n#include \"parseargs.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiType1C.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  PDFRectangle pageBox;\\n  GfxState* state = new GfxState(72, 72, &pageBox, 0, gFalse);\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  double advanceX = fdp.ConsumeFloatingPoint<double>();\\n  double advanceY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode chars[8] = {fdp.ConsumeIntegral<Unicode>()};\\n  int textRenderingMode = fdp.ConsumeIntegral<int>();\\n  GBool originIsDxDy = fdp.ConsumeBool();\\n  GBool fill = fdp.ConsumeBool();\\n  GBool stroke = fdp.ConsumeBool();\\n\\n  SplashOutputDev* splash = new SplashOutputDev(splashModeRGB8, 1, gFalse, nullptr, gTrue);\\n\\n  splash->drawChar(state, dx, dy, originX, originY, advanceX, advanceY, code,\\n                   nBytes, chars, textRenderingMode, originIsDxDy, fill, stroke);\\n\\n  delete splash;\\n  delete state;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <algorithm>\\n#include <string>\\n#include <vector>\\n\\n#include \"GfxFont.h\"\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"UnicodeTypeTable.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"splash/SplashMath.h\"\\n#include \"splash/SplashTypes.h\"\\n#include \"splash/SplashXPath.h\"\\n#include \"splash/SplashXPathScanner.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  GfxState *state = nullptr;\\n\\n  globalParams = new GlobalParams(\"/path/to/your/config\");\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  std::string name;\\n  stream.ConsumeBytesAsString(32);\\n\\n  std::unique_ptr<SplashBitmap> splashBitmap(\\n      new SplashBitmap(200, 200, 4, splashModeRGB8, gFalse, gFalse, nullptr));\\n  SplashOutputDev splashOutputDev(splashModeRGB8, 4, gFalse, splashBitmap->getDataPtr(),\\n                                  splashBitmap->getWidth(), gFalse);\\n  splashOutputDev.startDoc(nullptr);\\n\\n  {\\n    double x = stream.ConsumeFloatingPointInRange<double>(-100., 100.);\\n    double y = stream.ConsumeFloatingPointInRange<double>(-100., 100.);\\n    double angle = stream.ConsumeFloatingPointInRange<double>(-90., 90.);\\n    double char_angle = stream.ConsumeFloatingPointInRange<double>(-90., 90.);\\n    double tx = stream.ConsumeFloatingPointInRange<double>(-100., 100.);\\n    double ty = stream.ConsumeFloatingPointInRange<double>(-100., 100.);\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegralInRange<int>(1, 2);\\n    std::string s;\\n    stream.ConsumeBytesAsString(4);\\n    auto *u = (Unicode *)gmalloc(nBytes * sizeof(Unicode));\\n    for (int i = 0; i < nBytes; ++i)\\n      u[i] = stream.ConsumeIntegral<CharCode>();\\n    GBool overlay = stream.ConsumeBool();\\n    GBool primary = stream.ConsumeBool();\\n    GBool manual = stream.ConsumeBool();\\n    splashOutputDev.drawChar(state, x, y, tx, ty, x, y, code, nBytes, u,\\n                             nBytes, overlay, primary, manual);\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}