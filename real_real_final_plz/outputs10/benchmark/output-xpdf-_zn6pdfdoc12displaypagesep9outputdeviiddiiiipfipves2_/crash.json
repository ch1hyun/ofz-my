{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass OutputDevMock : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    OutputDevMock* outputDev = new OutputDevMock();\\n    int param1 = stream.ConsumeIntegral<int>();\\n    int param2 = stream.ConsumeIntegral<int>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    int param5 = stream.ConsumeIntegral<int>();\\n    GBool param6 = stream.ConsumeBool();\\n    GBool param7 = stream.ConsumeBool();\\n    GBool param8 = stream.ConsumeBool();\\n    void* param10 = reinterpret_cast<void*>(1);\\n\\n    GString fileName(\"dummy.pdf\"); // Provide a dummy file name for PDFDoc constructor\\n    PDFDoc pdfDoc(&fileName); // Use the constructor that takes a GString pointer\\n\\n    pdfDoc.displayPages(outputDev, param1, param2, param3, param4, param5, param6, param7, param8, nullptr, param10);\\n\\n    delete outputDev;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GlobalParams.h\"\\n\\n// Define a dummy abort check callback function\\nGBool dummyAbortCheck(void*) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(0x12345678); // Example address\\n    int pageNum = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool useAnnots = stream.ConsumeBool();\\n    void* abort = nullptr; // Initialize to nullptr\\n    void* abortData = reinterpret_cast<void*>(0x87654321); // Example address\\n\\n    // Create an instance of GlobalParams with a dummy configuration file name\\n    const char* dummyConfigFileName = \"dummy.cfg\";\\n    GlobalParams *globalParams = new GlobalParams(dummyConfigFileName);\\n\\n    // Create an instance of PDFDoc with a dummy file name\\n    GString dummyFileName(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&dummyFileName, nullptr, nullptr); // Pass nullptr for ownerPassword and coreA\\n\\n    // Call the function-under-test through the PDFDoc instance\\n    pdfDoc.displayPages(outputDev, pageNum, numPages, scaleX, scaleY, rotation, useMediaBox, crop, useAnnots, dummyAbortCheck, abortData);\\n\\n    delete globalParams; // Delete the GlobalParams instance\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}