{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.07",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size != sizeof(enum http_status))\\n        return 0;\\n    \\n    enum http_status status;\\n    memcpy(&status, data, sizeof(enum http_status));\\n    \\n    // Call the function under test, returning the string representing HTTP status\\n    const char * status_str = http_status_str(status);\\n\\n    return 0;\\n} \\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\n// Fuzzing test\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size != sizeof(int)) {\\n    return 0;  \\n  }\\n\\n  int statuscode = *((int*)data);\\n\\n  // status codes range from 100 to 599 therefore\\n  // to ensure proper behavior and not invoke undefined behaviour.\\n  if (statuscode >= 100 && statuscode <= 599) {\\n    http_status_str(statuscode);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}