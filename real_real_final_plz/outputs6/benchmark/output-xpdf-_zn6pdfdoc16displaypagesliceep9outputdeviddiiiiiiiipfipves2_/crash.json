{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n\\n// Define a dummy abort check callback function outside the LLVMFuzzerTestOneInput function\\nGBool dummyAbortCheck(void* data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(0x12345678);\\n    int page = stream.ConsumeIntegral<int>();\\n    double xMin = stream.ConsumeFloatingPoint<double>();\\n    double yMin = stream.ConsumeFloatingPoint<double>();\\n    int xMax = stream.ConsumeIntegral<int>();\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n    int num1 = stream.ConsumeIntegral<int>();\\n    int num2 = stream.ConsumeIntegral<int>();\\n    int num3 = stream.ConsumeIntegral<int>();\\n    int num4 = stream.ConsumeIntegral<int>();\\n    Dict* loop = reinterpret_cast<Dict*>(0x87654321);\\n    void* ptr = reinterpret_cast<void*>(0xAABBCCDD);\\n\\n    // Creating an instance of PDFDoc with a dummy filename\\n    GString dummyFilename = GString(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&dummyFilename); \\n\\n    pdfDoc.displayPageSlice(outputDev, page, xMin, yMin, xMax, flag1, flag2, flag3, num1, num2, num3, num4, loop, ptr, dummyAbortCheck);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\" // Include the header file for GString\\n\\n// Define GBool as an alias for int to fix the build error\\ntypedef int GBool;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPageSlice\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(0x12345678); // Example non-NULL pointer\\n    int param1 = stream.ConsumeIntegral<int>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    int param4 = stream.ConsumeIntegral<int>();\\n    GBool param5 = static_cast<GBool>(stream.ConsumeBool());\\n    GBool param6 = static_cast<GBool>(stream.ConsumeBool());\\n    GBool param7 = static_cast<GBool>(stream.ConsumeBool());\\n    int param8 = stream.ConsumeIntegral<int>();\\n    int param9 = stream.ConsumeIntegral<int>();\\n    int param10 = stream.ConsumeIntegral<int>();\\n    int param11 = stream.ConsumeIntegral<int>();\\n    // Assuming DW_TAG_subroutine_typeInfinite loop is a typo, correcting it to a valid type\\n    int* param12 = reinterpret_cast<int*>(0x87654321); // Example non-NULL pointer\\n    void* param13 = reinterpret_cast<void*>(0xAABBCCDD); // Example non-NULL pointer\\n\\n    // Create an instance of PDFDoc with a dummy file name\\n    GString dummyFileName(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&dummyFileName);\\n\\n    // Define a dummy abortCheckCbk function to match the signature expected by displayPageSlice\\n    GBool dummyAbortCheckCbk(void* data) {\\n        return 0; // Returning 0 as a dummy implementation\\n    }\\n\\n    // Call the function-under-test using the instance\\n    pdfDoc.displayPageSlice(outputDev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, dummyAbortCheckCbk, param12, param13);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}