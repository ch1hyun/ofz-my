{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    while (fuzzed_data_provider.remaining_bytes() > 0) {\\n        Object obj;\\n        GString *fileNameA = new GString(\"dummy.pdf\");\\n        PDFDoc *docA = new PDFDoc(fileNameA);\\n        SplashOutputDev *outA = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse);\\n        Dict *resDict = new Dict(NULL);\\n        PDFRectangle *box = new PDFRectangle();\\n        PDFRectangle *cropBox = new PDFRectangle();\\n        Gfx gfx(docA, outA, resDict, box, cropBox);\\n        int i = fuzzed_data_provider.ConsumeIntegral<int>();\\n        gfx.restoreState();\\n        gfx.saveState();\\n        gfx.callOpSetExtGState(&obj, i); // Fixed line\\n    }\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <vector>\\n\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"GfxState.h\"\\n#include \"Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 2) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    Object obj;\\n    int state = fuzzed_data_provider.ConsumeIntegral<int>();\\n\\n    PDFDoc *docA = nullptr;\\n    OutputDev *outA = nullptr;\\n    Dict *resDict = nullptr;\\n    PDFRectangle *box = nullptr;\\n    PDFRectangle *cropBox = nullptr;\\n    GBool (*abortCheckCbkA)(void *data) = nullptr;\\n    void *abortCheckCbkDataA = nullptr;\\n\\n    Gfx gfx(docA, outA, resDict, box, cropBox, abortCheckCbkA, abortCheckCbkDataA);\\n\\n    // gfx.opSetExtGState(&obj, state); // This method is private and cannot be accessed directly.\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}