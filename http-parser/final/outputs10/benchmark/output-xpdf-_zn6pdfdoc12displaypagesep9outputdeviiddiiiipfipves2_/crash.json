{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Decrypt.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider data_provider(data, size);\\n  int start_page = data_provider.ConsumeIntegral<int>();\\n  int end_page = data_provider.ConsumeIntegral<int>();\\n  double zoom = data_provider.ConsumeFloatingPoint<double>();\\n  double rotate = data_provider.ConsumeFloatingPoint<double>();\\n  int rotate_int = static_cast<int>(rotate);\\n  OutputDev *out = nullptr; \\n  \\n  GBool useMediaBox = data_provider.ConsumeBool();\\n  GBool crop = data_provider.ConsumeBool();\\n  GBool printing = data_provider.ConsumeBool();\\n  GBool guiStopCbk = data_provider.ConsumeBool();  \\n  void *guiDataA = nullptr; \\n\\n  if (start_page >= 1 && end_page >= start_page && end_page <= INT_MAX) {\\n    PDFDoc doc((char*)\"dummyfile.pdf\");\\n    doc.displayPages(out, start_page, end_page, zoom, rotate_int, useMediaBox, crop, printing, guiStopCbk, guiDataA);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  \\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n  \\n  // Create a PDFDoc from the remainder of the fuzz data\\n  const std::vector<uint8_t>& remaining = fdp.ConsumeRemainingBytes<uint8_t>();\\n  PDFDoc doc(new MemStream((char*)remaining.data(), 0, remaining.size(), new Object()));\\n\\n  // Call the function-under-test\\n  doc.displayPages(splashOut, 1, 1, hdpi, vdpi, rotate, useMediaBox, crop, printing, NULL, NULL);\\n\\n  delete splashOut;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}