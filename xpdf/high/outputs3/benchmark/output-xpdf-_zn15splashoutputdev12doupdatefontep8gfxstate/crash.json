{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"Object.h\"\\n#include \"GfxState.h\"\\n#include \"GfxFont.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"FoFiTrueType.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  GString ownerPW(\"\");\\n  GString userPW(\"\");\\n\\n  // Create or find a minimal PDF document in memory\\n  std::string filename = std::getenv(\"FUZZER_PDFIUM_PDF_PATH\");\\n  if (filename.empty())\\n    filename = \"/src/pdfium/testing/resources/pdfs/hello_world.pdf\";\\n  PDFDoc *doc = new PDFDoc(new GString(filename.c_str()), &ownerPW, &userPW);\\n\\n  // Setup parameters so they are valid\\n  globalParams = new GlobalParams(\"\");\\n\\n  // Use the original data as a font data stream\\n  const char *dataStr = reinterpret_cast<const char *>(data);\\n  GString gStrFont(dataStr, size);\\n  BaseStream *fontStream = new MemStream(const_cast<char*>(dataStr), 0, size, new Object());\\n  PDFRectangle box(0, 0, 1, 1);\\n  GfxFont *gfxFont = FoFiTrueType::make({dataStr, size}, 0, 0);\\n  double transform[6] = {0, 0, 0, 0, 0, 0};\\n  GfxState *gfxState = new GfxState(0, 0, &box, 0, false);\\n\\n  // Call to function-under-test\\n  SplashColor paperColor;\\n  SplashOutputDev outputDev(splashModeRGB8, 4, false, paperColor);\\n  outputDev.updateFont(gfxState); // Changed this line to call the public function\\n\\n  // Clean up\\n  delete doc;\\n  delete globalParams;\\n  delete fontStream;\\n  delete gfxFont;\\n  delete gfxState;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <freetype2/ft2build.h>\\n#include FT_FREETYPE_H\\n\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/freetype/src/bdf/bdf.h\"\\n#include \"/src/freetype/src/pcf/pcf.h\"\\n#include \"/src/freetype/src/sdf/ftsdf.h\"\\n#include \"/src/freetype/src/psaux/psft.h\"\\n#include \"/src/freetype/src/truetype/ttgxvar.h\"\\n\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"OutputDev.h\"\\n#include \"Error.h\"\\n#include \"PDFDoc.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/JPXStream.h\"\\n#include \"/src/xpdf-4.05/xpdf/JBIG2Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream-CCITT.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  if (size < 1)\\n    return 0;\\n  \\n  double hdpi = stream.ConsumeFloatingPointInRange<double>(90, 600);\\n  double vdpi = stream.ConsumeFloatingPointInRange<double>(90, 600);\\n  std::vector<char> payload = stream.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  BaseStream *baseStream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  globalParams = new GlobalParams(nullptr);\\n  globalParams->setupBaseFonts(nullptr);\\n  PDFDoc pdfDoc(baseStream, nullptr, nullptr, nullptr);\\n\\n  GfxState *state = new GfxState(hdpi, vdpi, pdfDoc.getPageMediaBox(1), 0, gFalse);\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, nullptr);\\n  splashOut->startDoc(&pdfDoc);\\n  splashOut->updateFont(state);\\n  splashOut->doUpdateFont(state); // Added this line to call the function `doUpdateFont`\\n\\n  delete splashOut;\\n  delete state;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}