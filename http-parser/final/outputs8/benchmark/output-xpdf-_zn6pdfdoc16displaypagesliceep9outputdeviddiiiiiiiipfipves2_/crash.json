{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"XRef.h\" \\n#include \"Page.h\" \\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n    double hdpi = fdp.ConsumeFloatingPoint<double>();\\n    double vdpi = fdp.ConsumeFloatingPoint<double>();\\n    int rotate = fdp.ConsumeIntegral<int>();\\n    GBool useMediaBox = fdp.ConsumeBool();\\n    GBool crop = fdp.ConsumeBool();\\n    GBool print = fdp.ConsumeBool();\\n    int sliceX = fdp.ConsumeIntegral<int>();\\n    int sliceY = fdp.ConsumeIntegral<int>();\\n    int sliceW = fdp.ConsumeIntegral<int>();\\n    int sliceH = fdp.ConsumeIntegral<int>();\\n    std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n    BaseStream * bs_stream = new MemStream(payload.data(), 0, payload.size(), NULL);\\n\\n    Object xpdf_obj;\\n    XRef *xref = new XRef(bs_stream, gFalse); \\n    xpdf_obj.initArray(xref); \\n\\n    BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n    globalParams = new GlobalParams(NULL);\\n    globalParams->setErrQuiet(1);\\n    PDFDoc *doc = new PDFDoc(stream, NULL, NULL);\\n\\n    Object info, xfa;\\n    SplashOutputDev::SliceOpts sliceOpts; // Use SplashOutputDev::SliceOpts instead of Page::SliceOpts\\n    sliceOpts.hx = sliceX;\\n    sliceOpts.hy = sliceY;\\n    sliceOpts.hw = sliceW;\\n    sliceOpts.hh = sliceH;\\n\\n    if (doc->isOk()) {\\n        OutputDev *outputDev = nullptr;\\n        doc->displayPageSlice(outputDev, 1, hdpi, vdpi, rotate, useMediaBox, crop, print, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n    }\\n\\n    delete doc;\\n    delete globalParams;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <vector>\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n\\n  FuzzedDataProvider FuzzedData(Data, Size);\\n  std::vector<uint8_t> data = FuzzedData.ConsumeBytes<uint8_t>(5);\\n  data.push_back('\\0'); // Ensure null termination for string\\n  char *FileName = reinterpret_cast<char *>(data.data());\\n  GBool g1,g2,g3;\\n  \\n  globalParams = new GlobalParams();\\n  \\n  PDFDoc doc(new GString(FileName), nullptr, nullptr);\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev outputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  int pg = 1;\\n  double hDPI= 72.0;\\n  double vDPI= 72.0;\\n  int rotate= 0;\\n\\n  g1 = FuzzedData.ConsumeBool();\\n  g2 = FuzzedData.ConsumeBool();\\n  g3 = FuzzedData.ConsumeBool();\\n  int x = FuzzedData.ConsumeIntegral<int>();\\n  int y = FuzzedData.ConsumeIntegral<int>();\\n  int w = FuzzedData.ConsumeIntegral<int>();\\n  int h = FuzzedData.ConsumeIntegral<int>();\\n  GBool abortCheckCbk = FuzzedData.ConsumeBool();\\n  void * abortCheckCbkData;\\n\\n  if (doc.isOk())\\n  {\\n    doc.displayPageSlice(&outputDev, pg, hDPI, vDPI, rotate,\\n                      g1, g2, g3,\\n                      x, y, w, h,\\n                      nullptr, nullptr);\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;  \\n}",
        "model": ""
    }

    ]
}