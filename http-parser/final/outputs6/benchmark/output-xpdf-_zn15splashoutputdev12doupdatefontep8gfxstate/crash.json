{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <string.h>\\n#include <unistd.h>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"aconf.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nnamespace {\\n\\nstd::unique_ptr<GlobalParams> globalParams;\\n\\nvoid initialize() {\\n  // initialize threads\\n  int numProcs = 4; // hard-coded due to lack of sysconf\\n\\n  globalParams.reset(new GlobalParams(\"/path/to/cfg/file\"));\\n  globalParams->setTextEncoding(\"UTF-8\");\\n  globalParams->setPrintCommands(gFalse);\\n  globalParams->setVectorAntialias(const_cast<char *>(\"yes\"));\\n}\\n\\nGfxState* CreateDummyGfxState() {\\n  return new GfxState(72, 72, nullptr, 0, gTrue);\\n}\\n}  // namespace\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  static bool initialized = false;\\n  if (!initialized) {\\n    initialize();\\n    initialized = true;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n  const std::string str = fdp.ConsumeRemainingBytesAsString();\\n  \\n  GString *filename = new GString(str.c_str(), str.size());\\n  if (!filename) {\\n    return 0;\\n  }\\n\\n  PDFDoc *doc = new PDFDoc(filename, nullptr, nullptr, nullptr);\\n  if (!doc->isOk()) {\\n    delete doc;\\n    return 0;\\n  }\\n\\n  SplashColor color;\\n  color[0] = 0xff;\\n  color[1] = 0xff;\\n  color[2] = 0xff;\\n  color[3] = 0xff;\\n  SplashOutputDev *splash = new SplashOutputDev(splashModeBGR8, 0, false, color);\\n  if (!splash) {\\n    delete doc;\\n    return 0;\\n  }\\n\\n  // this will initialize the font\\n  GfxState* state = CreateDummyGfxState();\\n  splash->doUpdateFont(state);\\n\\n  delete splash;\\n  delete doc;\\n  delete state;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <iostream>\\n#include <Object.h>\\n#include <Gfx.h>\\n#include <GfxState.h>\\n#include \"SplashOutputDev.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"splash/SplashFontEngine.h\"\\n#include \"splash/SplashFontFile.h\"\\n#include \"XRef.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  const std::vector<char> guard_zone(32, 0);\\n\\n  SplashColor sColor;\\n  SplashColor paperColor;\\n  memset(paperColor, 0, sizeof(paperColor));\\n  SplashOutputDev splashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  Stream *stream_obj = new MemStream((char*)stream.ConsumeBytesAsString(1).c_str(), 0, size, new Object());\\n  BaseStream *baseStream_obj = dynamic_cast<BaseStream *>(stream_obj);\\n  XRef xref(baseStream_obj, gFalse);\\n  GString *fileName = new GString(\"dummy\");\\n  PDFDoc pdfdoc(fileName, fileName, nullptr, nullptr);\\n \\n  GfxResources *gfxResources = new GfxResources(&xref, new Dict(&xref), nullptr);\\n  Gfx *gfx = new Gfx(&pdfdoc, &splashOutputDev, 1, gfxResources, nullptr, nullptr, -1, -1, -1, -1);\\n  GfxState *gfxstate = gfx->getState();\\n\\n  // Execute the function under test\\n  splashOutputDev.updateFont(gfxstate); \\n\\n  delete gfx;\\n  delete gfxResources;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}