{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages function\\n    MyOutputDev *outputDev = new MyOutputDev(); // Creating a new MyOutputDev object\\n    int pageNum = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n    // Removed the unnecessary loop variable\\n    const uint8_t *inputData = nullptr;\\n\\n    // Call the function-under-test\\n    GBool abortCheckCbk(void*) { return false; } // Define a dummy callback function\\n    PDFDoc pdfDoc(nullptr, nullptr); // Creating an instance of PDFDoc with dummy arguments\\n    pdfDoc.displayPages(outputDev, pageNum, numPages, scaleX, scaleY, rotation, useMediaBox, crop, printing, inputData, abortCheckCbk);\\n\\n    delete outputDev; // Freeing the allocated memory for MyOutputDev object\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\n// Include the necessary library for GBool\\n#include \"gmem.h\"\\n\\n// Define a dummy function matching the signature of abortCheckCbk\\nGBool dummyAbortCheck(void*) {\\n    return false;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(0x12345678); // Dummy pointer value\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scale = stream.ConsumeFloatingPoint<double>();\\n    double rotation = stream.ConsumeFloatingPoint<double>();\\n    int numCopies = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = static_cast<GBool>(stream.ConsumeBool());\\n    GBool crop = static_cast<GBool>(stream.ConsumeBool());\\n    GBool printing = static_cast<GBool>(stream.ConsumeBool()); // Fixed the missing ')' here\\n    GBool (*abortCheckCbk)(void*) = &dummyAbortCheck; // Assign the dummy function to abortCheckCbk\\n    void* abortCookie = reinterpret_cast<void*>(0xAABBCCDD); // Dummy pointer value\\n\\n    // Create an instance of PDFDoc with a dummy filename\\n    GString dummyFilename(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&dummyFilename); // Pass the dummy filename to the constructor\\n\\n    // Call the function-under-test using the instance\\n    pdfDoc.displayPages(outputDev, page, numPages, scale, rotation, numCopies, useMediaBox, crop, printing, abortCheckCbk, abortCookie);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}