{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode c = fdp.ConsumeIntegral<CharCode>();\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  GBool is_invisible = fdp.ConsumeBool();\\n  GBool is_image = fdp.ConsumeBool();\\n  GBool is_dot = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *fileName = new GString(\"dummy.pdf\");\\n  PDFDoc *doc = new PDFDoc(fileName);\\n  Page *page = new Page(doc, 1);\\n  PDFRectangle box;\\n  GfxState *state = new GfxState(72.0, 72.0, &box, rotate, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n  Unicode *uArray = new Unicode[1];\\n  uArray[0] = u;\\n  if(state && splashOut){\\n    splashOut->drawChar(state, x, y, dx, dy, originX, originY, c, 1, uArray, 1, is_invisible, is_image, is_dot);\\n  }\\n  \\n  delete splashOut;\\n  delete doc;\\n  delete state;\\n  delete fileName;\\n  delete globalParams;\\n  delete[] uArray;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.79",
        "coverage_diff": "0.005042852217973078",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n   FuzzedDataProvider stream(data, size);\\n\\n   double x = stream.ConsumeFloatingPoint<double>();\\n   double y = stream.ConsumeFloatingPoint<double>();\\n   double dx = stream.ConsumeFloatingPoint<double>();\\n   double dy = stream.ConsumeFloatingPoint<double>();\\n   double originX = stream.ConsumeFloatingPoint<double>();\\n   double originY = stream.ConsumeFloatingPoint<double>();\\n   CharCode code = stream.ConsumeIntegral<CharCode>();\\n   int nBytes = stream.ConsumeIntegral<int>();\\n   Unicode u = stream.ConsumeIntegral<Unicode>();\\n   GBool colr = stream.ConsumeIntegral<GBool>();\\n   GBool fill = stream.ConsumeIntegral<GBool>();\\n   GBool stroke = stream.ConsumeIntegral<GBool>();\\n\\n   globalParams = new GlobalParams(NULL);\\n  \\n   GString* ownerPassword = new GString(\"ownerPassword\");\\n   GString* userPassword = new GString(\"userPassword\");\\n   Object obj;\\n   obj.initNull();\\n   MemStream* str = new MemStream((char*)data, 0, size, &obj);\\n   PDFDoc* doc = new PDFDoc(str, ownerPassword, userPassword);\\n   PDFRectangle pdfRectangle = {0.0, 0.0, 1000.0, 1000.0};\\n   GfxState state(200.0, 200.0, &pdfRectangle, 0, gTrue);\\n   SplashColor color = {0, 0, 0};\\n   SplashOutputDev splash(splashModeRGB8, 1, gFalse, color, gTrue, gTrue); // Fixed line\\n   \\n   // Call the target function\\n   splash.drawChar(&state, x, y, dx, dy, originX, originY, code, nBytes, &u, 1, colr, fill, stroke);\\n\\n   return 0;\\n}",
        "model": ""
    }

    ]
}