{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.00",
        "coverage_diff": "0.00032067984126347857",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"goo/gtypes.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  int firstPage = fdp.ConsumeIntegral<int>();\\n  int lastPage = fdp.ConsumeIntegral<int>();\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeIntegral<GBool>();\\n  GBool crop = fdp.ConsumeIntegral<GBool>();\\n  GBool printing = fdp.ConsumeIntegral<GBool>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(stream, NULL, NULL, NULL);\\n    if (doc->isOk()) {\\n      OutputDev *output_dev = nullptr;\\n      doc->displayPages(output_dev, firstPage, lastPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL, NULL);\\n    }\\n  } catch (...) {\\n  }\\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gFalse; }\\n    GBool useDrawChar() override { return gTrue; }\\n    GBool interpretType3Chars() override { return gFalse; }\\n    // Implement other pure virtual functions here...\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Initialize PDFDoc and OutputDev objects here...\\n    GString fileName((char*)Data, Size);\\n    PDFDoc pdfDoc(&fileName);\\n    MyOutputDev outputDev;\\n\\n    // Call displayPages function here...\\n    pdfDoc.displayPages(&outputDev, 1, 1, 72, 1, 1, 0, gFalse, gTrue, gFalse);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}