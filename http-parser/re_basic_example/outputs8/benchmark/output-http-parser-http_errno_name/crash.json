{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size < 1)\\n    return 0;\\n  enum http_errno err_num = (enum http_errno)(Data[0] % (_HTTP_ERRNO_H + 1));\\n  const char *error_name = http_errno_name(err_num);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\n// Maximum enum value for http_errno\\n#define HTTP_ERRNO_MAX 55\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  // Mask off the first byte of data to limit the scope to HTTP_ERRNO_MAX\\n  http_errno input = (http_errno)(data[0] % (HTTP_ERRNO_MAX + 1));\\n\\n  // Call the function-under-test\\n  const char * result = http_errno_name(input);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}