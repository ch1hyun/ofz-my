{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"CharTypes.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"XRef.h\"\\n#include \"GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\nCharCode code;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  auto character = fdp.ConsumeIntegral<CharCode>();\\n  auto n = fdp.ConsumeIntegral<int>();\\n  auto u = fdp.ConsumeIntegralInRange<int>(0, 3);\\n  auto word = fdp.ConsumeBool();\\n  auto alpha = fdp.ConsumeBool();\\n  auto outline = fdp.ConsumeBool();\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev splashOut(splashModeBGR8, 1, gFalse, paperColor);\\n  GfxState s(72.0, 72.0, nullptr, 0, gFalse);\\n  Unicode unicode[] = {0, 0, 0, 0};\\n  GString fname(\"Arial-Bold\");\\n  BaseStream *strA = new BaseStream(); // create a BaseStream object\\n  XRef xref(strA, gFalse); // pass the BaseStream object to the XRef constructor\\n  Ref idA; // create a Ref object\\n  idA.num = 1; // set the num attribute of the Ref object\\n  idA.gen = 0; // set the gen attribute of the Ref object\\n  Dict *fontDict = new Dict(); // create a Dict object\\n  GfxFont *gfxFont = GfxFont::makeFont(&xref, \"tagA\", idA, fontDict); // pass the XRef, Ref and Dict objects to the makeFont function\\n  s.setFont(gfxFont, 1);\\n\\n  splashOut.drawChar(&s, 0, 0, 1, 1, 1, 1, character, n, unicode, u, word, alpha, outline);\\n\\n  delete strA;\\n  delete fontDict;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashTypes.h\"\\n#include \"fofi/FoFiTrueType.h\"\\n#include \"fofi/FoFiType1C.h\"\\n#include \"/src/xpdf-4.05/xpdf/Ref.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharTypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/ShadingImage.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Lexer.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOutputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n\\n  GfxState *state = new GfxState(72.0, 72.0, nullptr, 0, gFalse);\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  CharCode code = static_cast<CharCode>(stream.ConsumeIntegral<uint32_t>());\\n  int nBytes = static_cast<int>(stream.ConsumeIntegral<uint32_t>());\\n  if(nBytes < 0){\\n    nBytes = 0;\\n  }\\n  Unicode *unicode = new Unicode[nBytes];\\n  GBool free = stream.ConsumeBool();\\n  GBool adjust = stream.ConsumeBool();\\n  GBool primary = stream.ConsumeBool();\\n    \\n  splashOutputDev->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, unicode, nBytes, free, adjust, primary);\\n\\n  delete[] unicode;\\n  delete splashOutputDev;\\n  delete state;\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}