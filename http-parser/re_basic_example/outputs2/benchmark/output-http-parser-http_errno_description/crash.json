{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n#define HTTP_ERRNO_MAX 46\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  \\n  // limit the http_errno range based on the enum\\n  uint8_t http_err = (uint8_t)data[0] % HTTP_ERRNO_MAX; // there are 46 error types in the http_errno enum\\n\\n  // check if http_err is within the valid range of http_errno\\n  if (http_err < 0 || http_err >= HTTP_ERRNO_MAX) {\\n    return 0;\\n  }\\n\\n  const char* err_info = http_errno_description((enum http_errno)http_err);\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n  \\n  // Extract the first bytes as http_errno\\n  int http_errno = *(int*)data;\\n  data += sizeof(int);\\n  size -= sizeof(int);\\n  \\n  // Ensure we only parametrize it with a valid http_errno value\\n  if (http_errno >= 0 && http_errno < (int) _HTTP_ERRNO_H) {\\n    // Call the function-under-test\\n    const char * desc = http_errno_description((enum http_errno)http_errno);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}