{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Page.h\"\\n#include \"GooString.h\" // Include GooString header file\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages function\\n    MyOutputDev* outputDev = new MyOutputDev(); // Creating an instance of MyOutputDev\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scale = stream.ConsumeFloatingPoint<double>();\\n    double rotation = stream.ConsumeFloatingPoint<double>();\\n    int numThreads = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n    void* loop = reinterpret_cast<void*>(0x87654321); // Example address, changing type to void*\\n    void* customData = reinterpret_cast<void*>(0xAABBCCDD); // Example address\\n\\n    // Call the function-under-test\\n    GooString* fileName = new GooString(\"\"); // Creating an empty GooString\\n    PDFDoc pdfDoc(fileName, fileName); // Using the constructor with GooString pointers\\n    pdfDoc.displayPages(outputDev, page, numPages, scale, rotation, numThreads, useMediaBox, crop, printing, nullptr, customData);\\n\\n    delete fileName; // Freeing the allocated memory\\n    delete outputDev; // Freeing the allocated memory\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Error.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    OutputDev* outputDev = (OutputDev*)0x1; // Dummy non-NULL pointer\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scale = stream.ConsumeFloatingPoint<double>();\\n    double rotation = stream.ConsumeFloatingPoint<double>();\\n    int numCopies = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool useHWResolution = stream.ConsumeBool();\\n    void* abortData = (void*)0x3; // Dummy non-NULL pointer\\n\\n    // Create an instance of PDFDoc\\n    GString *fileNameA = new GString(\"dummy.pdf\"); // Provide a dummy file name\\n    PDFDoc pdfDoc(fileNameA);\\n\\n    // Call the function-under-test using the instance\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdfDoc.displayPages(outputDev, page, numPages, scale, rotation, numCopies, useMediaBox, crop, useHWResolution, nullptr, abortData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n\\n    delete fileNameA; // Clean up the allocated memory\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}