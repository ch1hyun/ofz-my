{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n\\n// Include the correct header file for Gfx class\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy Object pointer\\n    Object obj;\\n    Object *obj_ptr = &obj;\\n\\n    // Consume an integer for the second argument\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Create an array of Object to pass to opSetExtGState\\n    Object args[1];\\n    args[0] = *obj_ptr;\\n\\n    // Call the function-under-test\\n    PDFDoc doc(nullptr);\\n    OutputDev out(nullptr);\\n    Dict resDict(nullptr);\\n    Gfx gfx(&doc, &out, &resDict); // Using the constructor with required arguments\\n\\n    gfx.opSetExtGState(args, 1); // Calling the function with correct number of arguments\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include <cstdint>\\n#include \"/src/xpdf-4.05/xpdf/Object.h\" // Include for Object type\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include for PDFDoc type\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include for OutputDev type\\n\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\" // Include for GlobalParams type\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create variables to pass as arguments to the function-under-test\\n    Object obj; // Assuming Object is a valid type\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Create necessary objects for Gfx constructor\\n    GlobalParams *globalParams = new GlobalParams(\"/src/xpdf-4.05/xpdf/xpdfrc\");\\n    PDFDoc *pdfDoc = new PDFDoc(NULL, NULL);\\n    OutputDev *outputDev = new OutputDev();\\n\\n    // Call the function-under-test\\n    Gfx gfx(pdfDoc, outputDev, NULL, NULL, NULL);\\n    gfx.opSetExtGState(&obj, value);\\n\\n    delete globalParams;\\n    delete pdfDoc;\\n    delete outputDev;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}