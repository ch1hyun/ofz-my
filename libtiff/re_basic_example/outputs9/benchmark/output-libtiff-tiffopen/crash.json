{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "8.98",
        "coverage_diff": "0.00629994162993378",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <unistd.h>\\n\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Create a temporary file and write the data to the file.\\n  char filename[] = \"/tmp/fuzz-XXXXXX\";\\n  int fd = mkstemp(filename);\\n  if (fd == -1) {\\n    return -1;\\n  }\\n  uint8_t remainder = size % sizeof(uint8_t);\\n  std::vector<uint8_t> buffer = stream.ConsumeBytes<uint8_t>(size - remainder);\\n  const uint8_t* Data = buffer.data();\\n  if (write(fd, Data, size) < 0) {\\n    close(fd);\\n    remove(filename);\\n    return -1;\\n  }\\n  close(fd);\\n\\n  // Call the library function\\n  TIFF* out = TIFFOpen(filename, \"r\");\\n  if (out) {\\n    TIFFClose(out);\\n  }\\n\\n  remove(filename);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.98",
        "coverage_diff": "0.003904756154016464",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  FuzzedDataProvider stream(Data, Size);\\n  std::string filename = stream.ConsumeRandomLengthString();\\n  std::string mode = stream.ConsumeRemainingBytesAsString();\\n  \\n  TIFF* tif = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n  if (tif) {\\n    TIFFClose(tif);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}