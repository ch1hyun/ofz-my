{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nconst int max_http_status = 599; // According to the RFC 7231, the max and min values of HTTP status codes are 100 and 599 respectively.\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size != sizeof(int)) {  // Size must be exactly that of an integer\\n    return 0;\\n  }\\n\\n  int status_type = *((int*)data);  // Interpret the data as an integer\\n\\n  if (status_type >= 100 && status_type <= max_http_status) {  // The range of HTTP status codes is from 100 to 599\\n    const char* status_string = http_status_str((enum http_status)status_type);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.99",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\nconst int max_valid_http_status = HTTP_STATUS_SWITCHING_PROTOCOLS;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size != sizeof(int)) {\\n    return 0;\\n  }\\n\\n  int http_status = *((int*)data);\\n\\n  if (http_status >= 0 && http_status <= max_valid_http_status) {\\n    const char *name = http_status_str((enum http_status)http_status);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}