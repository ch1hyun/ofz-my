{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/goo/gfile.h\"\\n#include \"/src/xpdf-4.05/goo/gmem.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n#include \"/src/xpdf-4.05/goo/Trace.h\"\\n#include \"/src/xpdf-4.05/xpdf/Zoox.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(double) * 6 + sizeof(CharCode) + sizeof(int) + sizeof(bool) * 3) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double tOriginX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double tOriginY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n  bool fill = fuzzed_data.ConsumeBool();\\n  bool stroke = fuzzed_data.ConsumeBool();\\n  bool clip = fuzzed_data.ConsumeBool();\\n\\n  PDFRectangle pageBox;\\n  GfxState gfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n  SplashColor paperColor;\\n  SplashOutputDev outputDev(splashModeRGB8, 4, gFalse, paperColor);\\n\\n  Unicode unicode[1] = {0};\\n\\n  outputDev.drawChar(&gfxState, dx, dy, originX, originY, tOriginX, tOriginY, code, nBytes, unicode, 1, fill, stroke, clip);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFRectangle.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 10) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n  Unicode *u = new Unicode[nBytes];\\n  for (int i = 0; i < nBytes; i++) {\\n    u[i] = fuzzed_data.ConsumeIntegral<Unicode>();\\n  }\\n  GBool charExists = fuzzed_data.ConsumeBool();\\n  GBool charIsInvisible = fuzzed_data.ConsumeBool();\\n  GBool charIsFilled = fuzzed_data.ConsumeBool();\\n\\n  double hDPIA = 72.0;\\n  double vDPIA = 72.0;\\n  PDFRectangle pageBox(0.0, 0.0, 612.0, 792.0);\\n  int rotateA = 0;\\n  GBool upsideDown = gFalse;\\n\\n  GfxState *state = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n  SplashColorMode colorModeA = splashModeRGB8;\\n  int bitmapRowPadA = 4;\\n  GBool reverseVideoA = gFalse;\\n  SplashColorPtr paperColorA = nullptr;\\n  GBool bitmapTopDownA = gTrue;\\n  GBool allowAntialiasA = gTrue;\\n\\n  SplashOutputDev *dev = new SplashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n\\n  dev->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, nBytes, charExists, charIsInvisible, charIsFilled);\\n\\n  delete[] u;\\n  delete state;\\n  delete dev;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}