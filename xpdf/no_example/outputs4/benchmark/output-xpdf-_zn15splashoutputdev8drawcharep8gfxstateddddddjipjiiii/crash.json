{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\n#define MAX_UNICODE 255\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  double dx, dy, originX, originY, tOriginX, tOriginY;\\n  Unicode u[MAX_UNICODE];\\n  CharCode code;\\n  int nBytes = fdp.remaining_bytes() % MAX_UNICODE;\\n  \\n  GString *ownerPassword, *userPassword;\\n\\n  dx = fdp.ConsumeFloatingPoint<double>();\\n  dy = fdp.ConsumeFloatingPoint<double>();\\n  originX = fdp.ConsumeFloatingPoint<double>();\\n  originY = fdp.ConsumeFloatingPoint<double>();\\n  tOriginX = fdp.ConsumeFloatingPoint<double>();\\n  tOriginY = fdp.ConsumeFloatingPoint<double>();\\n  \\n  for(int i = 0; i < nBytes; ++i) {\\n    u[i] = fdp.ConsumeIntegral<Unicode>();\\n  }\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  userPassword = new GString(\"\");\\n  ownerPassword = new GString(\"\");\\n  PDFDoc *doc = NULL;\\n\\n  try {\\n    doc = new PDFDoc(ownerPassword, userPassword);\\n    if (doc->isOk() == gTrue) {\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      splashOut->setNoComposite(gTrue);\\n      splashOut->startDoc(doc->getXRef());\\n      \\n      for(size_t k = 1; k <= doc->getNumPages(); ++k) {\\n        doc->displayPage(splashOut, k, 72, 72, rotate, useMediaBox, crop, printing);\\n        double *ctm = new double[6];\\n        if(ctm) {\\n            auto page = doc->getCatalog()->getPage(k);\\n            page->getDefaultCTM(ctm, 72.0, 72.0, rotate, useMediaBox, gTrue); // Corrected line\\n            GfxState * state = new GfxState(72.0, 72.0, page->getMediaBox(), rotate, gTrue);\\n            splashOut->beginString(state, NULL);\\n            splashOut->drawChar(state, originX, originY, tOriginX, tOriginY, dx, dy, code, nBytes, u, nBytes, gFalse, gFalse, gFalse);\\n        }\\n      }\\n      \\n      delete splashOut;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <splash/SplashFont.h>\\n#include <splash/SplashBitmap.h>\\n#include <splash/SplashPattern.h>\\n#include <splash/SplashState.h>\\n#include <splash/SplashTypes.h>\\n#include <bitset>\\n#include <string>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"parseargs.h\"\\n#include \"splash/SplashFont.h\"\\n#include \"FoFiTrueType.h\"   \\n#include \"FoFiType1C.h\"     \\n#include \"FoFiType1.h\"      \\n#include \"FoFiIdentifier.h\" \\n\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  GfxState *state = new GfxState();\\n  double x = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double y = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double dx = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  CharCode code = fuzzed_data_provider.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data_provider.ConsumeIntegral<int>();\\n  Unicode *u = new Unicode[nBytes];\\n  int uLen = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool charExists = fuzzed_data_provider.ConsumeBool();\\n  GBool dRight = fuzzed_data_provider.ConsumeBool();\\n  GBool dLeft = fuzzed_data_provider.ConsumeBool();\\n  SplashOutputDev *outputDev = new SplashOutputDev();\\n  outputDev->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, charExists, dRight, dLeft);\\n  delete[] u;\\n  delete outputDev;\\n  delete state;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}