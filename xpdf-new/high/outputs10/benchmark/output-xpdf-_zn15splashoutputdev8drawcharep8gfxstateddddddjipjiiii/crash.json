{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"parseargs.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  CharCode code = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = stream.ConsumeIntegral<int>();\\n  std::vector<uint8_t> u = stream.ConsumeBytes<uint8_t>(nBytes);\\n  int uLen = stream.ConsumeIntegral<int>();\\n  GBool backdropColor = stream.ConsumeBool();\\n  GBool rgb = stream.ConsumeBool();\\n  GBool decomposeLigatures = stream.ConsumeBool();\\n  std::vector<char> payload = stream.ConsumeRemainingBytes<char>();\\n\\n  // Minimal PDF data to construct PDFDoc and required objects.\\n  std::string minimal_pdf = \"%PDF-1.7\\\n\";\\n  minimal_pdf.append(payload.begin(), payload.end());\\n  Object obj;\\n  obj.initNull();\\n  BaseStream *pdf_stream = new MemStream(minimal_pdf.data(), 0, minimal_pdf.size(), &obj);\\n  PDFDoc *doc = new PDFDoc(pdf_stream);\\n  \\n  int rotate = 0;\\n  PDFRectangle mediaBox(0, 0, 1, 1);\\n  GfxState *state = new GfxState(72.0, 72.0, &mediaBox, rotate, gFalse);\\n  \\n  // Initialize globalParams\\n  globalParams = new GlobalParams();\\n  \\n  SplashColor splashColor;\\n  splashColor[0] = 0;\\n  splashColor[1] = 0;\\n  splashColor[2] = 0;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, splashColor, gTrue);\\n  splashOut->startDoc(doc->getXRef());\\n\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, reinterpret_cast<Unicode*>(u.data()), uLen, backdropColor, rgb, decomposeLigatures);\\n\\n  delete state;\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cassert>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <limits>\\n#include <new>\\n#include <vector>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"SplashColor.h\" // Include this header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 10) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  GBool composing = fdp.ConsumeBool();\\n  GBool incremental = fdp.ConsumeBool();\\n  std::vector<char> password = fdp.ConsumeBytes<char>(size / 10);\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n  password.push_back('\\0');\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n\\n  GBool ok;\\n  GString *gstr = new GString(password.data());\\n  PDFDoc *doc = new PDFDoc(str, gstr, gstr);\\n  if (doc) {\\n    int page = 1; // assuming page 1 for the fuzzing\\n    PDFRectangle pageBox;\\n    GfxState *state = new GfxState(72.0, 72.0, &pageBox, doc->getPageRotate(page), gFalse);\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeXBGR8, 4, gFalse, splashWhite);\\n    splashOut->startDoc(doc->getXRef());\\n    splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, 1, &u, 1, composing, incremental, gFalse);\\n  }\\n  return 0;\\n}",
        "model": ""
    }

    ]
}