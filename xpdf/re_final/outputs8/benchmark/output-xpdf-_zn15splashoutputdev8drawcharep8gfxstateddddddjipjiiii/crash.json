{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(double) * 6 + sizeof(CharCode) + sizeof(int) + sizeof(GBool) * 3) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double tOriginX = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double tOriginY = fuzzed_data.ConsumeFloatingPoint<double>();\\n\\n    CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n    int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n\\n    GBool g1 = fuzzed_data.ConsumeBool();\\n    GBool g2 = fuzzed_data.ConsumeBool();\\n    GBool g3 = fuzzed_data.ConsumeBool();\\n\\n    std::vector<Unicode> u(nBytes);\\n    for (int i = 0; i < nBytes; ++i) {\\n        u[i] = fuzzed_data.ConsumeIntegral<Unicode>();\\n    }\\n\\n    PDFRectangle pageBox;\\n    GfxState gfxState(72.0, 72.0, &pageBox, 0, gTrue);\\n\\n    SplashOutputDev splashOutputDev;\\n\\n    splashOutputDev.drawChar(&gfxState, dx, dy, originX, originY, tOriginX, tOriginY, code, nBytes, u.data(), nBytes, g1, g2, g3);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 10) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    SplashColorMode colorModeA = static_cast<SplashColorMode>(fuzzed_data.ConsumeIntegral<int>());\\n    int bitmapRowPadA = fuzzed_data.ConsumeIntegral<int>();\\n    GBool reverseVideoA = fuzzed_data.ConsumeBool();\\n    std::vector<uint8_t> paperColorBytes = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(SplashColorPtr));\\n    SplashColorPtr paperColorA = reinterpret_cast<SplashColorPtr>(paperColorBytes.data());\\n    GBool bitmapTopDownA = fuzzed_data.ConsumeBool();\\n    GBool allowAntialiasA = fuzzed_data.ConsumeBool();\\n\\n    SplashOutputDev dev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n\\n    double hDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double vDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n    std::vector<uint8_t> pageBoxBytes = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(PDFRectangle));\\n    PDFRectangle *pageBox = reinterpret_cast<PDFRectangle*>(pageBoxBytes.data());\\n    int rotateA = fuzzed_data.ConsumeIntegral<int>();\\n    GBool upsideDown = fuzzed_data.ConsumeBool();\\n\\n    GfxState state(hDPIA, vDPIA, pageBox, rotateA, upsideDown);\\n\\n    double dx1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dy1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dx2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dy2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dx3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dy3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n    int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n    std::vector<uint8_t> uBytes = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(Unicode));\\n    Unicode *u = reinterpret_cast<Unicode*>(uBytes.data());\\n    int uLen = fuzzed_data.ConsumeIntegral<int>();\\n    GBool d = fuzzed_data.ConsumeBool();\\n    GBool r = fuzzed_data.ConsumeBool();\\n    GBool g = fuzzed_data.ConsumeBool();\\n\\n    dev.drawChar(&state, dx1, dy1, dx2, dy2, dx3, dy3, code, nBytes, u, uLen, d, r, g);\\n    \\n    return 0;\\n}",
        "model": ""
    }

    ]
}