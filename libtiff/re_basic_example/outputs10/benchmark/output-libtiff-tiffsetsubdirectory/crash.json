{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstring>\\n#include <sstream>\\n\\n#include \"tiffio.h\"\\n#include \"tiffio.hxx\"\\n\\nstruct vorbis_data {\\n  const uint8_t *current;\\n  const uint8_t *data;\\n  size_t size;\\n};\\n\\nsize_t read_func(void *ptr, size_t size1, size_t size2, void *datasource) {\\n  vorbis_data *vd = (vorbis_data *)(datasource);\\n  size_t len = size1 * size2;\\n  if (vd->current + len > vd->data + vd->size) {\\n    len = vd->data + vd->size - vd->current;\\n  }\\n  memcpy(ptr, vd->current, len);\\n  vd->current += len;\\n  return len;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Read the values for the function\\n  uint64_t sub_dir_offset = stream.ConsumeIntegral<uint64_t>();\\n  \\n  // Setup vorbis data and callbacks\\n  vorbis_data vd;\\n  auto remaining_bytes = stream.ConsumeRemainingBytes<uint8_t>();\\n  vd.data = remaining_bytes.data();\\n  vd.current = vd.data;\\n  vd.size = remaining_bytes.size();\\n\\n  std::istringstream iss(std::string(reinterpret_cast<const char*>(vd.data), vd.size));\\n  TIFF *tif = TIFFStreamOpen(\"MemTIFF\", &iss);\\n  if (!tif) {\\n    return 0;\\n  }\\n\\n  // Call function\\n  int retval = TIFFSetSubDirectory(tif, sub_dir_offset);\\n\\n  TIFFClose(tif);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\ntsize_t _tiffReadProc(thandle_t, tdata_t, tsize_t) {\\n  // Implement the function or link from a library\\n  return 0;\\n}\\n\\ntsize_t _tiffWriteProc(thandle_t, tdata_t, tsize_t) {\\n  // Implement the function or link from a library\\n  return 0;\\n}\\n\\ntoff_t _tiffSeekProc(thandle_t, toff_t, int) {\\n  // Implement the function or link from a library\\n  return 0;\\n}\\n\\nint _tiffCloseProc(thandle_t) {\\n  // Implement the function or link from a library\\n  return 0;\\n}\\n\\ntoff_t _tiffSizeProc(thandle_t) {\\n  // Implement the function or link from a library\\n  return 0;\\n}\\n\\nint _tiffMapProc(thandle_t, tdata_t*, toff_t*) {\\n  // Implement the function or link from a library\\n  return 0;\\n}\\n\\nvoid _tiffUnmapProc(thandle_t, tdata_t, toff_t) {\\n  // Implement the function or link from a library\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size < sizeof(uint64_t)) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(Data, Size);\\n  const uint64_t dir_offset = stream.ConsumeIntegral<uint64_t>();\\n\\n  TIFF *tif = TIFFClientOpen(\"sample\", \"w\", (thandle_t)Data, \\n                _tiffReadProc, _tiffWriteProc, \\n                _tiffSeekProc, _tiffCloseProc, _tiffSizeProc,\\n                _tiffMapProc, _tiffUnmapProc);\\n  \\n  if (!tif) {\\n    return 0;\\n  }\\n\\n  int tif_res = TIFFSetSubDirectory(tif, dir_offset);\\n  \\n  TIFFClose(tif);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}