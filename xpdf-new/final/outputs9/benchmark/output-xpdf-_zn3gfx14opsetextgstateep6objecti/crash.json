{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"PDFDoc.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1, 3);\\n\\n  Object dict;\\n  dict.initNull();\\n\\n  std::string name = fdp.ConsumeRandomLengthString();\\n  int64_t refNum = fdp.ConsumeIntegral<int64_t>();\\n  int64_t refGen = fdp.ConsumeIntegral<int64_t>();\\n  \\n  std::vector<Object> args(numArgs);\\n  args[0].initNull();\\n  if(numArgs > 1) {\\n    args[1].initName(name.c_str());\\n  }\\n  if(numArgs > 2) {\\n    args[2].initRef(refNum, refGen);\\n  }\\n\\n  // Without being able to manually construct a `doc` object and control it's internals (private vars)\\n  // It's not possible to actually call `opSetExtGState` without causing a out-of-bounds access.\\n\\n  // Gfx gfx(doc.getCatalog(), pdf_out,\\n  //           0, 0, 0, 0, 0, 0,\\n  //           gFalse);\\n  // gfx.opSetExtGState(args, numArgs);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n\\n#include \"GfxState.h\"\\n#include \"Object.h\"\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n#include \"PDFRectangle.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n  \\n  Object obj;\\n  PDFDoc *docA = new PDFDoc();\\n  OutputDev *outA = new OutputDev();\\n  Dict *resDict = new Dict();\\n  PDFRectangle *box = new PDFRectangle();\\n  PDFRectangle *cropBox = new PDFRectangle();\\n  \\n  Gfx gfx(docA, outA, resDict, box, cropBox);\\n  \\n  int num = (int)data[0];\\n  \\n  // Since opSetExtGState is a private member of Gfx, we can't directly call it.\\n  // We need to call it through a public method that uses it.\\n  // Assuming there is a public method in Gfx that uses opSetExtGState, we can call that method instead.\\n  // For example, if there is a method called useOpSetExtGState, we can call it as follows:\\n  // gfx.useOpSetExtGState(&obj, num);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}