{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.50",
        "coverage_diff": "0.00023250034073325797",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"GlobalParams.h\"\\n#include \"Stream.h\"\\n#include \"Object.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n  \\n  // Initialize libraries\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n  \\n  // Initialize a document\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(payload.data(), 0, payload.size(), &obj);\\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL, NULL);\\n\\n  if (doc->isOk()) {\\n    SplashColor paperColor;\\n    paperColor[0] = paperColor[1] = paperColor[2] = 255;\\n\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor, gTrue);\\n    splashOut->startDoc(doc->getXRef());\\n    Page *page = doc->getCatalog()->getPage(1); // Fix for 'getPage' error\\n\\n    PDFRectangle box;\\n    GfxState *state = new GfxState(hDPI, vDPI, &box, 0, gFalse);\\n    splashOut->updateFont(state); // Fix for 'doUpdateFont' error\\n\\n    delete state;\\n    delete splashOut;\\n    delete doc;\\n    delete globalParams;\\n  }\\n\\n   return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"GlobalParams.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < 3)\\n    return 0;\\n\\n  FuzzedDataProvider fdp(data, size);\\n\\n  globalParams = new GlobalParams(\"\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"/path/to/pdf.pdf\"));\\n\\n  SplashOutputDev *splashOut;\\n  SplashColor paperColor;\\n  paperColor[0] = paperColor[1] = paperColor[2] = 0xff;\\n  splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n\\n  splashOut->startDoc(doc->getXRef());\\n\\n  splashOut->setFillColor(paperColor[0], paperColor[1], paperColor[2]);\\n\\n  // Create a GfxState with a non-null clip rect\\n  PDFRectangle rect(0, 0, 100, 100);\\n  GfxState *state = new GfxState(72.0, 72.0, &rect, 0, gFalse);\\n  splashOut->fill(state);\\n\\n  // Create a new GfxState with a non-null clip rect\\n  state = new GfxState(72.0, 72.0, &rect, 0, gFalse);\\n\\n  splashOut->updateFont(state);\\n\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}