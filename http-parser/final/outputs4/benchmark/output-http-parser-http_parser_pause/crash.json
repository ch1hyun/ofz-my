{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "26.74",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nhttp_parser_settings settings;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Initialize a HTTP Parser\\n  http_parser *parser = (http_parser *)malloc(sizeof(http_parser));\\n\\n  // Initialize the HTTP Parser with HTTP_REQUEST type.\\n  http_parser_init(parser, HTTP_REQUEST);\\n\\n  if (size == 0) {\\n    http_parser_pause(parser, 0);\\n    free(parser);\\n    return 0;\\n  }\\n\\n  // Pause or continue the parser based on the first byte of the input.\\n  http_parser_pause(parser, data[0] % 2);\\n\\n  // Feed the parser with input data\\n  http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n  // Free the HTTP Parser\\n  free(parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.88",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  http_parser_init(parser, HTTP_REQUEST);\\n  http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n  if (size % 2) {\\n    http_parser_pause(parser, 1);\\n  } else {\\n    http_parser_pause(parser, 0);\\n  }\\n  \\n  free(parser);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}