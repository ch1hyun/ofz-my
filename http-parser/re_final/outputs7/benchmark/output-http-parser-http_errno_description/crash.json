{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "19.56",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Declare and initialize http_parser_settings\\nhttp_parser_settings settings = {0};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  if (size > 0) {\\n    size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n    enum http_errno httpErrNo = (data[0] % (HPE_PAUSED -1));\\n\\n    http_errno_description(httpErrNo);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nextern const char * http_errno_description(enum http_errno err);\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Inputs should at least be of size sizeof(int)\\n  if(size<sizeof(int))\\n        return 0;\\n  \\n  int http_errno_raw;\\n  memcpy(&http_errno_raw, data, sizeof(int));\\n\\n  if(http_errno_raw < 0 || http_errno_raw > HPE_PAUSED) // The values of http_errno enumeration\\n    return 0;\\n  \\n  // Fuzzing\\n  enum http_errno err_to_test = (enum http_errno)http_errno_raw;\\n  \\n  // Call the function-under-test\\n  const char * description = http_errno_description(err_to_test);\\n  \\n  // We always return 0 to ensure that our fuzzer continues to search for bugs even if an input crashes this particular function.\\n  return 0;\\n} ",
        "model": ""
    }

    ]
}