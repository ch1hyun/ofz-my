{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n\\n#include \"libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n  LibRaw rawprocessor;\\n  libraw_processed_image_t *image;\\n\\n  int i = rawprocessor.open_buffer((void *)data, size);\\n  if (i != LIBRAW_SUCCESS) {\\n    return 0;  // cannot open image or it's too small.\\n  }\\n\\n  i = rawprocessor.unpack();\\n  if (i != LIBRAW_SUCCESS) {\\n    return 0;  // too damaged to qualify this input as \"interesting\"\\n  }\\n\\n  rawprocessor.sraw_midpoint();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"libraw/libraw.h\"\\n#include <stdint.h>\\n#include <cstddef>\\n#include <cstdlib>\\n\\n#define INPUT_LIMIT 16384\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size > INPUT_LIMIT) {\\n    return 0;\\n  }\\n\\n  LibRaw RawProcessor;\\n  int ret = 0;\\n\\n  ret = RawProcessor.open_buffer((void *)Data, Size);\\n  if(ret != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n\\n  ret = RawProcessor.sraw_midpoint();\\n  RawProcessor.recycle();\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}