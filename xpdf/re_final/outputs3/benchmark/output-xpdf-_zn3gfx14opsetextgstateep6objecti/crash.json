{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"aconf.h\"\\n#include \"Dict.h\"\\n#include \"Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"XRef.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  // Create the necessary objects to call the target function\\n  Object obj;\\n  PDFDoc *docA;\\n  OutputDev *outA;\\n  Dict *resDict;\\n  PDFRectangle *box;\\n  PDFRectangle *cropBox;\\n  GBool (*abortCheckCbkA)(void *data) = NULL;\\n  void *abortCheckCbkDataA = NULL;\\n  Gfx gfx(docA, outA, resDict, box, cropBox, abortCheckCbkA, abortCheckCbkDataA);\\n  int state = fuzzed_data.ConsumeIntegral<int>();\\n\\n  // Call the target function\\n  gfx.opSetExtGState(&obj, state);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"Object.h\"\\n#include \"Page.h\"\\n#include \"Array.h\"\\n#include \"Stream.h\"\\n#include \"XRef.h\"\\n#include \"GString.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 2) {\\n        return 0;\\n    }\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    auto obj = new Object();\\n    int num = fuzzed_data_provider.ConsumeIntegral<int>();\\n\\n    // Create necessary objects for Gfx constructor\\n    GString *fileNameA = new GString(\"dummy.pdf\");\\n    PDFDoc *docA = new PDFDoc(fileNameA);\\n    OutputDev *outA = docA->getOutputDev();\\n    BaseStream *strA = docA->getBaseStream();\\n    XRef *xrefA = new XRef(strA, gFalse);\\n    Dict *resDict = new Dict(xrefA);\\n    PDFRectangle *box = new PDFRectangle();\\n    PDFRectangle *cropBox = new PDFRectangle();\\n    GBool (*abortCheckCbkA)(void *data) = nullptr;\\n    void *abortCheckCbkDataA = nullptr;\\n\\n    // Initialize Gfx with necessary arguments\\n    Gfx gfx(docA, outA, resDict, box, cropBox, abortCheckCbkA, abortCheckCbkDataA);\\n    \\n    // 'opSetExtGState' is a private member of 'Gfx', so it cannot be accessed directly.\\n    // We need to use a public method of 'Gfx' that internally calls 'opSetExtGState'.\\n    // Assuming 'executeOperator' is a public method that can call 'opSetExtGState' internally.\\n    // gfx.executeOperator(\"SetExtGState\", obj, num); // This line is commented out because 'executeOperator' is not a member of 'Gfx'\\n\\n    delete obj;\\n    delete docA;\\n    delete outA;\\n    delete resDict;\\n    delete box;\\n    delete cropBox;\\n    delete fileNameA;\\n    delete xrefA;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}