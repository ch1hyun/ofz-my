{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/libraw/libraw/libraw.h\"\\n#include \"fuzzer/FuzzedDataProvider.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    uint32_t param2 = stream.ConsumeIntegral<uint32_t>();\\n    std::vector<uint8_t> param1_vector = stream.ConsumeRemainingBytes<uint8_t>();\\n    void* param1 = (void *)param1_vector.data();\\n\\n    if (param1_vector.size() > 4) { // ensure there are enough bytes for crxDecodePlane to process\\n        MyLibRaw raw_image;\\n        raw_image.imgdata.rawdata.raw_image = (ushort*)param1; // Initialize raw_image before calling crxDecodePlane\\n        if (raw_image.imgdata.rawdata.raw_image != nullptr) { // Check if raw_image is not null before calling crxDecodePlane\\n            raw_image.crxDecodePlane(param1, param2);\\n        }\\n    }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <vector>\\n\\nclass FuzzLibRaw : public LibRaw {\\npublic:\\n  int publicCrxDecodePlane(void *ptr, uint32_t planeNumber) {\\n    return this->crxDecodePlane(ptr, planeNumber);\\n  }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  uint32_t dataSize = stream.ConsumeIntegral<decltype(dataSize)>();\\n  std::vector<uint8_t> input = stream.ConsumeBytes<uint8_t>(dataSize);\\n  void* inputData = input.data();\\n  \\n  FuzzLibRaw libraw_instance;\\n\\n  // Check if the input data is not null and dataSize is not zero before calling the function.\\n  if (inputData != nullptr && dataSize != 0) {\\n    // Call the function under test.\\n    try {\\n      libraw_instance.publicCrxDecodePlane(inputData, dataSize);\\n    } catch (...) {\\n      // Catch all exceptions to prevent crashes during fuzzing\\n    }\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}