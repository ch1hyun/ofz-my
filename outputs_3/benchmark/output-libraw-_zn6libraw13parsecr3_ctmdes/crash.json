{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  LibRaw libraw;\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  if (size < sizeof(short)) {\\n    return 0;\\n  }\\n\\n  short param1 = fuzzed_data_provider.ConsumeIntegral<short>();\\n\\n  libraw.parseCR3_CTMD(param1);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.43",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size < 2) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data_provider(Data, Size);\\n\\n  short input_short = fuzzed_data_provider.ConsumeIntegral<short>();\\n  LibRaw MyRawProcessor;\\n  // The method parseCR3_CTMD does not exist in the LibRaw class. \\n  // Let's use the open_buffer method which seems to be the correct one for this context.\\n  MyRawProcessor.open_buffer(&input_short, sizeof(input_short));\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}