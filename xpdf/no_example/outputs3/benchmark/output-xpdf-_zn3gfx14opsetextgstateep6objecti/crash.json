{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Convert Data to Object and int as per your requirement\\n    Object *obj;\\n    int num;\\n\\n    // Create necessary objects for Gfx constructor\\n    PDFDoc *docA;\\n    OutputDev *outA;\\n    Dict *resDict;\\n\\n    // Initialize Gfx with necessary arguments\\n    Gfx gfx(docA, outA, resDict, nullptr, nullptr);\\n\\n    // As opSetExtGState is a private member, it cannot be accessed directly.\\n    // You need to use a public method that calls this private method.\\n    // Assuming there is a public method in Gfx class that calls opSetExtGState\\n    // gfx.publicMethodThatCallsOpSetExtGState(obj, num);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <memory>\\n\\n#include \"Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"XRef.h\"\\n#include \"Catalog.h\"\\n#include \"Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  const char *ownerPassword = \"\";\\n  const char *userPassword = \"\";\\n  int rotateA = 0;\\n  \\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Initialize GlobalParams\\n  globalParams = new GlobalParams(nullptr);\\n\\n  unsigned stateLen = stream.remaining_bytes() / 2;\\n  std::vector<uint8_t> extGStateBytes = stream.ConsumeBytes<uint8_t>(stateLen);\\n  Object extGState;\\n  Object objNull;\\n  extGState.initStream(new MemStream((char *)extGStateBytes.data(), 0, stateLen, &objNull));\\n\\n  BaseStream *baseStr = new MemStream((char *)extGStateBytes.data(), 0, stateLen, &objNull);\\n  XRef *xref = new XRef(baseStr, false);\\n  PDFDoc *doc = new PDFDoc(baseStr, ownerPassword, userPassword);\\n  Catalog *catalog = new Catalog(doc);\\n  int len = stream.ConsumeIntegralInRange<int>(0, size);\\n  Gfx *gfx = new Gfx(doc, nullptr, catalog->getPage(1)->getResourceDict(), 72, 72, nullptr, nullptr, nullptr);\\n\\n  gfx->opSetExtGState(&extGState, len);\\n\\n  delete gfx;\\n  delete catalog;\\n  delete doc;\\n  delete xref;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}