{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode c = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  int uLen = fdp.ConsumeIntegral<int>();\\n  GBool fill = fdp.ConsumeIntegral<GBool>();\\n  GBool stroke = fdp.ConsumeIntegral<GBool>();\\n  GBool is_cursor_pos = fdp.ConsumeIntegral<GBool>();\\n  \\n  if (nBytes > size || uLen > size) {\\n    return 0;\\n  }\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), ownerPassword, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n\\n  SplashColor paperColor = {0, 0, 0, 0};\\n\\n  // Fix: Call the target function\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, c, nBytes, &u, uLen, fill, stroke, is_cursor_pos);\\n\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "Without the original code, it's impossible to provide a solution. Please provide the necessary details.",
        "model": ""
    }

    ]
}