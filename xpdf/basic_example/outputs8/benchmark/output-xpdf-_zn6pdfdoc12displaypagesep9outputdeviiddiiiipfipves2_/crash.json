{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.04",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"splash/SplashBitmap.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  const unsigned short start_page = stream.ConsumeIntegral<unsigned short>();\\n  const unsigned short num_pages = stream.ConsumeIntegral<unsigned short>();\\n  const double h_dpi = stream.ConsumeFloatingPoint<double>();\\n  const double v_dpi = stream.ConsumeFloatingPoint<double>();\\n  const bool use_media_box = stream.ConsumeBool();\\n  const bool crop = stream.ConsumeBool();\\n  const bool printing = stream.ConsumeBool();\\n\\n  auto pdf_doc_contents = stream.ConsumeRemainingBytes<char>();\\n  if (pdf_doc_contents.empty()) {\\n    return 0;\\n  }\\n\\n  int splash_array[] = {splashModeMono1, splashModeMono8, splashModeRGB8,\\n                        splashModeBGR8, splashModeCMYK8};\\n  SplashColor splash_color;\\n  splash_color[0] = 255;\\n\\n  // Initialize GlobalParams object\\n  GlobalParams globalParams(\"\");\\n\\n  SplashOutputDev splash_outdev(splashModeBGR8, 4, gFalse, splash_color);\\n\\n  const GBool pdf_unencrypted = gFalse;\\n  GString fileName(&pdf_doc_contents[0], pdf_doc_contents.size());\\n  auto pdf_doc =\\n      std::make_unique<PDFDoc>(&fileName);\\n  if (!pdf_doc->isOk()) {\\n    return 0;\\n  }\\n\\n  pdf_doc->displayPages(&splash_outdev, start_page, num_pages, h_dpi, v_dpi,\\n                        0,  // No rotation.\\n                        use_media_box, crop, printing, nullptr, nullptr);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  bool forceRasterize = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  Object info, xfa;\\n  Object *acroForm;\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes);\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    PDFDoc doc(stream);\\n    if (doc.isOk() == gTrue) {\\n\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      splashOut->setNoComposite(gFalse);\\n      splashOut->startDoc(doc.getXRef());\\n\\n      doc.displayPages(splashOut, 1, doc.getNumPages(), hdpi, vdpi, rotate, useMediaBox, crop, forceRasterize, nullptr, nullptr);\\n\\n      delete splashOut;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}