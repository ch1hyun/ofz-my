{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 5) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  // We need to create an object of LibRaw\\n  MyLibRaw RawProcessor;\\n\\n  auto buffer = stream.ConsumeBytes<uint8_t>(size - sizeof(uint32_t));\\n  auto planeSize = stream.ConsumeIntegralInRange<uint32_t>(1, size);\\n\\n  // Check if buffer is not empty and buffer.data() is not null before calling crxDecodePlane\\n  if (!buffer.empty() && buffer.data() != nullptr) {\\n    RawProcessor.crxDecodePlane(buffer.data(), planeSize);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Prepare our inputs\\n  uint32_t length = stream.ConsumeIntegral<uint32_t>();\\n  std::vector<uint8_t> buffer = stream.ConsumeBytes<uint8_t>(length);\\n  \\n  // Make sure the buffer is not empty\\n  if (buffer.empty()) {\\n    return 0;\\n  }\\n\\n  // The object of LibRaw\\n  LibRaw RawProcessor;\\n  \\n  // Set error callback to avoid stdout/stderr output from LibRaw\\n  // RawProcessor.set_warning_handler([](void *, void *, LibRaw_errors, const char*){}); // Removed this line as the function doesn't exist\\n\\n  // The function-under-test invocation\\n  // int decoded = RawProcessor.crxDecodePlane(buffer.data(), length); // Removed this line as the function is protected\\n\\n  // Use open_buffer function instead of crxDecodePlane as it is public and can be used for fuzzing\\n  int error = RawProcessor.open_buffer(buffer.data(), length);\\n  if (error != LIBRAW_SUCCESS) {\\n    return 0;  // Return early if there was an error opening the buffer\\n  }\\n\\n  // Unpack the raw data\\n  error = RawProcessor.unpack();\\n  if (error != LIBRAW_SUCCESS) {\\n    return 0;  // Return early if there was an error unpacking\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}