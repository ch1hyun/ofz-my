{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "20.29",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Just a random callback function, all callbacks are the same\\nint on_message_begin_cb(http_parser* _) {\\n  return 0;\\n}\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if(Size==0) return 0; \\n\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n  settings.on_message_begin = on_message_begin_cb; // assign at least one callback\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  http_parser_execute(&parser,\\n    &settings,\\n    (const char *)Data,\\n    Size);\\n\\n  // Get a random boolean from FuzzedDataProvider and call the function-under-test\\n  int paused = rand() % 2;\\n  if (parser.http_errno == HPE_OK) {\\n    http_parser_pause(&parser, paused);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.43",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  if (size > 0) {\\n    int pause = data[0] % 2;\\n    http_parser_pause(&parser, pause);\\n    http_parser_execute(&parser, NULL, (const char *)data, size); // Add this line to utilize the function under test\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}