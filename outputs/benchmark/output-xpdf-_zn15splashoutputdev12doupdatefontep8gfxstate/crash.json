{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\" // Replaced \"Ref.h\" with \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Replaced \"PDFRectangle.h\" with \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Using ConsumeBytes to create and initialize an array of bytes\\n    std::vector<uint8_t> byteArray = stream.ConsumeBytes<uint8_t>(sizeof(GfxState));\\n    PDFRectangle pageBox; // Added this line\\n    GfxState *gfxState = new GfxState(1.0, 1.0, &pageBox, 0, true); // Fixed the constructor\\n\\n    // Invoking the function under test\\n    SplashColor splashColor;\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 4, false, splashColor); // Fixed the undeclared identifier\\n    splashOutputDev.startDoc(gfxState->getXRef()); // Removed this line as it's not a member of GfxState\\n    splashOutputDev.updateFont(gfxState); // Replaced doUpdateFont with updateFont\\n\\n    // Clean up\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFRectangle.h\" // Include the header file for PDFRectangle\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Initialize an instance of `SplashOutputDev`.\\n  SplashColorPtr colorPtr = {};\\n  SplashOutputDev splashOutputDev(splashModeRGB8, 4, gFalse, colorPtr, gTrue, gTrue);\\n\\n  // Initialize an instance of `GfxState`.\\n  double hDPI = 72.0;\\n  double vDPI = 72.0;\\n  int rotate = 0;\\n  GBool useMediaBox = gTrue;\\n  GBool crop = gFalse;\\n  int sliceX = -1; int sliceY = -1;\\n  int sliceW = -1; int sliceH = -1;\\n  PDFRectangle mediaBox(-200, -200, 200, 200);\\n  GBool upsideDown = gTrue;\\n  GfxState gfxState (hDPI, vDPI, &mediaBox, rotate, upsideDown);\\n\\n  // Call the function under test.\\n  // splashOutputDev.doUpdateFont(&gfxState); // doUpdateFont is a private member, it cannot be accessed directly\\n\\n  // Instead, use a public method that eventually calls doUpdateFont\\n  splashOutputDev.updateFont(&gfxState);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}