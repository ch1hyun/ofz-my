{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"Object.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  std::string fileName = fdp.ConsumeRandomLengthString();\\n  PDFDoc *doc = new PDFDoc(new GString(fileName.c_str()), NULL, NULL, NULL);\\n\\n  // Create a dummy OutputDev and PDFRectangle to pass to Gfx constructor\\n  SplashColorMode colorMode = splashModeMono1;\\n  SplashColorPtr eightBitColor = NULL;\\n  SplashOutputDev *outA = new SplashOutputDev(colorMode, 4, gFalse, eightBitColor, gTrue, gTrue);\\n  PDFRectangle *box = new PDFRectangle();\\n  Dict *resDict = new Dict(doc->getXRef());\\n  Gfx *gfx = new Gfx(doc, outA, resDict, box, box);\\n\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1, 3);\\n\\n  Object args[5];\\n  for (int i = 0; i < numArgs; i++) {\\n    args[i].initNull();\\n  }\\n\\n  // Call the target function\\n  // gfx->opSetExtGState(args, numArgs); // This function is private and cannot be accessed directly\\n  // Instead, use a public function that internally calls opSetExtGState\\n  gfx->execOp(\"SetExtGState\", args, numArgs);\\n\\n  delete gfx;\\n  delete doc;\\n  delete box;\\n  delete resDict;\\n  delete outA;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"Stream.h\"\\n#include \"Catalog.h\"\\n#include \"Page.h\"\\n#include \"Gfx.h\"\\n#include \"XRef.h\"\\n#include \"GList.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n  FuzzedDataProvider fdp(data, size);\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1,10);\\n  std::vector<char> buf = fdp.ConsumeRemainingBytes<char>();\\n\\n  // configure globalParams \\n  GlobalParams* globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(gTrue);\\n\\n  // define objects\\n  Object obj;\\n  Object args[numArgs];\\n  for (int i=0; i<numArgs; i++)\\n    args[i].initNull();\\n\\n  // initialize stream and document\\n  PDFDoc* doc = new PDFDoc(new MemStream(buf.data(), 0, buf.size(), &obj));\\n\\n  // initialize gfx state\\n  GList* objList = new GList();\\n  for (int i=0; i<numArgs; i++)\\n    objList->append(&args[i]);\\n  \\n  // Create a PDFRectangle object\\n  PDFRectangle box;\\n  Gfx* gfx = new Gfx(doc, NULL, &box, &box, NULL, NULL);\\n\\n  // invoke test function\\n  gfx->display(&obj);\\n\\n  delete globalParams;\\n  delete doc;\\n  delete objList;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}