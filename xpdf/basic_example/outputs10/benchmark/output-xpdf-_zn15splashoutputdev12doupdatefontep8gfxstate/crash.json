{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  static bool globalParamsInitialized = false;\\n  if (!globalParamsInitialized) {\\n    globalParams = new GlobalParams(nullptr);\\n    globalParamsInitialized = true;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n  const std::vector<uint8_t> pdfData = fdp.ConsumeRemainingBytes<uint8_t>();\\n\\n  if (!pdfData.empty()) {\\n    GString *pdfString = new GString(reinterpret_cast<const char *>(pdfData.data()), pdfData.size());\\n    std::unique_ptr<PDFDoc> doc(new PDFDoc(pdfString));\\n\\n    if (doc && !doc->isEncrypted()) {\\n      SplashColor splashColorWhite;\\n      splashColorWhite[0] = splashColorWhite[1] = splashColorWhite[2] = 255;\\n      std::unique_ptr<SplashOutputDev> splashOutput(\\n          new SplashOutputDev(splashModeRGB8, 1, gFalse, splashColorWhite));\\n      splashOutput->startDoc(doc->getXRef());\\n      for (int pageNum = 1; pageNum <= doc->getNumPages(); pageNum++) {\\n        doc->displayPageSlice(splashOutput.get(), pageNum, 72.0, 72.0, 0, true,\\n                              false, false, 0, 0, -1, -1);\\n      }\\n\\n      GfxState* state = doc->getCatalog()->getPage(1)->createGfxState(1, 1, nullptr, 0, nullptr, nullptr);\\n      if(state) {\\n        splashOutput->updateFont(state);\\n        delete state;\\n      }\\n    }\\n  }\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <config.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Annot.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n\\n    // Consume data using FuzzedDataProvider.\\n    std::vector<char> pdfData(fdp.ConsumeRemainingBytes<char>());\\n    if (pdfData.empty()) {\\n        return 0;\\n    }\\n\\n    // Using consumed data to initialize Poppler's objects.\\n    Object obj;\\n    obj.initNull();\\n    MemStream memStream(pdfData.data(), 0, pdfData.size(), &obj);\\n    XRef xref(&memStream, gFalse); \\n    if (!xref.isOk() || !xref.getRootNum()) {\\n        return 0;\\n    }\\n\\n    auto splashOutputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, nullptr, gTrue);\\n    if (splashOutputDev != nullptr) {\\n        splashOutputDev->startDoc(&xref);\\n\\n        // Initialize state and call the required function.\\n        GfxState* state = new GfxState(72.0, 72.0, nullptr, 0, gFalse);\\n        if (state != nullptr) {\\n            splashOutputDev->updateFont(state); // Fixed line\\n            delete state;\\n        }\\n\\n        delete splashOutputDev;\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}