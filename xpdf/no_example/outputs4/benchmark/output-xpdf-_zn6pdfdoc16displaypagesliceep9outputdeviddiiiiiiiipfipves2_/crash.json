{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.71",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hx = fdp.ConsumeFloatingPoint<double>();\\n  double hy = fdp.ConsumeFloatingPoint<double>();\\n  double tx = fdp.ConsumeFloatingPoint<double>();\\n  double ty = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  Object info;\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    PDFDoc doc(stream);\\n    if (doc.isOk() == gTrue) {\\n      doc.getNumPages();\\n      doc.getOutline();\\n      doc.getStructTreeRoot();\\n      doc.getXRef();\\n      doc.okToPrint(gTrue);\\n      doc.okToCopy(gTrue);\\n      doc.okToChange(gTrue);\\n      doc.okToAddNotes(gTrue);\\n      \\n      // Page index range from 1 to doc.getNumPages();\\n      int pageIndex = fdp.ConsumeIntegralInRange<int>(1, doc.getNumPages());\\n\\n      // Assuming that pageSize.width and pageSize.height are integer less than the max slice dimension.\\n      int pageSizeWidth = abs(fdp.ConsumeIntegral<int>());\\n      int pageSizeHeight = abs(fdp.ConsumeIntegral<int>());\\n\\n      if (sliceW > pageSizeWidth) {\\n        sliceW = pageSizeWidth;\\n      }\\n      if (sliceH > pageSizeHeight) {\\n        sliceH = pageSizeHeight;\\n      }\\n\\n      // Ensure that sliceW and sliceH are within page width and height.\\n      if (sliceX > pageSizeWidth - sliceW) {\\n        sliceX = pageSizeWidth - sliceW;\\n      }\\n      if (sliceY > pageSizeHeight - sliceH) {\\n        sliceY = pageSizeHeight - sliceH;\\n      }\\n\\n      // Ensure that sliceX and sliceY are non-negative.\\n      sliceX = abs(sliceX);\\n      sliceY = abs(sliceY);\\n\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *outputDev = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      outputDev->startDoc(doc.getXRef());\\n      \\n      doc.displayPageSlice(outputDev, pageIndex, hx, hy, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n\\n      delete outputDev;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nGBool abortCheck(void *data) {\\n  return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Initialize all the variables\\n  GString *fileNameA = new GString(\"test.pdf\");\\n  PDFDoc *doc = new PDFDoc(fileNameA);\\n  SplashColorMode colorModeA = splashModeRGB8;\\n  int bitmapRowPadA = 4;\\n  GBool reverseVideoA = gFalse;\\n  SplashColorPtr paperColorA = nullptr;\\n\\n  // Initialize GlobalParams\\n  const char *cfgFileName = \"xpdfrc\";\\n  globalParams = new GlobalParams(cfgFileName);\\n\\n  SplashOutputDev *splashOut = new SplashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA);\\n\\n  int pageNo = 1;\\n  double hDPI = 72.0;\\n  double vDPI = 72.0;\\n  int rotate = 0;\\n  GBool useMediaBox = gTrue;\\n  GBool crop = gTrue;\\n  GBool printing = gFalse;\\n  int sliceX = 0;\\n  int sliceY = 0;\\n  int sliceW = 100;\\n  int sliceH = 100;\\n  void *region = nullptr;\\n\\n  // Now calling the function-under-test\\n  doc->displayPageSlice(splashOut, pageNo, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheck, region);\\n\\n  // Clean up\\n  delete doc;\\n  delete splashOut;\\n  delete fileNameA;\\n  delete globalParams;\\n\\n  return 0;  \\n}",
        "model": ""
    }

    ]
}