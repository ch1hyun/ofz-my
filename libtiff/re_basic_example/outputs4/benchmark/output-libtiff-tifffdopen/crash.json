{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.83",
        "coverage_diff": "0.003160034619487551",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string>\\n#include <vector>\\n#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Create a temporary file\\n  FILE *fp = tmpfile();\\n  if (fp == nullptr) {\\n    return 0;\\n  }\\n\\n  // We will split the data into two parts. The first part is written to the file, \\n  // the second part is used to create the 'mode' string for TIFFFdOpen.\\n  const auto first_part_size = stream.ConsumeIntegralInRange<int>(0, size);\\n  std::vector<uint8_t> first_part = stream.ConsumeBytes<uint8_t>(first_part_size);\\n  \\n  if (!first_part.empty()) {\\n    // Write the data into file\\n    fwrite(first_part.data(), first_part.size(), 1, fp);\\n  }\\n  \\n  // Create the file mode string. We limit its length to prevent excessively long strings.\\n  std::string mode = stream.ConsumeBytesAsString(10);\\n\\n  // Use the file descriptor to open the TIFF file\\n  int fd = fileno(fp);\\n  TIFF* tiff = TIFFFdOpen(fd, \"sample.tiff\", mode.c_str());\\n  \\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n\\n  // Close the temporary file\\n  fclose(fp);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.003139907010446229",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdio>\\n#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 5){\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  const std::string modes = stream.ConsumeBytesAsString(3);\\n  const std::string data_to_write = stream.ConsumeRemainingBytesAsString();\\n\\n  // Writing data to file from the fuzzer\\n  FILE* file = tmpfile();\\n  fwrite(data_to_write.data(), 1, data_to_write.size(), file);\\n  fflush(file);\\n  int fd = fileno(file);\\n\\n  // Opening the file with TIFFFdOpen\\n  TIFF *out = TIFFFdOpen(fd, \"memory\", modes.c_str());\\n\\n  if (out) {\\n    TIFFClose(out);\\n  }\\n\\n  // Close the file\\n  fclose(file);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}