{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.44",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\n// List of http_errno values based on enum in http_parser.h.\\nstatic http_errno http_errnos[] = {\\n    HPE_OK,           HPE_CB_message_begin,  HPE_CB_url,\\n    HPE_CB_header_field, HPE_CB_header_value, HPE_CB_headers_complete,\\n    HPE_CB_body,      HPE_CB_message_complete, HPE_CB_chunk_header,\\n    HPE_CB_chunk_complete, HPE_INVALID_EOF_STATE, HPE_HEADER_OVERFLOW,\\n    HPE_CLOSED_CONNECTION, HPE_INVALID_VERSION,  HPE_INVALID_STATUS,\\n    HPE_INVALID_METHOD,   HPE_INVALID_URL,       HPE_INVALID_HOST,\\n    HPE_INVALID_PORT,     HPE_INVALID_PATH,      HPE_INVALID_QUERY_STRING,\\n    HPE_INVALID_FRAGMENT, HPE_LF_EXPECTED,       HPE_INVALID_HEADER_TOKEN,\\n    HPE_INVALID_CONTENT_LENGTH,  HPE_UNEXPECTED_CONTENT_LENGTH,\\n    HPE_INVALID_CHUNK_SIZE,      HPE_INVALID_CONSTANT,\\n    HPE_INVALID_INTERNAL_STATE,  HPE_STRICT,                  HPE_PAUSED,\\n    HPE_UNKNOWN};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0)\\n    return 0;\\n\\n  http_errno err = http_errnos[data[0] % (sizeof(http_errnos) / sizeof(http_errno))];\\n\\n  const char *error_name = http_errno_name(err);\\n\\n  return 0;\\n} ",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Allocate and initialize an http_errno variable with some initial value\\n  enum http_errno error = HPE_OK;\\n\\n  // Cast the data pointer to an http_errno pointer\\n  // (size checks before this step need to ensure size is >= sizeof(enum http_errno))\\n  if (size < sizeof(enum http_errno))\\n    return 0;\\n\\n  error = *(enum http_errno*)data;\\n  // Check if the error value is within the valid range\\n  if (error < 0 || error >= _HTTP_ERRNO_H) {\\n    return 0;\\n  }\\n  // Call the target function\\n  const char * name = http_errno_name(error);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}