{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.61",
        "coverage_diff": "0.0002645693532481901",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  // Extracting parameters for PDFDoc::displayPages\\n  int firstPage = fdp.ConsumeIntegral<int>();\\n  int lastPage = fdp.ConsumeIntegral<int>();\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  // PDFDoc::displayPages usage\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(str, NULL, NULL, NULL);\\n    if (doc->isOk()) {\\n      doc->displayPages(NULL, firstPage, lastPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL, NULL);\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete doc;\\n  delete globalParams;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.05",
        "coverage_diff": "0.000240517593861991",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"config.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int))\\n    return 0;\\n\\n  FuzzedDataProvider fdp(data, size);\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n\\n  std::vector<char> buf = fdp.ConsumeRemainingBytes<char>();\\n\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n  globalParams->setupBaseFonts(\"/usr/share/ghostscript/9.25/Resource/cidfmap\");\\n\\n  if (buf.size() == 0) {\\n    delete globalParams;\\n    return 0;\\n  }\\n\\n  MemStream *str = new MemStream(buf.data(), 0, buf.size(), NULL);\\n  PDFDoc *pdf_doc = new PDFDoc(str, NULL, NULL, NULL);\\n  \\n  if (pdf_doc->isOk()) {\\n    pdf_doc->displayPages(NULL, 1, 1, hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL, NULL);\\n  }\\n\\n  delete pdf_doc;\\n  delete globalParams;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}