{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.25",
        "coverage_diff": "2.707312450929962e-05",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <memory>\\n\\n#include \"libraw_types.h\"\\n#include \"libraw.h\"\\n\\n// Create a derived class from LibRaw\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  int MyCrxDecodePlane(void *buffer, uint32_t planeSize) {\\n    return crxDecodePlane(buffer, planeSize);\\n  }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create our decoder\\n  MyLibRaw *RawProcessor = new MyLibRaw();\\n\\n  // Get our plane size\\n  uint32_t planeSize = stream.ConsumeIntegral<uint32_t>();\\n\\n  // Get a buffer to decode into\\n  libraw_decoder_info_t decoder_info;\\n  RawProcessor->get_decoder_info(&decoder_info);\\n\\n  void* buffer;\\n  if (decoder_info.decoder_flags & LIBRAW_DECODER_FLATDATA)\\n    buffer = RawProcessor->imgdata.rawdata.raw_image;\\n  else\\n    buffer = nullptr;\\n\\n  // Call our decode function\\n  int ret;\\n  if (buffer != nullptr)\\n    ret = RawProcessor->unpack();\\n\\n  // Call the target function\\n  if (buffer != nullptr && planeSize > 0)\\n    ret = RawProcessor->MyCrxDecodePlane(buffer, planeSize);\\n\\n  delete RawProcessor;\\n\\n  return ret;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.03",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  int callCrxDecodePlane(void *p, uint32_t s) {\\n    if (p == nullptr || s == 0) {\\n      return -1;\\n    }\\n    return crxDecodePlane(p, s);\\n  }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  const uint32_t planeSize = stream.ConsumeIntegral<uint32_t>();\\n  if (planeSize == 0 || planeSize > size) {\\n    return 0;\\n  }\\n  std::vector<uint8_t> plane_data = stream.ConsumeBytes<uint8_t>(planeSize);\\n  void *plane_ptr = plane_data.data();\\n\\n  if (plane_ptr == nullptr) {\\n    return 0;\\n  }\\n\\n  MyLibRaw rawProcessor;\\n  rawProcessor.callCrxDecodePlane(plane_ptr, planeSize);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}