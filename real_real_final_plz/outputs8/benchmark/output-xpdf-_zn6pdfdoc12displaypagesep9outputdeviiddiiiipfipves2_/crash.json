{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "DRIVER",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n\\n// Include the necessary header file for GBool\\n#include \"gmem.h\"\\n\\n// Define the dummyAbortCheck function outside of the LLVMFuzzerTestOneInput function\\nGBool dummyAbortCheck(void* data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages function\\n    OutputDev* outputDev = nullptr;\\n    int pageFirst = stream.ConsumeIntegral<int>();\\n    int pageLast = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n\\n    // Create an instance of PDFDoc with a dummy file name\\n    GString dummyFileName = \"dummy.pdf\";\\n    PDFDoc pdfDoc(&dummyFileName);\\n\\n    // Call the function-under-test using the instance\\n    pdfDoc.displayPages(outputDev, pageFirst, pageLast, scaleX, scaleY, rotation, useMediaBox, crop, printing, dummyAbortCheck, nullptr);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/goo/GString.h\" // Include GString.h to resolve GooString issue\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include PDFDoc.h after GString.h\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(0x12345678); // Example address, not NULL\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n\\n    // Create instances of GooString for the last two arguments\\n    GString fileName(\"dummy.pdf\"); // Changed GooString to GString\\n    GString ext(\"pdf\"); // Changed GooString to GString\\n\\n    // Call the function-under-test with object instance\\n    PDFDoc pdfDoc(&fileName, &ext);\\n    pdfDoc.displayPages(outputDev, page, numPages, scaleX, scaleY, rotation, crop, printing, GBool(), nullptr, nullptr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}