{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "8.56",
        "coverage_diff": "0.006581728156512288",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"tiffio.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <fstream>\\n#include <fcntl.h> // Include for O_RDWR, O_CREAT\\n#include <unistd.h> // Include for close, S_IRUSR, S_IWUSR\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 5) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  \\n  std::string mode = stream.PickValueInArray({\"r\", \"w\"});\\n  std::string name = stream.ConsumeRemainingBytesAsString();\\n\\n  // Create a temporary file with the fuzzed data\\n  std::ofstream temp(name.c_str(), std::ios::binary);\\n  temp.write(reinterpret_cast<const char*>(data), size);\\n  temp.close();\\n\\n  int fd = open(name.c_str(), O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);\\n  if (fd < 0) {\\n    return 0;\\n  }\\n\\n  TIFF *tif = TIFFFdOpen(fd, name.c_str(), mode.c_str());\\n  if (tif) {\\n    TIFFClose(tif);\\n  }\\n  \\n  close(fd);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.85",
        "coverage_diff": "0.002354930257834672",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <sys/types.h>\\n#include <sys/stat.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  int tmp_fd = open(\"tmp.tif\", O_RDWR|O_CREAT, 0777);\\n  if (tmp_fd < 0) {\\n    return 0;\\n  }\\n\\n  std::string mode_str = provider.ConsumeBytesAsString(1);\\n  const char *mode = mode_str.c_str();\\n\\n  size_t remaining_bytes_size;\\n  unsigned char* remaining_bytes = (unsigned char*)malloc(size);\\n  remaining_bytes_size = provider.ConsumeData(remaining_bytes, size);\\n  \\n  if(write(tmp_fd, remaining_bytes, remaining_bytes_size) != (ssize_t)remaining_bytes_size) {\\n    close(tmp_fd);\\n    free(remaining_bytes);\\n    return 0;\\n  }\\n\\n  TIFF* tif = TIFFFdOpen(tmp_fd, \"tmp.tif\", mode);\\n  if (!tif) {\\n    close(tmp_fd);\\n    free(remaining_bytes);\\n    return 0;\\n  }\\n\\n  TIFFClose(tif);\\n  close(tmp_fd);\\n  free(remaining_bytes);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}