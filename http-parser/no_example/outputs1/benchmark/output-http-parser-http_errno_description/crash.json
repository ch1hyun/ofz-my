{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (!size)\\n    return 0;\\n\\n  enum http_errno err;\\n  if (data[0] < 0 || data[0] >= _HTTP_ERRNO_MAX) {\\n    return 0;\\n  }\\n  err = data[0];\\n  const char* description = http_errno_description(err);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.44",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Define HTTP_ERRNO_MAX\\n#define HTTP_ERRNO_MAX HPE_INVALID_EOF_STATE\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n  \\n  // Get enumerated value from the input data\\n  uint8_t enum_val = data[0] % (HTTP_ERRNO_MAX+1);\\n  \\n  // Call http_errno_description\\n  const char* error_description = http_errno_description((enum http_errno)enum_val);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}