{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.31",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n\\n#include \"libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    LibRaw LibRawProcessor;\\n    FuzzedDataProvider stream(data, size);\\n  \\n    auto bytes_sraw = stream.ConsumeRemainingBytes<unsigned char>();\\n    if (bytes_sraw.empty()) {\\n        return 0; \\n    }\\n    \\n    LibRawProcessor.open_buffer(bytes_sraw.data(), bytes_sraw.size());\\n\\n    LibRawProcessor.sraw_midpoint(); \\n\\n    LibRawProcessor.recycle();\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.81",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  LibRaw rawProcessor;\\n  rawProcessor.imgdata.params.use_camera_wb = 1;\\n  rawProcessor.imgdata.params.output_bps = 16;\\n  rawProcessor.imgdata.params.no_auto_bright = 1;\\n\\n  FuzzedDataProvider provider(data, size);\\n  auto remaining_bytes = provider.ConsumeRemainingBytes<uint8_t>();\\n  \\n  if (rawProcessor.open_buffer(remaining_bytes.data(), remaining_bytes.size()) != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n\\n  // Calls the function-under-test\\n  int ret = rawProcessor.sraw_midpoint();\\n\\n  rawProcessor.recycle();\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}