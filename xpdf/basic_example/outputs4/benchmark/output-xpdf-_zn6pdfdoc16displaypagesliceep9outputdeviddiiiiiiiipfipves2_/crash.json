{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"cstddef\"\\n#include \"inttypes.h\"\\n#include \"stdint.h\"\\n#include \"string.h\"\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 1) return 0;\\n  \\n  std::vector<unsigned char> pdf_doc_data(size + 1, '\\0');\\n  memcpy(pdf_doc_data.data(), data, size);\\n  pdf_doc_data.push_back('\\0');\\n\\n  // Setup the error output handler to never output anything\\n  globalParams = new GlobalParams(nullptr);\\n  globalParams->setErrQuiet(gTrue);\\n\\n  // Setup the input device\\n  Object pdf_doc;\\n  pdf_doc.initNull();\\n  MemStream stream(reinterpret_cast<char*>(pdf_doc_data.data()), 0, size, &pdf_doc);\\n\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  // Setup the output device\\n  SplashColor paper_color = {0xff, 0xff, 0xff};\\n  SplashOutputDev splash_output_dev(splashModeRGB8, 4, gFalse, paper_color);\\n    \\n  // Initiate the pdf doc\\n  PDFDoc* content_pdf_doc = new PDFDoc(&stream);\\n  if (!content_pdf_doc->isOk()) {\\n    delete globalParams;\\n    delete content_pdf_doc;\\n    return 0;\\n  }\\n  \\n  // Input variables of the displayPageSlice function\\n  int pg = fdp.ConsumeIntegralInRange<int>(1, content_pdf_doc->getNumPages());\\n  double h_dpi = fdp.ConsumeFloatingPoint<double>();\\n  double v_dpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n  \\n  // Display the page slice\\n  content_pdf_doc->displayPageSlice(&splash_output_dev, pg, h_dpi, v_dpi, rotate, \\n                     useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH,\\n                     nullptr, nullptr);\\n  \\n  delete globalParams;\\n  delete content_pdf_doc;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.89",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <cstdlib>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  // Create a synthetic Page using the payload data.\\n  Object obj;\\n  obj.initNull();\\n  BaseStream *stream = new MemStream(static_cast<char *>(payload.data()), 0, payload.size(), &obj);\\n\\n  // Initialize globalParams.\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // yes, it's a string and not a bool\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    // initialize PDFDoc from the stream\\n    PDFDoc doc(stream);\\n    if (doc.isOk() == gTrue) {\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      splashOut->setNoComposite(gFalse);\\n      splashOut->startDoc(doc.getXRef());\\n      int pageNum = 1; // Display the first page.\\n      doc.displayPageSlice(splashOut, pageNum, hdpi, vdpi, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n      delete splashOut;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}