{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"CharTypes.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"config.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  GBool invisible = fdp.ConsumeBool();\\n  GBool freeData = fdp.ConsumeBool();\\n  GBool adjustXY = fdp.ConsumeBool();\\n  auto bytes = fdp.ConsumeBytes<unsigned char>(nBytes);\\n  Unicode *u = reinterpret_cast<Unicode*>(bytes.data());\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream((char *)data, 0, size, &obj);\\n\\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL, NULL);\\n  PDFRectangle mediaBox(0, 0, 612, 792);\\n\\n  int rotate = 0;\\n  int pageNum = 1;\\n\\n  GfxState *state = new GfxState(72, 72, &mediaBox, rotate, gFalse);\\n  SplashColor paperColor = { 255, 255, 255 }; // white\\n\\n  // Initialize GlobalParams object before using it\\n  const char *cfgFileName = \"\"; // Added this line to fix the error\\n  GlobalParams *globalParams = new GlobalParams(cfgFileName); // Changed this line to fix the error\\n  \\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor, gTrue, gTrue);\\n\\n  splashOut->startDoc(doc->getXRef());\\n  splashOut->startPage(pageNum, state);\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, nBytes, invisible, freeData, adjustXY);\\n\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete globalParams; // Don't forget to delete the GlobalParams object\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode *u = nullptr;\\n  int uLen = fdp.ConsumeIntegralInRange<int>(0, 10); //arbitrary upper bound\\n  if(uLen)\\n    u = new Unicode[uLen];\\n  GBool abort = fdp.ConsumeBool();\\n  GBool isImage = fdp.ConsumeBool();\\n  GBool isDivGlyph = fdp.ConsumeBool();\\n\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), NULL, NULL, NULL);\\n  int rotate = 0; // no rotation\\n  PDFRectangle *mediaBox = new PDFRectangle(0, 0, 10, 10);\\n  bool upsideDown = true;\\n  \\n  GfxState *state = new GfxState(72.0, 72.0, mediaBox, rotate, upsideDown);\\n  \\n  SplashColor splashColor;\\n  splashColor[0] = splashColor[1] = splashColor[2] = 255; // white color\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, splashColor);\\n  \\n  if(splashOut){\\n      splashOut->startDoc(doc->getXRef());\\n      if(splashOut->needNonText()){\\n          splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, abort, isImage, isDivGlyph);\\n      }\\n  }\\n\\n  delete splashOut;\\n  delete state;\\n  delete mediaBox;\\n  delete doc;\\n  if(uLen)\\n    delete[] u;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}