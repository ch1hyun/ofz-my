{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <vector>\\n\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GlobalParams.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  int page = fdp.ConsumeIntegral<int>();\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n\\n  SplashColor paperColor;\\n  for (Guchar &comp : paperColor)\\n    comp = 0xff;\\n\\n  // Initialize global parameters\\n  static std::unique_ptr<GlobalParams> globalParams = std::make_unique<GlobalParams>(\"\");\\n\\n  SplashOutputDev splashOut(splashModeRGB8, 1, gFalse, paperColor);\\n  \\n  std::vector<char> text = fdp.ConsumeRemainingBytes<char>();\\n  if (text.empty()) {\\n    return 0;\\n  }\\n  text.push_back('\\0');\\n  Object obj; \\n  PDFDoc doc(new MemStream(text.data(), 0, text.size(), &obj));\\n\\n  if (doc.isOk()) {\\n    splashOut.startDoc(doc.getXRef());\\n    doc.displayPageSlice(&splashOut, page, hDPI, vDPI, rotate, useMediaBox, crop,\\n                         printing, sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.48",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <config.h>\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nGBool callback(void *data) {\\n  return gTrue;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  // Utilities for fuzzing\\n  FuzzedDataProvider fdp(data, size);\\n  auto hdpi = fdp.ConsumeFloatingPoint<double>();\\n  auto vdpi = fdp.ConsumeFloatingPoint<double>();\\n  auto rotate = fdp.ConsumeIntegral<int>();\\n  auto useMediaBox = fdp.ConsumeBool();\\n  auto crop = fdp.ConsumeBool();\\n  auto printing = fdp.ConsumeBool();\\n  auto sliceX = fdp.ConsumeIntegral<int>();\\n  auto sliceY = fdp.ConsumeIntegral<int>();\\n  auto sliceW = fdp.ConsumeIntegral<int>();\\n  auto sliceH = fdp.ConsumeIntegral<int>();\\n  std::vector<uint8_t> payload = fdp.ConsumeRemainingBytes<uint8_t>();\\n\\n  // Initialization\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(reinterpret_cast<char*>(payload.data()), 0, payload.size(), &xpdf_obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    PDFDoc doc(stream);\\n    if (!doc.isOk()) {\\n      delete globalParams;\\n      return 0;\\n    }\\n    OutputDev *output_dev = nullptr;\\n    doc.displayPageSlice(output_dev, 1, hdpi, vdpi, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, callback, nullptr);\\n  } catch (...) {\\n    delete globalParams;\\n    return 0;\\n  }\\n\\n  delete globalParams;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}