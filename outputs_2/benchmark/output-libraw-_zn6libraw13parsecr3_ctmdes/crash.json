{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  short s = stream.ConsumeIntegral<short>();\\n\\n  LibRaw  libRaw;\\n  LibRaw_abstract_datastream *ds = libRaw.make_mem_datastream(&s, size);\\n  libRaw.open_datastream(ds);\\n  \\n  // Call the function parseCR3_CTMD with the consumed short value\\n  // libRaw.parseCR3_CTMD(s); // This function does not exist in LibRaw\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/libraw/libraw/libraw.h\"\\n#include \"/src/libraw/internal/libraw_internal_funcs.h\"\\n\\n// Function to be fuzzed\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size); \\n\\n    // generate the needed parameter for the parseCR3_CTMD function\\n    short ctmd_entry_count = stream.ConsumeIntegral<short>(); \\n\\n    // Initialize your object here\\n    LibRaw MyCoolRawProcessor;\\n    MyCoolRawProcessor.parseCR3_CTMD(ctmd_entry_count); \\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}