{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "26.47",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdint.h>\\n#include <stddef.h>\\n#include <vector>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nstruct CustomClass {\\n    int crxDecodePlane(void *, uint32_t) {\\n        // Provide the definition here\\n        // This is a dummy implementation, replace it with the actual one\\n        return 0;\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // create a vector of bytes for void*\\n  size_t dataSize = stream.ConsumeIntegralInRange<size_t>(1, size - 1);\\n  std::vector<uint8_t> input_data = stream.ConsumeBytes<uint8_t>(dataSize);\\n  if(input_data.empty()) return 0; // Ensure not empty\\n  void * void_input_data = static_cast<void *>(input_data.data());\\n  \\n  // get 4-byte int for uint32_t\\n  uint32_t int_input = stream.ConsumeIntegral<uint32_t>();\\n\\n  CustomClass obj;\\n  obj.crxDecodePlane(void_input_data, int_input);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nclass FuzzLibRaw : public LibRaw {\\npublic:\\n    int callCrxDecodePlane(void *arr, uint32_t planeNumber) {\\n        return crxDecodePlane(arr, planeNumber);\\n    }\\n};\\n\\nstatic FuzzLibRaw processor;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 4) {\\n        return 0;  // Not enough data for fuzzing\\n    }\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate an array with enough size\\n    uint8_t arr[4096]; // Increase the size of the array to prevent stack-buffer-overflow\\n    // Copy 4 bytes from the input data to the array\\n    memcpy(arr, stream.ConsumeBytes<uint8_t>(4).data(), 4);\\n    // Decode the plane\\n    int result = processor.callCrxDecodePlane(static_cast<void *>(arr), stream.ConsumeIntegral<uint32_t>());\\n  \\n    return 0;\\n}",
        "model": ""
    }

    ]
}