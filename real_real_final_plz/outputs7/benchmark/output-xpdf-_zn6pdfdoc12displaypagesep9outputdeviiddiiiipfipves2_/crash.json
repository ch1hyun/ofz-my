{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\n// Define the dummy abort check function outside the LLVMFuzzerTestOneInput function\\nGBool dummyAbortCheck(void* data) { return false; }\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    DummyOutputDev outputDev;\\n    int pageNum = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = static_cast<GBool>(stream.ConsumeBool());\\n    GBool crop = static_cast<GBool>(stream.ConsumeBool());\\n    GBool printing = static_cast<GBool>(stream.ConsumeBool());\\n    GBool abort = static_cast<GBool>(stream.ConsumeBool());\\n    void *abortData = nullptr;\\n\\n    // Call the function-under-test\\n    PDFDoc pdfDoc(nullptr, nullptr, nullptr, nullptr, dummyAbortCheck); // Use the constructor that accepts an abort check function\\n    pdfDoc.displayPages(&outputDev, pageNum, numPages, scaleX, scaleY, rotation, useMediaBox, crop, printing, abort, abortData);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Page.h\"\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\nclass DummyPDFDoc : public PDFDoc {\\npublic:\\n    DummyPDFDoc() : PDFDoc(nullptr, nullptr, nullptr) {} // Using the constructor with three nullptr arguments\\n};\\n\\nclass DummyPage : public Page {\\npublic:\\n    DummyPage() : Page(nullptr, 0) {}\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    DummyOutputDev outputDev; // Use the dummy OutputDev class\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool showTransition = stream.ConsumeBool();\\n    GBool showProgress = stream.ConsumeBool();\\n    GBool showControls = stream.ConsumeBool();\\n    void* abort = reinterpret_cast<void*>(0x87654321);\\n    void* customData = reinterpret_cast<void*>(0xabcdef01);\\n\\n    DummyPDFDoc pdfDoc; // Use the dummy PDFDoc class\\n    DummyPage pageObj; // Use the dummy Page class\\n\\n    pdfDoc.displayPages(&outputDev, page, numPages, scaleX, scaleY, rotation, showTransition, showProgress, showControls, nullptr, customData); // Passing nullptr instead of abort\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}