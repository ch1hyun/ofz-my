{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"  // Include the concrete implementation of OutputDev\\n#include \"GString.h\"  // Include the GString class\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"  // Include the Stream class\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  // Create necessary objects and variables with fuzzed data\\n  GString fileName(\"dummy.pdf\");  // Create a dummy file name\\n  PDFDoc doc(&fileName);  // Use the constructor that takes a GString pointer\\n  SplashColor paperColor;\\n  SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, paperColor);  // Use a concrete implementation of OutputDev\\n  int pg = fuzzed_data_provider.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data_provider.ConsumeBool();\\n  GBool crop = fuzzed_data_provider.ConsumeBool();\\n  GBool printing = fuzzed_data_provider.ConsumeBool();\\n  int sliceX = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int sliceY = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int sliceW = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int sliceH = fuzzed_data_provider.ConsumeIntegral<int>();\\n  \\n  // Define a function that matches the required type\\n  GBool abortCheckCbk(void *data) {\\n    return gFalse;\\n  }\\n\\n  // Call the target function\\n  doc.displayPageSlice(&splashOut, pg, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"MemStream.h\"\\n\\n// Create a subclass of OutputDev to implement the pure virtual methods\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gFalse; }\\n    GBool useDrawChar() override { return gTrue; }\\n    GBool interpretType3Chars() override { return gFalse; }\\n};\\n\\n// Create a callback function for abort check\\nGBool abortCheckCbk(void *data) {\\n    // Implement the function according to the needs of the fuzzing\\n    // For now, simply return gFalse\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  // Create a MemStream for the PDFDoc constructor\\n  MemStream *memStream = new MemStream((char *)data, 0, size, Object(objNull));\\n  PDFDoc doc(memStream);\\n  MyOutputDev outputDev;\\n  int pageNum = fuzzed_data.ConsumeIntegralInRange<int>(1, doc.getNumPages());\\n  double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data.ConsumeBool();\\n  GBool crop = fuzzed_data.ConsumeBool();\\n  GBool printing = fuzzed_data.ConsumeBool();\\n  int sliceX = fuzzed_data.ConsumeIntegral<int>();\\n  int sliceY = fuzzed_data.ConsumeIntegral<int>();\\n  int sliceW = fuzzed_data.ConsumeIntegral<int>();\\n  int sliceH = fuzzed_data.ConsumeIntegral<int>();\\n\\n  if (doc.isOk()) {\\n    doc.displayPageSlice(&outputDev, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}