{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GlobalParams.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(0x12345678); // Example address\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n    GBool (*abortCheck)(void*) = nullptr;\\n    GBool abortCheckCbk = 0; // Initialize to 0 instead of nullptr\\n\\n    // Create an instance of PDFDoc with a valid constructor argument\\n    GString fileName(\"example.pdf\"); // Example file name\\n    PDFDoc pdfDoc(&fileName);\\n\\n    GlobalParams *globalParams = new GlobalParams(\"xpdfrc\"); // Providing a valid configuration file name to the constructor\\n\\n    pdfDoc.displayPages(outputDev, page, numPages, scaleX, scaleY, rotation, crop, printing, false, abortCheck, &abortCheckCbk);\\n\\n    delete globalParams;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function-under-test\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n    void* abort = nullptr; // Initialize with nullptr\\n    void* abortCookie = nullptr; // Initialize with nullptr\\n\\n    // Call the function-under-test with initialized parameters\\n    GooString* fileName = new GooString(\"example.pdf\");\\n    PDFDoc pdfDoc(fileName); // Creating an instance of PDFDoc\\n    OutputDev* outputDev = new OutputDev(); // Assuming OutputDev has a default constructor\\n    pdfDoc.displayPages(outputDev, page, numPages, scaleX, scaleY, rotation, useMediaBox, crop, printing, nullptr, nullptr);\\n\\n    delete fileName;\\n    delete outputDev; // Clean up memory\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}