{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.88",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  // As http_errno_description takes an enum as parameter\\n  // we get values only from 0 to 29 which are the valid enums\\n  http_errno errNumber = (http_errno)(data[0] % (HPE_UNKNOWN + 1));\\n\\n  // Call our test function\\n  const char* errDescription = http_errno_description(errNumber);\\n\\n  // Use the output to increase code coverage\\n  if (errDescription != NULL && size > 1) {\\n    size_t len = strlen(errDescription);\\n    for (size_t i = 1; i < len && i < size; i++) {\\n      volatile char c = errDescription[i];\\n    }\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno))\\n    return 0;\\n\\n  enum http_errno enumeration_value;\\n  memcpy(&enumeration_value, data, sizeof(enum http_errno));\\n  \\n  // Ensure that enumeration_value is within the valid range of http_errno values\\n  if (enumeration_value < 0 || enumeration_value >= HTTP_ERRNO_MAX)\\n    return 0;\\n\\n  const char* description = http_errno_description(enumeration_value);\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}