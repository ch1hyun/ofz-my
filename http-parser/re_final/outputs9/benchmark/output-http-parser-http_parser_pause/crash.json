{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "28.96",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size == 0)\\n    return 0;\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n \\n  http_parser *parser = malloc(sizeof(http_parser));\\n  if(!parser) {\\n    return 0;\\n  }\\n  http_parser_init(parser, HTTP_BOTH);\\n \\n  size_t parsed = http_parser_execute(parser, &settings, (const char*)data, size);\\n\t\\n  if(size > 2 && parsed == size) {\\n    http_parser_pause(parser, ((data[0] % 2) == 0 ? 0 : 1));\\n  }\\n  free(parser);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "8.16",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// If these are not defined in the http_parser library, define them manually.\\n#ifndef s_start_req\\n#define s_start_req 0\\n#endif\\n\\n#ifndef s_start_res\\n#define s_start_res 1\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < 2) {\\n    return 0;\\n  }\\n  \\n  // Initialize a http_parser and its settings.\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n  \\n  // Execute the parser.\\n  http_parser_execute(&parser, &settings, (const char*)data, size);\\n  \\n  // Call the function-under-test: \"http_parser_pause\" with fuzzed parameter.\\n  int pause = data[0] % 2; // Limit the value to 0 or 1.\\n  \\n  // Ensure the parser is in a state where it can be paused\\n  if (parser.state == s_start_req || parser.state == s_start_res) {\\n    http_parser_pause(&parser, pause);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}