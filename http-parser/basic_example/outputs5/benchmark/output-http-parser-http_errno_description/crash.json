{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno)) {\\n    return 0;\\n  }\\n\\n  enum http_errno err;\\n  memcpy(&err, data, sizeof(err));\\n  if (err >= 0 && err < _HTTP_ERRNO_H) {\\n    const char *description = http_errno_description(err);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "28.29",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nhttp_parser_settings settings;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size == 0)\\n    {\\n        return 0;\\n    }\\n\\n    http_parser *parser = malloc(sizeof(http_parser));\\n    http_parser_init(parser, HTTP_REQUEST);\\n\\n    size_t parsed = http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n    // Call the function http_errno_description\\n    const char * error_description = http_errno_description(parser->http_errno);\\n\\n    free(parser);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}