{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.85",
        "coverage_diff": "0.005235098408626288",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider dataProvider(data, size);\\n\\n  double x = dataProvider.ConsumeFloatingPoint<double>();\\n  double y = dataProvider.ConsumeFloatingPoint<double>();\\n  double dx = dataProvider.ConsumeFloatingPoint<double>();\\n  double dy = dataProvider.ConsumeFloatingPoint<double>();\\n  double originX = dataProvider.ConsumeFloatingPoint<double>();\\n  double originY = dataProvider.ConsumeFloatingPoint<double>();\\n  CharCode code = dataProvider.ConsumeIntegral<CharCode>();\\n  Unicode u = dataProvider.ConsumeIntegralInRange<Unicode>(0, 0x10FFFF);\\n  int uLen = dataProvider.ConsumeIntegral<int>();\\n  GBool doubleWidth = dataProvider.ConsumeBool();\\n  GBool charIsRTL = dataProvider.ConsumeBool();\\n  GBool vert = dataProvider.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gTrue);\\n  \\n  SplashColor paperColor = {0xff, 0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor);\\n\\n  // Call the target function\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, uLen, &u, doubleWidth, charIsRTL, vert, gTrue);\\n\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.14",
        "coverage_diff": "0.010935182587084619",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double w = fdp.ConsumeFloatingPoint<double>();\\n  double h = fdp.ConsumeFloatingPoint<double>();\\n  double orgX = fdp.ConsumeFloatingPoint<double>();\\n  double orgY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int length = fdp.ConsumeIntegralInRange<int>(1, 50);\\n  Unicode unicode = fdp.ConsumeIntegralInRange<Unicode>(1, 30000);\\n  int n = fdp.ConsumeIntegralInRange<int>(1, 10000);\\n  GBool doubleWidth = fdp.ConsumeBool();\\n  GBool in_alpha = fdp.ConsumeBool();\\n  GBool char_is_space = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  int rotate = fdp.ConsumeIntegralInRange<int>(0, 360); // fix undeclared identifier 'rotate'\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor); // fix undeclared identifier 'splashModeXBGR8'\\n  splashOut->startDoc(doc->getXRef());\\n\\n  Unicode *u = new Unicode[1];\\n  u[0] = unicode;\\n\\n  splashOut->drawChar(state, dx, dy, w, h, orgX, orgY, code, n, u, n, doubleWidth, in_alpha, char_is_space);\\n\\n  delete[] u;\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}