{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n// Include the necessary libraries for the unknown types\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  // Create instance of PDFDoc\\n  GString fileNameA(\"fuzzed.pdf\");\\n  PDFDoc pdfDoc(&fileNameA);\\n\\n  // Extract data from fuzzed_data\\n  int page = fuzzed_data.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data.ConsumeBool();\\n  GBool crop = fuzzed_data.ConsumeBool();\\n  GBool printing = fuzzed_data.ConsumeBool();\\n  int sliceX = fuzzed_data.ConsumeIntegral<int>();\\n  int sliceY = fuzzed_data.ConsumeIntegral<int>();\\n  int sliceW = fuzzed_data.ConsumeIntegral<int>();\\n  int sliceH = fuzzed_data.ConsumeIntegral<int>();\\n  OutputDev *outputDev = nullptr; // Assuming we don't have an instance of OutputDev\\n\\n  // Remove the unknown type 'DW_TAG_subroutine_typeInfinite loop'\\n  // and replace it with a suitable type, such as int\\n  GBool (*infiniteLoop)(void *) = nullptr; \\n\\n  // Call the target function\\n  pdfDoc.displayPageSlice(outputDev, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, infiniteLoop, nullptr);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <fstream>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    virtual GBool upsideDown() { return gFalse; }\\n    virtual GBool useDrawChar() { return gTrue; }\\n    virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nGBool abortCheckCallback(void *data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Create a temporary file with the fuzzed data\\n    std::ofstream temp_file(\"fuzzed.pdf\");\\n    temp_file.write(reinterpret_cast<const char*>(data), size);\\n    temp_file.close();\\n\\n    GString fileName(\"fuzzed.pdf\");\\n    PDFDoc pdfDoc(&fileName);\\n    MyOutputDev outputDev;\\n    int pg = fuzzed_data_provider.ConsumeIntegral<int>();\\n    double hDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double vDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n    GBool useMediaBox = fuzzed_data_provider.ConsumeBool();\\n    GBool crop = fuzzed_data_provider.ConsumeBool();\\n    GBool printing = fuzzed_data_provider.ConsumeBool();\\n    int sliceX = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int sliceY = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int sliceW = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int sliceH = fuzzed_data_provider.ConsumeIntegral<int>();\\n    void* infiniteLoop = nullptr;\\n\\n    pdfDoc.displayPageSlice(&outputDev, pg, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCallback, infiniteLoop);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}