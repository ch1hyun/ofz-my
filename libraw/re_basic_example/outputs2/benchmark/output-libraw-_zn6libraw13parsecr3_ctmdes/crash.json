{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/libraw/libraw/libraw.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  LibRaw RawProcessor;\\n  auto buffer = stream.ConsumeBytes<uint8_t>(size);\\n\\n  // Call the function under test\\n  int error = RawProcessor.open_buffer(buffer.data(), buffer.size());\\n  \\n  // Memory Cleanup\\n  RawProcessor.recycle();\\n\\n  return 0; \\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n  short s = data[0] | (data[1] << 8);\\n  LibRaw RawProcessor;\\n  RawProcessor.parseCR3_CTMD(s);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}