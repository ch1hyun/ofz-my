{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <string.h>\\n#include \"http_parser.h\"\\n\\nextern const char * http_errno_description(enum http_errno);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno)) {\\n    return 0;\\n  }\\n\\n  // Copy data to avoid misaligned access\\n  enum http_errno err;\\n  memcpy(&err, data, sizeof(err));\\n\\n  // check if err is within the range of http_errno\\n  if (err >= 0 && err < HTTP_ERRNO_MAX) {\\n    // call function with fuzzed input\\n    (void)http_errno_description(err);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdlib.h>\\n#include <stdint.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n\\n  if (Size > 0) {\\n    uint8_t num = Data[Size - 1];\\n    enum http_errno err = (enum http_errno)(num % (_HTTP_ERRNO_MAX + 1));\\n    const char * res = http_errno_description(err);\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}