{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <iostream> // Include iostream for debugging purposes\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n// Include the necessary headers for the functions used in the fuzzing harness\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n\\n// Declare the private function from SplashOutputDev to be used in fuzzing\\nextern \"C\" {\\n    void LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n        FuzzedDataProvider stream(data, size);\\n\\n        // Create a dummy GfxState object to pass to the function-under-test\\n        GfxState *gfxState = new GfxState(1.0, 1.0, nullptr, 0, gFalse);\\n\\n        // Call the private function-under-test with the dummy GfxState object\\n        SplashOutputDev splashOutputDev(splashModeRGB8, 0, 0, 0); // Updated SplashOutputDev constructor arguments\\n        splashOutputDev.startDoc(nullptr); // Removed the second argument from startDoc call\\n        splashOutputDev.doUpdateFont(gfxState); // Accessing private function for fuzzing\\n\\n        // Clean up the dummy GfxState object\\n        delete gfxState;\\n    }\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"OutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n\\n// Include necessary headers to resolve build errors\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object to pass to the function-under-test\\n    GfxState gfxState(96, 96, nullptr, 0, gFalse);\\n\\n    // Call the function-under-test with the dummy GfxState object\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 96, 96, nullptr, 0, gFalse);\\n    splashOutputDev.startDoc(nullptr);\\n    splashOutputDev.endDoc();\\n    splashOutputDev.startPage(1, &gfxState);\\n    splashOutputDev.endPage();\\n    splashOutputDev.startDoc(nullptr);\\n    splashOutputDev.endDoc();\\n    splashOutputDev.startPage(1, &gfxState);\\n    splashOutputDev.endPage();\\n    splashOutputDev.tilingPatternFill(&gfxState, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0);\\n    splashOutputDev.drawImageMask(&gfxState, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0);\\n    splashOutputDev.drawImage(&gfxState, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0);\\n    splashOutputDev.drawMaskedImage(&gfxState, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0);\\n    splashOutputDev.drawSoftMaskedImage(&gfxState, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0, nullptr, nullptr, nullptr, 0, 0);\\n    splashOutputDev.opiBegin(&gfxState, nullptr);\\n    splashOutputDev.opiEnd(&gfxState, nullptr);\\n    splashOutputDev.drawForm(nullptr);\\n    splashOutputDev.beginTransparencyGroup(nullptr, nullptr, 0, 0, 0, 0, 0, 0, 0, 0, gFalse, gTrue, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,",
        "model": ""
    }

    ]
}