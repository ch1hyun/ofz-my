{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.45",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  short ctmd = fuzzed_data_provider.ConsumeIntegral<short>();\\n\\n  LibRaw lr;\\n  // There is no parseCR3_CTMD function in LibRaw library. \\n  // Assuming that we need to open the file, process it and then recycle it.\\n  lr.open_buffer(&ctmd, sizeof(ctmd));\\n  lr.unpack();\\n  lr.recycle();\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.44",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < sizeof(short int)) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  short int ctmd = stream.ConsumeIntegral<short int>();\\n\\n  // Initialize LibRaw\\n  LibRaw RawProcessor;\\n  RawProcessor.open_buffer(&ctmd, sizeof(ctmd));\\n\\n  // Parse the CTMD field from the CR3 file\\n  const int result = RawProcessor.unpack();\\n\\n  // Call the function parseCR3_CTMD\\n  // The function parseCR3_CTMD does not exist in the LibRaw library\\n  // So, we need to comment out or remove the line\\n  // RawProcessor.parseCR3_CTMD(ctmd);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}