{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.43",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  if (size > 0) {\\n    int pause_flag = data[0] % 2; // get 0 or 1 value\\n    http_parser_pause(&parser, pause_flag);\\n    http_parser_execute(&parser, NULL, (const char*)data, size); // Add this line\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.54",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  // Initialize http_parser\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // The second parameter of http_parser_pause is an int. If the size of the data is 0,\\n  // then we need to make sure we pass a valid int value. In other cases, we will use the first byte\\n  // of the data as the int parameter.\\n  int pause_flag = data[0] % 2; \\n\\n  // Fuzz http_parser_pause\\n  http_parser_pause(&parser, pause_flag);\\n\\n  // Fuzz http_parser_execute\\n  http_parser_execute(&parser, NULL, (const char *)data, size);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}