{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\n// Define a dummy callback function\\nGBool abortCheckCbk(void *data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    \\n    // Create some dummy variables to satisfy the argument list of displayPageSlice\\n    OutputDev *output_dev = nullptr;\\n    int page = 0;\\n    double hDPI = 72.0;\\n    double vDPI = 72.0;\\n    int rotate = 0;\\n    GBool useMediaBox = gFalse;\\n    GBool crop = gTrue;\\n    GBool printing = gFalse;\\n    int sliceX = -1;\\n    int sliceY = -1;\\n    int sliceW = -1;\\n    int sliceH = -1;\\n    void *loop = nullptr;\\n    void *sliceA = nullptr;\\n\\n    // Create a PDFDoc object\\n    GString *fileNameA = new GString(\"dummy.pdf\");\\n    PDFDoc doc(fileNameA);\\n\\n    // Call the target function\\n    doc.displayPageSlice(output_dev, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, sliceA);\\n\\n    delete fileNameA;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <fstream>\\n#include \"PDFDoc.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"PDFCore.h\"\\n#include \"OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gTrue; }\\n    GBool useDrawChar() override { return gTrue; }\\n    GBool interpretType3Chars() override { return gTrue; }\\n};\\n\\nGBool abortCheckCbk(void *data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    \\n    // Create a temporary file with the fuzzed data\\n    std::ofstream tempFile(\"fuzzed.pdf\", std::ios::binary);\\n    tempFile.write(reinterpret_cast<const char*>(data), size);\\n    tempFile.close();\\n    \\n    GString fileNameA(\"fuzzed.pdf\");\\n    PDFDoc pdfDoc(&fileNameA);\\n    MyOutputDev outputDev;\\n    int pg = 0;\\n    double hDPI = 72.0;\\n    double vDPI = 72.0;\\n    int rotate = 0;\\n    GBool useMediaBox = gFalse;\\n    GBool crop = gFalse;\\n    GBool printing = gFalse;\\n    int sliceX = -1;\\n    int sliceY = -1;\\n    int sliceW = -1;\\n    int sliceH = -1;\\n    void *abortCheckCbkData = NULL;\\n\\n    pdfDoc.displayPageSlice(&outputDev, pg, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, abortCheckCbkData);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}