{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n\\n#include \"PDFDoc.h\"\\n#include \"GString.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Create an instance of GString\\n    GString fileName((char*)Data, Size);\\n\\n    // Check if the file exists before creating the PDFDoc instance\\n    if (!fileName.cmp(\"\")) {\\n        return 0;\\n    }\\n\\n    // Create an instance of PDFDoc\\n    PDFDoc doc(&fileName, nullptr, nullptr);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashColorMode colorMode = splashModeRGB8;\\n    int bitmapRowPad = 4;\\n    GBool reverseVideo = gFalse;\\n    SplashColor paperColor;\\n    paperColor[0] = paperColor[1] = paperColor[2] = 0xff; // white\\n    SplashOutputDev outputDev(colorMode, bitmapRowPad, reverseVideo, paperColor, false, false);\\n\\n    // Check if the document is complete and not encrypted\\n    if (!doc.isOk() || doc.isEncrypted()) {\\n        return 0;\\n    }\\n\\n    // Call the function\\n    doc.displayPageSlice(&outputDev, 1, 1.0, 1.0, 0, true, true, true, 0, 0, 0, 0, nullptr, nullptr);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <cstddef>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  virtual GBool upsideDown() { return gFalse; }\\n  virtual GBool useDrawChar() { return gTrue; }\\n  virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  // Initialize necessary parameters for PDFDoc::displayPageSlice\\n  GString fileName(\"fuzzing.pdf\");\\n  PDFDoc pdfDoc(&fileName);\\n  MyOutputDev outputDev;\\n  int pageNum = 1;\\n  double hDPI = 72.0;\\n  double vDPI = 72.0;\\n  int rotate = 0;\\n  bool useMediaBox = false;\\n  bool crop = true;\\n  bool printing = false;\\n  bool selection = false;\\n  int sliceX = 0;\\n  int sliceY = 0;\\n  int sliceW = 100;\\n  int sliceH = 100;\\n  void (*abortCheckCbk)(void *data) = nullptr;\\n  void *abortCheckCbkData = nullptr;\\n\\n  // Call PDFDoc::displayPageSlice\\n  pdfDoc.displayPageSlice(&outputDev, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, selection, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, abortCheckCbkData);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}