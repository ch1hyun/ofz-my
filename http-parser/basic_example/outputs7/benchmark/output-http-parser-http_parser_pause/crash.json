{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "21.19",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n    http_parser *parser = (http_parser*)malloc(sizeof(http_parser));\\n    if (parser == NULL) {\\n        return 0;\\n    }\\n    http_parser_init(parser, HTTP_BOTH);\\n    int pause = data[size-1] % 2;\\n    http_parser_pause(parser, pause);\\n\\n    // Create a settings object and initialize it to zero\\n    http_parser_settings settings;\\n    memset(&settings, 0, sizeof(settings));\\n\\n    // Feed the data to the parser\\n    http_parser_execute(parser, &settings, (const char*)data, size);\\n\\n    free(parser);\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.99",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  http_parser parser;\\n\\n  // Initialize the parser\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Get an integer from the fuzzed data to serve as the pause parameter.\\n  int pause = fuzzed_data.ConsumeIntegral<int>();\\n\\n  // Call the target function\\n  http_parser_pause(&parser, pause);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}