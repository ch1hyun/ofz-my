{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"XRef.h\"\\n#include \"Dict.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 4) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n\\n  Gfx *gfx = NULL;\\n  Object *args = new Object[2];\\n\\n  // An object can take any of these 8 data types\\n  const int kObjectTypes = 8;\\n  int arg_1_type = fdp.ConsumeIntegralInRange<uint8_t>(1, kObjectTypes);\\n  int arg_2_type = fdp.ConsumeIntegralInRange<uint8_t>(1, kObjectTypes);\\n  \\n  switch(arg_1_type){\\n    case 1:\\n      args[0].initBool(fdp.ConsumeBool());\\n      break;\\n    case 2:\\n      args[0].initInt(fdp.ConsumeIntegral<int>());\\n      break;\\n    case 3:\\n      args[0].initReal(fdp.ConsumeFloatingPoint<double>());\\n      break;\\n    case 4:\\n      args[0].initString(new GString(fdp.ConsumeRandomLengthString().c_str()));\\n      break;\\n    case 5:\\n      args[0].initName(fdp.ConsumeRandomLengthString().c_str());\\n      break;\\n    case 6:\\n      args[0].initNull();\\n      break;\\n    case 7:\\n      args[0].initArray(NULL);\\n      break;\\n    case 8:\\n      args[0].initDict(new Dict(NULL));\\n      break;\\n    default:\\n      args[0].initNull();\\n  }\\n  \\n  switch(arg_2_type){\\n    case 1:\\n      args[1].initBool(fdp.ConsumeBool());\\n      break;\\n    case 2:\\n      args[1].initInt(fdp.ConsumeIntegral<int>());\\n      break;\\n    case 3:\\n      args[1].initReal(fdp.ConsumeFloatingPoint<double>());\\n      break;\\n    case 4:\\n      args[1].initString(new GString(fdp.ConsumeRandomLengthString().c_str()));\\n      break;\\n    case 5:\\n      args[1].initName(fdp.ConsumeRandomLengthString().c_str());\\n      break;\\n    case 6:\\n      args[1].initNull();\\n      break;\\n    case 7:\\n      args[1].initArray(NULL);\\n      break;\\n    case 8:\\n      args[1].initDict(new Dict(NULL));\\n      break;\\n    default:\\n      args[1].initNull();\\n  }\\n\\n  // Call the target function\\n  // gfx->opSetExtGState(args, 2); // This function is private, hence cannot be used here.\\n\\n  delete[] args;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "Without the original code, it's impossible to provide a solution. Can you please provide the original code?",
        "model": ""
    }

    ]
}