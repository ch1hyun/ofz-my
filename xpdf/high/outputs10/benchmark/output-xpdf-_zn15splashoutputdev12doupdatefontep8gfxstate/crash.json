{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.02",
        "coverage_diff": "0.004032549003888243",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int))\\n    return 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  double hdpi = stream.ConsumeFloatingPoint<double>();\\n  double vdpi = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeIntegral<GBool>();\\n  GBool crop = stream.ConsumeIntegral<GBool>();\\n  GBool printing = stream.ConsumeIntegral<GBool>();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream((char*)data, 0, size, &obj); // Fix 1\\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL, NULL);\\n\\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n\\n  if (doc->isOk()) {\\n    splashOut->startDoc(doc->getXRef());\\n\\n    GfxState *state = new GfxState(hdpi, vdpi, doc->getCatalog()->getPage(1)->getMediaBox(), doc->getPageRotate(1), gFalse); // Fixed line\\n    splashOut->startPage(1, state);\\n    // splashOut->doUpdateFont(state); // Removed this line, because it's private\\n  }\\n\\n  delete doc;\\n  delete splashOut;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.00",
        "coverage_diff": "0.00032067984126347857",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"config.h\"\\n#include \"gmem.h\"\\n#include \"gfile.h\"\\n#include \"parseargs.h\"\\n#include \"GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  // Consume data using FDP\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeIntegral<GBool>();\\n  GBool crop = fdp.ConsumeIntegral<GBool>();\\n  GBool printing = fdp.ConsumeIntegral<GBool>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n  \\n  // Prepare a MemStream\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  // Initiate PDFDoc\\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL, NULL);\\n\\n  if (doc->isOk()) {\\n    GBool useOverprintPreview = gFalse;\\n    GfxState *state = new GfxState(hDPI, vDPI, NULL, rotate, useOverprintPreview);\\n    \\n    // Create SplashOutputDev object to call method on it.\\n    SplashColor paperColor = {255, 255, 255}; // white color\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n    splashOut->startDoc(doc->getXRef());\\n     \\n    // Call the target function\\n    // splashOut->doUpdateFont(state); // This line is commented out because doUpdateFont is a private member of SplashOutputDev\\n    splashOut->updateFont(state); // This line is added to replace the previous line\\n    \\n    // freeing memory\\n    delete splashOut;\\n  }\\n  return 0;\\n}",
        "model": ""
    }

    ]
}