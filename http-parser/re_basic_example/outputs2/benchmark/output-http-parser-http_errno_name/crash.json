{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include \"/src/http-parser/http_parser.h\"\\n\\n#define HTTP_ERRNO_COUNT (sizeof(http_errno_name)/sizeof(*http_errno_name))\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  // Assume that our enumeration type has maximum HTTP_ERRNO_COUNT entries\\n  enum http_errno httpError = (enum http_errno)(data[0] % HTTP_ERRNO_COUNT);\\n\\n  // Use our fuzzed data to call the function-under-test\\n  const char* error_name = http_errno_name(httpError);\\n\\n  // Use the result to ensure it's not optimized out\\n  if (error_name != NULL) {\\n    return 0;\\n  } else {\\n    return 1;\\n  }\\n}\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size);\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  uint8_t first_byte = data[0];\\n\\n  // Using first_byte to get a value in the http_errno range (0-63).\\n  enum http_errno errno_val = (enum http_errno)(first_byte % 64); // Replace HTTP_ERRNO_MAX with 64\\n\\n  // Calls the function-under-test\\n  const char* errno_name = http_errno_name(errno_val);\\n  \\n  // Avoid unused variable warning\\n  (void)errno_name;\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}