{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < sizeof(int)) {\\n    return 0;\\n  }\\n  \\n  int http_status = *(int *)data;\\n  if(http_status >= 100 && http_status <= 599) {\\n    const char *http_status_string = http_status_str((enum http_status)http_status);\\n  }\\n  \\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n#include <stdlib.h>\\n\\nextern const char * http_status_str(enum http_status);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int))\\n    return 0;\\n  \\n  enum http_status status = *(enum http_status*)data;\\n\\n  // Enum validation before using it as function parameter \\n  // http_status is enum varying from 100(HTTP_CONTINUE) to 599(HTTP_TOO_EXCLUSIVE).\\n  if(status < 100 || status > 599)\\n    return 0;\\n\\n  http_status_str(status);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}