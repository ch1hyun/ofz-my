{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <cstdlib>\\n#include <vector>\\n\\n#include \"PDFDoc.h\"\\n#include \"XRef.h\"\\n#include \"CharTypes.h\"\\n#include \"Dict.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  std::vector<uint8_t> includedBytes = stream.ConsumeBytes<uint8_t>(size);\\n  Object extGState;\\n  Dict* dataDict = new Dict(new XRef(nullptr, false));\\n  for (size_t i = 0; i < size; ++i) {\\n    std::string key = std::to_string(i);\\n    Object* value = new Object();\\n    value->initInt(includedBytes[i]);\\n    dataDict->add(const_cast<char*>(key.c_str()), value);\\n  }\\n  extGState.initDict(dataDict);\\n\\n  int nArgs = (stream.remaining_bytes() == 0) ? 0 : stream.ConsumeIntegralInRange<int>(0, size);\\n  PDFDoc pdfDoc((char *)\"\");\\n  Gfx* gfx = new Gfx(&pdfDoc, nullptr, 0, dataDict, new PDFRectangle(), new PDFRectangle(), nullptr, nullptr);\\n  \\n  Object args[2];\\n  args[0].initName(\"GS\");\\n  args[1] = extGState;\\n  gfx->opSetExtGState(args, nArgs);\\n  \\n  extGState.free();\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  auto obj = new Object();\\n\\n  GString fileName(stream.ConsumeRandomLengthString().c_str());\\n  PDFDoc *doc = new PDFDoc(&fileName);\\n\\n  const int size_arg = stream.remaining_bytes();\\n\\n  if (doc->isOk()) {\\n    Gfx *gfx = new Gfx(doc->getXRef(), doc->getCatalog()->getOutputDev(), doc->getCatalog()->getPage(1)->getResourceDict(), NULL, NULL, NULL, NULL, NULL, gFalse, gFalse);\\n    gfx->display(obj, size_arg);\\n    delete gfx;\\n  }\\n\\n  delete doc;\\n  delete obj;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}