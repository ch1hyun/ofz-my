{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\" // Include Gfx.h to resolve Gfx type\\n#include \"SplashOutputDev.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n#include \"GfxState.h\"\\n\\n// Declare a public constructor for GfxState to be able to create instances in the fuzzing function\\nclass PublicGfxState : public GfxState {\\npublic:\\n    PublicGfxState(GfxState *state, GBool copyPath) : GfxState(state, copyPath) {}\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    PublicGfxState gfxState(nullptr, false); // Using the public constructor\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *u = nullptr;\\n    int uLen = stream.ConsumeIntegral<int>();\\n    GBool fill = stream.ConsumeBool();\\n    GBool stroke = stream.ConsumeBool();\\n    GBool clip = stream.ConsumeBool();\\n\\n    // Call the drawChar function\\n    SplashOutputDev::drawChar(nullptr, &gfxState, x, y, dx, dy, ox, oy, code, nBytes, u, uLen, fill, stroke, clip);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Object.h\" // Include Object.h for Object type\\n#include \"Dict.h\" // Include Dict.h for Dict type\\n#include \"OutputDev.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    GfxState* state = reinterpret_cast<GfxState*>(0x12345678); // dummy address\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode* u = nullptr; // Initialize with nullptr\\n    int uLen = 0;\\n    GBool rotate = stream.ConsumeBool();\\n    GBool scaleX = stream.ConsumeBool();\\n    GBool scaleY = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 0, gFalse, nullptr, nullptr, gFalse, gFalse); // Initialize SplashOutputDev with the appropriate constructor\\n    splashOutputDev.drawChar(state, x, y, dx, dy, ox, oy, code, nBytes, u, uLen, rotate, scaleX, scaleY);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}