{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    short arg1 = fuzzed_data_provider.ConsumeIntegral<short>();\\n    \\n    LibRaw MyProcessor;\\n    MyProcessor.open_buffer(&arg1, sizeof(arg1));\\n    \\n    // Fix: Call the function parseCR3\\n    MyProcessor.parseCR3(arg1);\\n    \\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.92",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  LibRaw libRawProcessor;\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  short value = fuzzed_data_provider.ConsumeIntegral<short>();\\n  \\n  // The error message indicates that there is no member named 'parseCR3_CTMD' in 'LibRaw'\\n  // So, we need to use a valid member function of 'LibRaw'. For example, let's use 'open_buffer' function.\\n  libRawProcessor.open_buffer((void*)data, size);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}