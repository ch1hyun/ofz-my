{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"GfxFont.h\"\\n#include \"GfxState.h\"\\n#include \"Annot.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"GString.h\"\\n#include \"PDFRectangle.h\"\\n#include \"OutputDev.h\"\\n#include \"GfxColorSpace.h\"\\n#include \"GfxColor.h\"\\n#include \"BaseStream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  bool binary = false;\\n  GfxColorSpace *colorSpace;\\n  GfxColor color;\\n  bool fill = fdp.ConsumeBool();\\n  GfxFont *font = new GfxFont();\\n  double size2 = fdp.ConsumeFloatingPoint<double>();\\n  double *textMat = new double [6]();\\n  double *ctm = new double [6]();\\n\\n  Object obj;\\n  obj.initNull();\\n  BaseStream *str = new BaseStream((char *)(data), 0, size, &obj);\\n  BaseStream *str2 = str->copy();\\n\\n  GooString *gstr1 = new GooString((char *)(data), static_cast<int>(size));\\n  GooString *gstr2 = new GooString(gstr1);\\n  \\n  PDFRectangle rect(1, 1, 1, 1);\\n\\n  OutputDev *output_dev = NULL;\\n  PDFDoc pdf_doc(str2, gstr2, gstr1, gstr1);\\n\\n  Annot *annot = new Annot(&pdf_doc, &rect, &pdf_doc);\\n\\n  SplashOutputDev splashOutDev(splashModeRGB8, (GBool) binary, NULL, false, false);\\n  GfxState *gfx_state = new GfxState(72, 72, annot->getRect(), 0, gFalse);\\n  splashOutDev.startDoc(pdf_doc.getXRef());\\n  splashOutDev.updateFont(gfx_state);\\n  delete gfx_state;\\n\\n  splashOutDev.clearModRegion();\\n  splashOutDev.setForeground(&color, fill);\\n  splashOutDev.doUpdateFont(gfx_state);\\n\\n  delete annot;\\n  delete gstr1;\\n  delete str;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Splash.h\"\\n#include \"config.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SecurityHandler.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double x1 = fdp.ConsumeFloatingPoint<double>();\\n  double y1 = fdp.ConsumeFloatingPoint<double>();\\n  double x2 = fdp.ConsumeFloatingPoint<double>();\\n  double y2 = fdp.ConsumeFloatingPoint<double>();\\n  double x3 = fdp.ConsumeFloatingPoint<double>();\\n  double y3 = fdp.ConsumeFloatingPoint<double>();\\n  double x4 = fdp.ConsumeFloatingPoint<double>();\\n  double y4 = fdp.ConsumeFloatingPoint<double>();\\n\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n\\n  PDFRectangle box(x, y, x1, y1);\\n  GBool gTrue = gTrue1;\\n\\n  GfxState *state = new GfxState(72.0, 72.0, &box, 0, gTrue);\\n  state->moveTo(x, y);\\n  state->lineTo(x1, y1);\\n  state->curveTo(x2, y2, x3, y3, x4, y4);\\n  state->closePath();\\n\\n  SplashColor paperColor;\\n  paperColor[0] = paperColor[1] = paperColor[2] = 255;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor, gTrue);\\n\\n  splashOut->doUpdateFont(state);\\n  \\n  delete state;\\n  delete splashOut;\\n  delete globalParams;\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}