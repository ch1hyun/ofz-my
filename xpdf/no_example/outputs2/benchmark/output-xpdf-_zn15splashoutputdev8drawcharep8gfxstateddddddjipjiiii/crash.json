{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <splash/Splash.h>\\n#include <splash/SplashFont.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"CharTypes.h\"\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n\\nconst int max_unicode = 0xFFFF;\\nSplashColor gSplashClearColor = {0, 0, 0};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  CharCode c = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = stream.ConsumeIntegral<int>();\\n  GBool dir = stream.ConsumeBool();\\n  GBool drawVertical = stream.ConsumeBool();\\n  GBool t3d0 = stream.ConsumeBool();\\n\\n  std::vector<Unicode> uVector = stream.ConsumeBytes<Unicode>(nBytes);\\n  Unicode* u = uVector.data();\\n  \\n  int fontID = 0;  \\n  XRef xref;\\n  GString dummy_name(\"mPDFa_xxx Helvetica_35dfdf 12 Tf 40 710 Td #1E36CC rg [3 -3]0 d .5 w 0 2 m S /F1 14 Tf 40 710 Td 0 g 00 []0 d 1.00 w 2 J 2 j 0 2 m S EMC\");\\n  Ref r;\\n  r.num = 5;\\n  r.gen = 5;\\n  GfxFont *gFont = GfxFont::makeFont(&xref, \"myName\", &r, &dummy_name);  \\n\\n  globalParams = std::make_unique<GlobalParams>(nullptr);  \\n  SplashOutputDev splashOut(splashModeRGB8, 4, false, gSplashClearColor, true);\\n  splashOut.startDoc(&xref);\\n  GfxState* state = new GfxState(72.0, 72.0, &splashOut);\\n    \\n  (void)splashOut.updateFont( state );\\n  splashOut.setFont( gFont, 72 );\\n\\n  splashOut.drawChar(state, x, y, dx, dy, originX, originY, c, nBytes, u, nBytes, dir, drawVertical, t3d0);\\n\\n  delete state;\\n  delete gFont;\\n  // No globalParams->destroy()\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"CharTypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Lexer.h\"\\n#include \"/src/xpdf-4.05/xpdf/Parser.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1C.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  \\n  PDFRectangle pageBox;\\n  GfxState gpuState(fuzzed_data_provider.ConsumeFloatingPoint<double>(),              // horizDPI\\n                    fuzzed_data_provider.ConsumeFloatingPoint<double>(),              // vertDPI\\n                    &pageBox, // pageBox\\n                    fuzzed_data_provider.ConsumeIntegral<int>(), // rotateA\\n                    gFalse); // upsideDown\\n  \\n  double dx = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double tOriginX = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double tOriginY = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  CharCode c = fuzzed_data_provider.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data_provider.ConsumeIntegral<int>();\\n  Unicode u = Unicode(fuzzed_data_provider.ConsumeIntegral<unsigned int>());\\n  bool composing = fuzzed_data_provider.ConsumeBool();\\n  bool vertical = fuzzed_data_provider.ConsumeBool();\\n  bool updateCTM = fuzzed_data_provider.ConsumeBool();\\n  SplashOutputDev splashOutputDev(splashModeMono1, 1, gFalse, nullptr);\\n  \\n  splashOutputDev.drawChar(&gpuState, dx, dy, originX, originY, tOriginX, tOriginY, c, nBytes, &u, 1, vertical, composing, updateCTM);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}