{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n  std::vector<char> str = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n\\n  MemStream* strStream = new MemStream(&str[0], 0, str.size(), &obj);\\n  PDFDoc* doc = new PDFDoc(strStream, nullptr, nullptr, nullptr);\\n\\n  if (doc->isOk()) {\\n    SplashColor paperColor = {0xff, 0xff, 0xff};\\n    SplashOutputDev* splashDev = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor, true);\\n    double hDPIA = 72.0;\\n    double vDPIA = 72.0;\\n    PDFRectangle pageBox;\\n    int rotateA = 0;\\n    GBool upsideDown = gFalse;\\n    GfxState* state = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n    for (int i = 1; i <= doc->getNumPages() && fdp.remaining_bytes() > 0; i++) {\\n      Links* links = doc->getLinks(i);\\n      doc->displayPage(splashDev, i,\\n                       fdp.ConsumeIntegral<int>(),\\n                       fdp.ConsumeIntegral<int>(),\\n                       fdp.ConsumeIntegral<int>(), gTrue, gTrue, gFalse);\\n    }\\n    delete splashDev;\\n    delete state;\\n  }\\n\\n  delete doc;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdlib.h>\\n#include <iostream>\\n#include <ctime>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"GfxState.h\"\\n#include \"GfxFont.h\"\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Initiate param interfaces\\n  globalParams = new GlobalParams(\"/path/to/config/file\");\\n  FuzzedDataProvider fdp(data, size);\\n\\n  // Consume fuzzed data\\n  GString* id = new GString(fdp.ConsumeBytesAsString(1).c_str());\\n  GString* name = new GString(\"Foo\");\\n  bool emb = true;\\n  GfxFontType type = GfxFontType::fontTrueType;\\n  Ref embRef = {1,1};\\n    \\n  // Initialize Object and GfxFont\\n  Object fontObject;\\n  Dict* fontDict = fontObject.getDict();\\n  GfxFont* gfxFont = GfxFont::makeFont(nullptr, id->getCString(), embRef, fontDict);\\n\\n  // Initialize GfxState\\n  double ctm[6];\\n  for(int i=0; i<6; ++i){\\n    ctm[i] = fdp.ConsumeFloatingPoint<double>();\\n  }\\n  PDFRectangle pageBox;\\n  GfxState* gfxState = new GfxState(72.0, 72.0, &pageBox, fdp.ConsumeBool());\\n  gfxState->setFont(gfxFont, 72.0);\\n \\n  // Instantiate SplashOutputDev and call target function\\n  SplashOutputDev* splashOutputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, nullptr, gTrue, gTrue);\\n  splashOutputDev->doUpdateFont(gfxState);\\n\\n  // Cleanup\\n  delete globalParams;\\n  delete splashOutputDev;\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}