{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.25",
        "coverage_diff": "0.00032869683729506554",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"config.h\"\\n#include \"OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n\\n    int page = fdp.ConsumeIntegralInRange<int>(1, 1000);\\n    double hDPI = fdp.ConsumeFloatingPointInRange<double>(0, 1000.0);\\n    double vDPI = fdp.ConsumeFloatingPointInRange<double>(0, 1000.0);\\n    int rotate = fdp.ConsumeIntegralInRange<int>(1, 180);\\n    GBool useMediaBox = fdp.ConsumeBool();\\n    GBool crop = fdp.ConsumeBool();\\n    GBool printing = fdp.ConsumeBool();\\n    int sliceX = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n    int sliceY = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n    int sliceW = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n    int sliceH = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n    std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n    globalParams = new GlobalParams((char *)\"/usr/local/etc/xpdfrc\");\\n    Object obj;\\n    BaseStream *str = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n    PDFDoc *doc = new PDFDoc(str);\\n    \\n    if(doc->isOk()) {\\n      OutputDev *output_dev = nullptr;\\n      doc->displayPageSlice(output_dev, page, hDPI, vDPI, rotate, useMediaBox, crop, sliceX, sliceY, sliceW, sliceH, printing);\\n    }\\n\\n    delete doc;\\n    delete globalParams;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.19",
        "coverage_diff": "0.00032067984126347857",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int pageNum = fdp.ConsumeIntegralInRange<int>(1, 100);\\n  double hDPI = fdp.ConsumeFloatingPointInRange<double>(0.1, 500.0);\\n  double vDPI = fdp.ConsumeFloatingPointInRange<double>(0.1, 500.0);\\n  int rotate = fdp.ConsumeIntegralInRange<int>(-180, 180);\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n  int sliceY = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n  int sliceW = fdp.ConsumeIntegralInRange<int>(1, 1000);\\n  int sliceH = fdp.ConsumeIntegralInRange<int>(1, 1000);\\n\\n  std::vector<char> vec = fdp.ConsumeRemainingBytes<char>();\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(vec.data(), 0, vec.size(), &obj);\\n  PDFDoc doc(str, NULL, NULL, NULL);\\n\\n  if (doc.isOk()) {\\n    doc.displayPageSlice(NULL, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL);\\n  }\\n\\n  // delete str; // Removed this line to fix the issue\\n  return 0;\\n}",
        "model": ""
    }

    ]
}