{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Gfx.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"XRef.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 2) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    Object obj1;\\n    int int1 = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Initialize necessary parameters for Gfx constructor\\n    GString fileNameA(\"dummy\");\\n    GString ownerPassword;\\n    GString userPassword;\\n    BaseStream *strA = nullptr;\\n    GBool repair = gFalse;\\n    XRef xrefA(strA, repair);\\n    SplashColorMode colorModeA = splashModeRGB8;\\n    int bitmapRowPadA = 4;\\n    GBool reverseVideoA = gFalse;\\n    SplashColorPtr paperColorA;\\n    GBool bitmapTopDownA = gTrue;\\n    GBool allowAntialiasA = gTrue;\\n    PDFRectangle box;\\n    PDFRectangle cropBox;\\n\\n    PDFDoc doc(&fileNameA, &ownerPassword, &userPassword);\\n    SplashOutputDev out(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n    Dict resDict(&xrefA);\\n\\n    // Initialize Gfx with parameters\\n    Gfx gfx(&doc, &out, &resDict, &box, &cropBox);\\n\\n    // As opSetExtGState is private, it cannot be called directly. \\n    // We need to call a public method that eventually calls opSetExtGState.\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Gfx.h\"\\n#include \"XRef.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  virtual GBool upsideDown() { return gFalse; }\\n  virtual GBool useDrawChar() { return gTrue; }\\n  virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  Object obj1;\\n  int obj2 = stream.ConsumeIntegral<int>();\\n\\n  GString fileName(\"dummy\");\\n  PDFDoc *docA = new PDFDoc(&fileName);\\n  OutputDev *outA = new MyOutputDev();\\n  // BaseStream is an abstract class and cannot be instantiated. \\n  // We need to use a concrete subclass instead. Assuming that FileStream is a concrete subclass, we can use it as follows:\\n  FileStream *strA = new FileStream();\\n  XRef *xrefA = new XRef(strA, gFalse);\\n  Dict *resDict = new Dict(xrefA);\\n  PDFRectangle *box = new PDFRectangle();\\n  PDFRectangle *cropBox = new PDFRectangle();\\n  \\n  Gfx gfx(docA, outA, resDict, box, cropBox);\\n\\n  // As opSetExtGState function is private, it cannot be accessed directly. \\n  // Therefore, we need to find a public function that calls opSetExtGState internally and use that function instead.\\n  // Assuming that function is 'executeOperator', we can use it as follows:\\n  // Operator class does not have a constructor that takes a string. We need to find a way to create an Operator object.\\n  // Assuming that Operator class has a static method named 'create' that takes a string and returns an Operator object, we can use it as follows:\\n  Operator op = Operator::create(\"SetExtGState\");\\n  // There is no 'executeOperator' method in the Gfx class. We need to find a correct method to use.\\n  // Assuming that method is 'execOp', we can use it as follows:\\n  gfx.execOp(&op, &obj1, obj2);\\n\\n  delete docA;\\n  delete outA;\\n  delete strA;\\n  delete xrefA;\\n  delete resDict;\\n  delete box;\\n  delete cropBox;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}