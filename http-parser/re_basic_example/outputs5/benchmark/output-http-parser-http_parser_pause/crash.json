{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.77",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size <= 2) {\\n    return 0; // We need at least two bytes for the pause parameter and data\\n  }\\n\\n  static const http_parser_settings settings_null = {.on_message_begin = 0, .on_header_field = 0, .on_header_value = 0, .on_url = 0, .on_status = 0, .on_body = 0, .on_headers_complete = 0, .on_message_complete = 0, .on_chunk_header = 0, .on_chunk_complete = 0};\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  http_parser_execute(&parser, &settings_null, (char *)(data + 2), size - 2);\\n\\n  const int pause = data[0] % 2; // Use the first byte as the pause parameter\\n  http_parser_pause(&parser, pause);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "20.43",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  http_parser parser;\\n  FuzzedDataProvider data_provider(Data, Size);\\n  \\n  static const http_parser_settings settings_null = {.on_message_begin = 0, .on_header_field = 0, .on_header_value = 0, .on_url = 0, .on_status = 0, .on_body = 0, .on_headers_complete = 0, .on_message_complete = 0, .on_chunk_header = 0, .on_chunk_complete = 0};\\n\\n  http_parser_init(&parser, HTTP_BOTH);\\n  auto input = data_provider.ConsumeRemainingBytesAsString();\\n  http_parser_execute(&parser, &settings_null, input.data(), input.size());\\n  \\n  if(data_provider.remaining_bytes() > 0) {\\n    int pause = data_provider.ConsumeIntegral<int>();\\n    http_parser_pause(&parser, pause);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}