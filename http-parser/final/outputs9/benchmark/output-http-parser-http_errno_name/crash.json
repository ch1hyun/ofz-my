{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"http_parser.h\"\\n\\nconst char * http_errno_name(enum http_errno err);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < 1){\\n    return 0;\\n  }\\n  // The HTTP_ERRNO_MAX is not defined in the http_parser.h, so we can't use it.\\n  // Instead, we can use HPE_UNKNOWN which is the last element in the http_errno enum.\\n  enum http_errno err_no = (enum http_errno)(data[0] % HPE_UNKNOWN); \\n  const char * err_name = http_errno_name(err_no);\\n  \\n  // Add code to use the err_name to increase code coverage\\n  if (err_name != NULL) {\\n    printf(\"Error name: %s\\\n\", err_name);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern const char * http_errno_name(int);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  int http_error = *(int *)data;\\n  if (http_error >= 0 && http_error <= 63) {\\n    http_errno_name(http_error);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}