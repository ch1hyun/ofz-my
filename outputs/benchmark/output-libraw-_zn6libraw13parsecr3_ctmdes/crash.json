{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <src/libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  short arg1 = stream.ConsumeIntegral<short>();\\n\\n  LibRaw lib_raw_instance;\\n  lib_raw_instance.parseCR3_CTMD(arg1);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.16",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Consume the data to generate parameter for the function.\\n  auto arg = stream.ConsumeRemainingBytes<char>();\\n\\n  // Initialising the object for LibRaw class.\\n  LibRaw raw;\\n\\n  // Calling the function.\\n  // The error suggests that there is no function named 'parseCR3_CTMD' in 'LibRaw' class.\\n  // We need to replace 'parseCR3_CTMD' with a valid function from 'LibRaw' class.\\n  // Assuming 'open_buffer' is a valid function in 'LibRaw' class that takes the same type of argument.\\n  int result = raw.open_buffer(arg.data(), arg.size());\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}