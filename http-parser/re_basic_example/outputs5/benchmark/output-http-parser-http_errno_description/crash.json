{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#ifndef HTTP_ERRNO_MAX\\n#define HTTP_ERRNO_MAX 23\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n  \\n  int *int_data = (int*)data;\\n  enum http_errno err;\\n  \\n  if (*int_data >= 0 && *int_data <= HTTP_ERRNO_MAX) {\\n    err = (enum http_errno)(*int_data);\\n  } else {\\n    return 0;\\n  }\\n  \\n  const char *desc = http_errno_description(err);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <http_parser.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0)\\n    return 0;\\n\\n  // Obtain a value to represent http_errno (ensuring it's in range)\\n  const enum http_errno err = (enum http_errno)(data[0] % HTTP_ERRNO_MAX);\\n\\n  const char* errorCodeDesc = http_errno_description(err);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}