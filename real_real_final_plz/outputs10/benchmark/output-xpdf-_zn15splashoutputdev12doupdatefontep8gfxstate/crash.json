{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer\\n    GfxState state(0, 0, nullptr, 0, gFalse);\\n\\n    // Call the function-under-test\\n    SplashOutputDev outputDev(splashModeRGB8, 0, nullptr, gFalse, nullptr, gTrue);\\n    outputDev.doUpdateFont(&state);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n\\n// Forward declaration to access private member\\nnamespace {\\n    void callPrivateDoUpdateFont(SplashOutputDev& dev, GfxState* state) {\\n        dev.doUpdateFont(state);\\n    }\\n}\\n\\n// Declare the private member function to be accessible for fuzzing\\nclass SplashOutputDevFriend : public SplashOutputDev {\\npublic:\\n    using SplashOutputDev::doUpdateFont;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object\\n    GfxState* gfxState = new GfxState(0, 0, nullptr, 0, false);\\n\\n    // Call the function-under-test with the dummy GfxState object\\n    SplashOutputDevFriend splashOutputDev(SplashColorMode::splashModeRGB8, 0, false, nullptr);\\n    \\n    // Accessing private member using a friend function\\n    callPrivateDoUpdateFont(splashOutputDev, gfxState);\\n\\n    // Clean up\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}