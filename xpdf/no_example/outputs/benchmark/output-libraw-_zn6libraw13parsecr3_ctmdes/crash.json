{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < sizeof(short)) {\\n    return 0;\\n  }\\n\\n  LibRaw RawProcessor;\\n  FuzzedDataProvider provider(data, size);\\n\\n  const short input = provider.ConsumeIntegral<short>();\\n  RawProcessor.open_buffer(&input, sizeof(input));\\n\\n  // The function parseCR3 does not exist in the LibRaw library. \\n  // Therefore, we need to replace it with a function that does exist in the library. \\n  // For example, we can use the unpack function.\\n\\n  RawProcessor.unpack();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.43",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < sizeof(short)) {\\n    return 0;  // Not enough data for a short\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  short cr3_ctmd = fuzzed_data.ConsumeIntegral<short>();\\n  LibRaw raw_processor;\\n\\n  // The function parseCR3_CTMD does not exist in LibRaw. \\n  // Assuming the intention was to use open_buffer function to parse the data. \\n  raw_processor.open_buffer(&cr3_ctmd, sizeof(cr3_ctmd));\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}