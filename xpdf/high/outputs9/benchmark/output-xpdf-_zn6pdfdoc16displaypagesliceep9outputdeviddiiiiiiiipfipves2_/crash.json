{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GlobalParams.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  int page = stream.ConsumeIntegral<int>();\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  bool useMediaBox = stream.ConsumeBool();\\n  bool crop = stream.ConsumeBool();\\n  bool printing = stream.ConsumeBool();\\n  int sliceX = stream.ConsumeIntegral<int>();\\n  int sliceY = stream.ConsumeIntegral<int>();\\n  int sliceW = stream.ConsumeIntegral<int>();\\n  int sliceH = stream.ConsumeIntegral<int>();\\n\\n  // Initialize GlobalParams\\n  globalParams = new GlobalParams();\\n\\n  // Initialize output_dev object\\n  SplashColor paperColor;\\n  SplashOutputDev splashOut( splashModeBGR8, 4, gFalse, paperColor);\\n  OutputDev* output_dev_ptr = &splashOut;\\n  \\n  std::vector<char> buf = stream.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(buf.data(), 0, buf.size(), &obj);\\n\\n  PDFDoc doc(str, nullptr, nullptr, nullptr);\\n\\n  doc.displayPageSlice(output_dev_ptr, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n\\n  // Clean up\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"config.h\"\\n#include \"SplashOutputDev.h\" \\n#include \"Splash.h\" \\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  FuzzedDataProvider fdp(data, size);\\n  int pg = fdp.ConsumeIntegral<int>();\\n  double hDPI = fdp.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double vDPI = fdp.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  int rotate = fdp.ConsumeIntegralInRange<int>(0, 360);\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool(); \\n  int sliceX = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n  int sliceY = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n  int sliceW = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n  int sliceH = fdp.ConsumeIntegralInRange<int>(0, 1000);\\n  std::vector<char> buf = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream str(buf.data(), 0, buf.size(), &obj);\\n\\n  // PDFDoc constructor might throw an exception. Make sure to catch them to prevent library from terminating\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(&str, NULL, NULL, NULL);\\n  } catch(...) {\\n    return 0;\\n  }\\n\\n  if (doc->isOk()) {\\n    // Create a dummy output device\\n    SplashColor splashWhite;\\n    splashWhite[0] = splashWhite[1] = splashWhite[2] = 255; // define 'splashWhite' as white color\\n    SplashOutputDev splashOutDev(splashModeRGB8, 4, gFalse, splashWhite);\\n    doc->displayPageSlice(&splashOutDev, pg, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n  }\\n\\n  // Fix: Use delete operator only if the object was created using new operator\\n  if (doc != NULL) {\\n    delete doc;\\n    doc = NULL;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}