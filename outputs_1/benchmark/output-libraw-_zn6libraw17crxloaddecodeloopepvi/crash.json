{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.23",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nstruct EmptyStruct {};\\n\\nclass LibRawPublic : public LibRaw {\\npublic:\\n  using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if(!size)\\n    return 0;\\n  EmptyStruct emptyStruct;\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  int intParam = fuzzed_data_provider.ConsumeIntegral<int>();\\n  LibRawPublic libRaw;\\n  libRaw.crxLoadDecodeLoop(&emptyStruct, intParam);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n\\nclass FuzzLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  if(size == 0) return 0; // Ensure size is not 0\\n\\n  const size_t data_size = stream.ConsumeIntegralInRange<size_t>(1, size);\\n  auto data_chunk = stream.ConsumeBytes<uint8_t>(data_size);\\n  void* chunk_ptr = reinterpret_cast<void*>(data_chunk.data());\\n  int param = stream.ConsumeIntegral<int>();\\n\\n  if(chunk_ptr && data_chunk.size() > 0) { // Ensure data_chunk is not empty\\n    FuzzLibRaw libraw;\\n    try {\\n        libraw.crxLoadDecodeLoop(chunk_ptr, param);\\n    } catch(...) {\\n        // Handle or ignore exceptions\\n    }\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}