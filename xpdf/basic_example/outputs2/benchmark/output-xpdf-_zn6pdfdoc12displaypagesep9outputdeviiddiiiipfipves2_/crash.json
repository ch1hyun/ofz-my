{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.18",
        "coverage_diff": "0.0004249144158228508",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdlib.h>\\n\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  int fisrt_page = stream.ConsumeIntegral<int>();\\n  int last_page = stream.ConsumeIntegral<int>();\\n  double h_dpi = stream.ConsumeFloatingPoint<double>();\\n  double v_dpi = stream.ConsumeFloatingPoint<double>();\\n  GBool useMediaBox = stream.ConsumeBool();\\n  GBool crop = stream.ConsumeBool();\\n  GBool printing = stream.ConsumeBool();\\n\\n  const char* fileName = \"/tmp/temp.txt\";\\n  PDFDoc* doc = new PDFDoc(new GString(fileName));\\n  if (!doc->isOk()) {\\n    return 0;\\n  }\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev* splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n\\n  if (!splashOut || !doc) {\\n    delete doc;\\n    delete splashOut;\\n    return 0;\\n  }\\n\\n  splashOut->startDoc(doc->getXRef());\\n  doc->displayPages(splashOut, fisrt_page, last_page, h_dpi, v_dpi, 0,\\n                    useMediaBox, crop, printing, nullptr);\\n\\n  delete doc;\\n  delete splashOut;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.09",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <fstream>\\n\\n#include \"GString.h\"\\n#include \"PDFDoc.h\"\\n#include \"png.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  double pdfDpi = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  bool useMediaBox = stream.ConsumeBool();\\n  bool crop = stream.ConsumeBool();\\n  bool printing = stream.ConsumeBool();\\n\\n  if (printing) {\\n    return 0;\\n  }\\n\\n  std::string fileName = stream.ConsumeRemainingBytesAsString();\\n  fileName.insert(0, \"/tmp/libfuzzer.\");\\n  \\n  // Check if file exists and is a valid PDF\\n  std::ifstream file(fileName);\\n  if (!file || fileName.substr(fileName.find_last_of(\".\") + 1) != \"pdf\") {\\n    return 0;\\n  }\\n  \\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n  globalParams->setErrQuiet(gTrue);\\n  PDFDoc *doc = new PDFDoc(new GString(fileName.c_str()), NULL, NULL);\\n  SplashColor paperColor = {0xff, 0xff, 0xff}; // white\\n  SplashOutputDev* splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n  doc->displayPages(splashOut, 1, doc->getNumPages(), pdfDpi, pdfDpi, rotate, useMediaBox, crop, printing, NULL, NULL);\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}