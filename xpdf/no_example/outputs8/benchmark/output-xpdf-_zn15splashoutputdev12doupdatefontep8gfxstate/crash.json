{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"GfxFont.h\"\\n#include \"GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n   if (size < 3) {\\n       return 0;\\n   }\\n  \\n   FuzzedDataProvider fdp(data, size);\\n\\n   // Initialize GlobalParams\\n   globalParams = new GlobalParams(NULL);\\n   globalParams->setErrQuiet(1);\\n   globalParams->setupBaseFonts(NULL);\\n   globalParams->setEnableFreeType(const_cast<char *>(\"yes\")); \\n   globalParams->setErrQuiet(1);\\n   \\n   // Setting up SplashOutputDev\\n   SplashColor paperColor = {0xff, 0xff, 0xff};\\n   SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n   splashOut->startDoc(NULL);\\n   \\n   // Initialize GfxState and call the target function\\n   PDFRectangle pageBox;\\n   GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gTrue);\\n   GfxFont *gfxFont = NULL;\\n   double mat[6];\\n   mat[0] = fdp.ConsumeFloatingPoint<double>();\\n   mat[1] = fdp.ConsumeFloatingPoint<double>();\\n   mat[2] = fdp.ConsumeFloatingPoint<double>();\\n   mat[3] = fdp.ConsumeFloatingPoint<double>();\\n   mat[4] = fdp.ConsumeFloatingPoint<double>();\\n   mat[5] = fdp.ConsumeFloatingPoint<double>();\\n   Ref ref;\\n   GString *gstr1 = new GString(fdp.ConsumeBytesAsString(8).c_str());\\n   GString *gstr2 = new GString(fdp.ConsumeRemainingBytesAsString().c_str());\\n   state->setFont(new Gfx8BitFont(NULL, \"tagA\", ref, gstr1, fontType1, ref, NULL, gTrue, gFalse), 12.0);\\n   \\n   splashOut->doUpdateFont(state); // Fixed Line: Changed from updateFont to doUpdateFont\\n   \\n   // Cleanup\\n   delete state;\\n   delete splashOut;\\n   delete globalParams;\\n   \\n   return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <string.h>\\n#include <memory>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" \\n\\nextern GlobalParams *globalParams;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  std::string popplerDataPath(\"/usr/share/poppler\");\\n  globalParams = new GlobalParams(popplerDataPath.c_str());\\n\\n  globalParams->setAntialias(const_cast<char *>(\"yes\"));\\n\\n  SplashColor paperColor;\\n  paperColor[0] = paperColor[1] = paperColor[2] = 255;\\n  std::unique_ptr<SplashOutputDev> splashOut = std::make_unique<SplashOutputDev>(\\n      splashModeRGB8, 4, false, paperColor, true, false);\\n\\n  int hDPI = 600, vDPI = 600;\\n  int rotate = 0;\\n  GBool useMediaBox = gTrue;\\n  GBool crop = gFalse;\\n  GBool printing = gFalse;\\n  PDFRectangle *pageBox = new PDFRectangle();\\n  std::unique_ptr<GfxState> state = std::make_unique<GfxState>(\\n      hDPI, vDPI, pageBox, rotate, useMediaBox);\\n\\n  FuzzedDataProvider fdp(data, size);\\n\\n  // Call the function under test\\n  splashOut->updateFont(state.get());\\n\\n  delete globalParams;\\n  delete pageBox;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}