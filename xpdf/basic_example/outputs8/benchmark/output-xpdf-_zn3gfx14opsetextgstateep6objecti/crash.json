{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"Object.h\"\\n#include \"Page.h\"\\n#include \"PDFDoc.h\"\\n#include \"XRef.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  FuzzedDataProvider stream(data, size);\\n\\n  Object obj;\\n\\n  BaseStream *strA = nullptr;\\n  GBool repair = gFalse;\\n  XRef xref(strA, repair);\\n  Dict* dict = new Dict(&xref);\\n\\n  /* Create a dummy resource dict for the page */\\n  Dict* resDict = new Dict(&xref);\\n  if (resDict == nullptr) {\\n    return 0;\\n  }\\n\\n  /* Create the page */\\n  PDFDoc *docA = nullptr;\\n  int numA = 0;\\n  PageAttrs *attrsA = nullptr;\\n  Page* page = new Page(docA, numA, dict, attrsA);\\n  if (page == nullptr) {\\n    return 0;\\n  }\\n\\n  /* Create the graphics state */\\n  OutputDev *outA = nullptr;\\n  Gfx* gfx = new Gfx(docA, outA, numA, resDict, nullptr, nullptr, nullptr, nullptr);\\n  if (gfx == nullptr) {\\n    return 0;\\n  }\\n\\n  /* Select a number of arguments for the extGState */\\n  const auto num_args = stream.ConsumeIntegralInRange<int>(0, size);\\n\\n  /* Set the graphics state */\\n  // Object args[num_args];\\n  // gfx->opSetExtGState(args, num_args); // This function is private and cannot be accessed here.\\n\\n  /* Cleanup */\\n  delete gfx;\\n  delete page;\\n  delete resDict;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n\\n#include \"NameToCharCode.h\"\\n#include \"PDFDoc.h\"\\n#include \"XRef.h\"\\n#include \"Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  const size_t argSize = fdp.ConsumeIntegralInRange<int>(1, size);\\n  std::vector<unsigned char> arg1Buffer = fdp.ConsumeBytes<unsigned char>(argSize);\\n  int arg2 = fdp.ConsumeIntegral<int>();\\n  \\n  if (fdp.remaining_bytes() == 0) {\\n    return 0;\\n  }\\n\\n  const unsigned char *arg1Data = arg1Buffer.data();\\n  Object arg1;\\n  arg1.initNull();\\n\\n  // Initialize the required objects for creating a Gfx object to call opSetExtGState\\n  MemStream *strA = new MemStream((char *)arg1Data, 0, argSize, &arg1);\\n  XRef xref(strA, gFalse);\\n  PDFDoc doc(strA, nullptr, nullptr);\\n\\n  // Initialize an output device, required to initialize Gfx\\n  SplashColor paperColor;\\n  paperColor[0] = 255;\\n  paperColor[1] = 255;\\n  paperColor[2] = 255;\\n  SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, paperColor);\\n\\n  PDFRectangle box;\\n  Gfx gfx(&doc, &splashOut, 0, nullptr, 72.0, 72.0, &box, gFalse, gFalse);\\n\\n  // Use public method to set the state instead of the private method\\n  Object args[2];\\n  args[0] = arg1;\\n  args[1].initInt(arg2);\\n  gfx.opSetExtGState(args, 2); // Fixed the function name from setExtGState to opSetExtGState\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}