{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "28.84",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Declare settings\\nhttp_parser_settings settings;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) return 0;\\n  \\n  // Initialize settings\\n  memset(&settings, 0, sizeof(settings));\\n  \\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_REQUEST);\\n  \\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n  \\n  // Call the function http_should_keep_alive as required by the error message\\n  int keep_alive = http_should_keep_alive(&parser);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern int http_should_keep_alive(const http_parser *);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  parser.http_major = data[0];\\n  parser.http_minor = data[1];\\n  parser.status_code = *((uint16_t *) (data+2));\\n  parser.method = data[4];\\n  parser.http_errno = data[5];\\n  parser.upgrade = data[6];\\n\\n  http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}