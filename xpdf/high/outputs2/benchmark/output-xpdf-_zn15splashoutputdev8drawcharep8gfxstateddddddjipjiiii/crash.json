{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.13",
        "coverage_diff": "0.010911131598989859",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int))\\n    return 0;\\n  \\n  FuzzedDataProvider stream(data, size);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  // Generate required parameters\\n  double xRadius = stream.ConsumeFloatingPoint<double>();\\n  double yRadius = stream.ConsumeFloatingPoint<double>();\\n  double angle1 = stream.ConsumeFloatingPoint<double>();\\n  double angle2 = stream.ConsumeFloatingPoint<double>();\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = stream.ConsumeIntegral<int>();\\n  Unicode unicode = stream.ConsumeIntegral<Unicode>();\\n  bool is_invisible = stream.ConsumeBool();\\n  bool is_image = stream.ConsumeBool();\\n  bool is_dot = stream.ConsumeBool();\\n\\n  // Create a dummy PDFDoc and GfxState\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *gfxState = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n\\n  // Configure the SplashOutputDev\\n  SplashColor paperColor = {0, 0, 0, 0};\\n\\n  // Create a SplashOutputDev\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n\\n  // Call the target function\\n  splashOut->drawChar(gfxState, x, y, xRadius, yRadius, angle1, angle2, charCode, nBytes, &unicode, 1, is_invisible, is_image, is_dot);\\n\\n  delete splashOut;\\n  delete gfxState;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"FoFiTrueType.h\"\\n#include \"FoFiType1C.h\"\\n#include \"FoFiType1.h\"\\n#include \"FoFiIdentifier.h\"\\n#include \"splash/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size < 1) {\\n    return 0;\\n  }\\n\\n  // Initialize necessary variables for drawChar function\\n  GfxState *state = nullptr;\\n  double x = 0.0, y = 0.0, dx = 0.0, dy = 0.0, originX = 0.0, originY = 0.0;\\n  CharCode code = 0;\\n  int nBytes = 0;\\n  Unicode *u = nullptr;\\n  int uLen = 0;\\n  GBool charExists = gFalse, dlig = gFalse, rlig = gFalse;\\n\\n  // Create an instance of SplashOutputDev\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, nullptr, gFalse);\\n\\n  // Call the drawChar function\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, charExists, dlig, rlig);\\n\\n  // Clean up\\n  delete splashOut;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}