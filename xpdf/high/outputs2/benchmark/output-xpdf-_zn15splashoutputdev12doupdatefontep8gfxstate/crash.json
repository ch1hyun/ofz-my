{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"Stream.h\"\\n#include \"parseargs.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"FoFiTrueType.h\"\\n#include \"FoFiType1C.h\"\\n#include \"FoFiType1.h\"\\n#include \"FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  double x_radius = fdp.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double y_radius = fdp.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double angle1 = fdp.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double angle2 = fdp.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  \\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n    \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n  splashOut->updateFont(state);\\n  // splashOut->doUpdateFont(state); // Call the required function\\n\\n  delete splashOut;\\n  delete globalParams;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/splash/SplashPath.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  double width = stream.ConsumeFloatingPoint<double>();\\n  double height = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n\\n  char *char_arr = new char[size+1];\\n  memcpy(char_arr, data, size);\\n  char_arr[size] = '\\0';\\n\\n  GString *pdf_doc_str = new GString(char_arr, size);\\n  PDFDoc *pdf_doc = new PDFDoc(pdf_doc_str);\\n  PDFRectangle *pdf_rect = new PDFRectangle(0,0,width,height);\\n  GfxState *gfx_state = new GfxState(width, height, pdf_rect, rotate, gFalse);\\n  \\n  SplashColor paper_color = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splash_output_dev = new SplashOutputDev(splashModeRGB8, 1, gFalse, paper_color);\\n  \\n  splash_output_dev->startDoc(pdf_doc->getXRef());\\n  splash_output_dev->updateFont(gfx_state);\\n\\n  delete splash_output_dev;\\n  delete gfx_state;\\n  delete pdf_rect;\\n  delete pdf_doc;\\n  delete pdf_doc_str;\\n  delete[] char_arr;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}