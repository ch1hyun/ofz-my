{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.88",
        "coverage_diff": "0.00021658499607439695",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  std::vector<unsigned char> buffer = stream.ConsumeRemainingBytes<unsigned char>();\\n  if(buffer.empty()) {\\n    return 0;\\n  }\\n  LibRaw iProcessor;\\n  iProcessor.open_buffer(buffer.data(), buffer.size());\\n  iProcessor.unpack();\\n  iProcessor.sraw_midpoint();\\n  iProcessor.recycle();\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.46",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdlib>\\n#include <cstdint>\\n#include <cstddef>\\n#include <iostream>\\n#include <vector>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size < 20) {\\n      return 0;\\n  }\\n  FuzzedDataProvider stream(Data, Size);\\n  std::string raw_image_data = stream.ConsumeRemainingBytesAsString();\\n  if (raw_image_data.empty()) {\\n      // Not enough data to parse, exit early.\\n      return 0;\\n  }\\n  LibRaw RawProcessor;\\n  int ret = RawProcessor.open_buffer(\\n      reinterpret_cast<void*>(const_cast<char*>(raw_image_data.data())),\\n      raw_image_data.size());\\n  if (ret != LIBRAW_SUCCESS) {\\n      // Couldn't parse image data, exit early.\\n      return 0;\\n  }\\n  RawProcessor.unpack();\\n  RawProcessor.dcraw_process();\\n\\n  RawProcessor.recycle();\\n  \\n  RawProcessor.sraw_midpoint();\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}