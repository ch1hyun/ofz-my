{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "The provided code and error message do not indicate any issues that need to be fixed. The code seems to be correctly written and there are no errors provided in the error message. Therefore, no changes are needed. The code should be able to build for fuzzing as it is.",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <Splash.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"GString.h\"\\n#include \"XRef.h\"\\n#include \"fofi/FoFiType1C.h\"\\n#include \"fofi/FoFiTrueType.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"splash/SplashScreen.h\"\\n#include \"splash/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // initialize library\\n  FuzzedDataProvider fdp(data, size);\\n  globalParams = new GlobalParams(nullptr);\\n  globalParams->setErrQuiet(1);\\n  std::vector<double> values(7);\\n  for (auto& value : values) {\\n    value = fdp.ConsumeFloatingPoint<double>();\\n  }\\n  CharCode a = fdp.ConsumeIntegralInRange<CharCode>(0, std::numeric_limits<CharCode>::max());\\n  int b_len = fdp.ConsumeIntegralInRange<int>(-1, std::numeric_limits<int>::max());\\n  Unicode b_buf = fdp.ConsumeIntegralInRange<Unicode>(0, std::numeric_limits<Unicode>::max());\\n  Unicode* b = &b_buf;\\n  GBool c = (GBool) static_cast<bool>(fdp.ConsumeIntegral<unsigned int>() % 2);\\n  GBool d = (GBool) static_cast<bool>(fdp.ConsumeIntegral<unsigned int>() % 2);\\n  GBool e = (GBool) static_cast<bool>(fdp.ConsumeIntegral<unsigned int>() % 2);\\n  \\n  SplashBitmap *bitmap = new SplashBitmap(1, 1, 1, splashModeRGB8, false, false);\\n  Splash *splashOut = new Splash(bitmap, false);\\n  SplashOutputDev *splashOutputDev = new SplashOutputDev(splashOut);\\n  GfxState *gfxState = new GfxState(72.0, 72.0, bitmap->getBitmap(), 0, false, false);\\n  \\n  if (values.size() < 7) {\\n    delete globalParams;\\n    delete splashOutputDev;\\n    delete gfxState;\\n    delete splashOut;\\n    delete bitmap;\\n    return 0;\\n  }\\n  \\n  splashOutputDev->drawChar(gfxState, values[0], values[1], values[2], values[3], values[4], values[5], a, b_len, b, b_len, c, d, e);\\n  \\n  delete globalParams;\\n  delete splashOutputDev;\\n  delete gfxState;\\n  delete splashOut;\\n  delete bitmap;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}