{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(unsigned int)) {\\n    return 0;\\n  }\\n\\n  // Limit the scope of the data to our list of valid errno names to avoid out of bound access\\n  enum http_errno err = (enum http_errno)(*(unsigned int*)data % 20); // HTTP_ERRNO_MAX is not defined, so replace it with an arbitrary number, like 20\\n\\n  // Call the function-under-test\\n  const char *err_name = http_errno_name(err);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size != sizeof(uint16_t)) {\\n    return 0;\\n  }\\n\\n  // Convert the data to an enumeration type\\n  enum http_errno err = *((uint16_t *)data);\\n\\n  // Check if the error is within the valid range\\n  if (err < 0 || err >= _HTTP_ERRNO_H) {\\n    return 0;\\n  }\\n\\n  // Call the Http Parser function with the input\\n  http_errno_name(err);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}