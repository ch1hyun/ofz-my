{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"Dict.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashFont.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nstruct ScopeSplashBitmap {\\n  SplashBitmap *s;\\n\\n  ScopeSplashBitmap(SplashBitmap *sIn):s(sIn) {}\\n  ~ScopeSplashBitmap() {delete s;}\\n};\\n\\nstruct ScopeSplash {\\n  Splash *s;\\n\\n  ScopeSplash(Splash *sIn):s(sIn) {}\\n  ~ScopeSplash() {delete s;}\\n};\\n\\nstruct ScopeGfxState {\\n  GfxState *s;\\n\\n  ScopeGfxState(GfxState *sIn):s(sIn) {}\\n  ~ScopeGfxState() {delete s;}\\n};\\n\\nstruct ScopeSplashOutputDev {\\n  SplashOutputDev *s;\\n\\n  ScopeSplashOutputDev(SplashOutputDev *sIn):s(sIn) {}\\n  ~ScopeSplashOutputDev() {delete s;}\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider dataProvider(data, size);\\n\\n  const int32_t width = dataProvider.ConsumeIntegralInRange(100, 1000);\\n  const int32_t height = dataProvider.ConsumeIntegralInRange(100, 1000);\\n\\n  if (!width || !height || width > 10000 || height > 10000)\\n    return 0;\\n\\n  ScopeSplashBitmap bmp(new SplashBitmap(width, height, 1, splashModeRGB8, false, false, NULL));\\n  ScopeSplash splash(new Splash(bmp.s, false, NULL));\\n  ScopeSplashOutputDev splashOut(new SplashOutputDev(splashModeRGB8, 4, false, NULL, true));\\n\\n  double x = dataProvider.ConsumeFloatingPoint<double>();\\n  double y = dataProvider.ConsumeFloatingPoint<double>();\\n  double dx = dataProvider.ConsumeFloatingPoint<double>();\\n  double dy = dataProvider.ConsumeFloatingPoint<double>();\\n  double originX = dataProvider.ConsumeFloatingPoint<double>();\\n  double originY = dataProvider.ConsumeFloatingPoint<double>();\\n  CharCode code = dataProvider.ConsumeIntegral<CharCode>();\\n  std::string str = dataProvider.ConsumeRandomLengthString(10);\\n  Unicode *u = NULL;\\n  if (str.size() != 0){\\n    u = new Unicode[str[0]];\\n    for(size_t i=1;i<str.size();i++){\\n      u[i]=str[i];\\n    }\\n  }\\n  GBool invisible = dataProvider.ConsumeBool();\\n  GBool fill = dataProvider.ConsumeBool();\\n  GBool stroke = dataProvider.ConsumeBool();\\n\\n  SplashFont* font = splashOut.s->getCurrentFont();\\n  double* mat = font->getMatrix();\\n  ScopeGfxState state(new GfxState(72.0, 72.0, nullptr, 0, gTrue));\\n\\n  splashOut.s->drawChar(state.s, x, y, dx, dy,\\n               originX, originY,\\n               code, str.size(), u, 1,\\n               invisible, fill,\\n               stroke);\\n  splashOut.s->drawChar(state.s, x, y, dx, dy,\\n               originX, originY,\\n               code, str.size(), u, 1,\\n               invisible, stroke,\\n               fill);\\n  splashOut.s->drawChar(state.s, x, y, dx, dy,\\n               originX, originY,\\n               code, 1+2*str.size(), u, 1,\\n               fill, stroke,\\n               invisible);\\n\\n  if (u){\\n    delete[] u;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n#include <algorithm>\\n\\n#include \"CharTypes.h\"\\n#include \"FontEncodingTables.h\"\\n#include \"PreScanOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"SplashFont.h\"\\n#include \"GfxState.h\"\\n#include \"Splash.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  int up;\\n  // auto font_loc = font_type_to_loc(stream.ConsumeBytes<unsigned char>(1).data()[0], up);\\n  // The function 'font_type_to_loc' is not declared in this scope. We need to declare it or include the relevant library.\\n  // For now, we will comment this line and initialize font_loc to nullptr.\\n  FontLoc* font_loc = nullptr;\\n  Ref ref;\\n  ref.gen = stream.ConsumeIntegral<int>();\\n  ref.num = stream.ConsumeIntegral<int>();\\n\\n  if (font_loc == nullptr) {\\n    return 0;\\n  }\\n\\n  PDFRectangle box;\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double w = stream.ConsumeFloatingPoint<double>();\\n  double h = stream.ConsumeFloatingPoint<double>();\\n  box.x1 = std::min(x, x + w);\\n  box.x2 = std::max(x, x + w);\\n  box.y1 = std::min(y, y + h);\\n  box.y2 = std::max(y, y + h);\\n  GfxFont* font = GfxFont::makeFont(nullptr, \"myfont\", ref, font_loc->font_type, new Dict(nullptr), font_loc);\\n\\n  SplashColor color;\\n  color[0] = color[1] = color[2] = 0;\\n  SplashColorPtr color_ptr = color;\\n  // SplashOutputDev splash(splashModeRGB8, 4, gFalse, color_ptr, gTrue, gFalse, nullptr);\\n  // The SplashOutputDev constructor takes at most 6 arguments, but 7 were provided. We need to remove the last argument.\\n  SplashOutputDev splash(splashModeRGB8, 4, gFalse, color_ptr, gTrue, gFalse);\\n  // GfxState* state = new GfxState(72.0, 72.0, &box, 0, gTrue, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0);\\n  // The GfxState constructor takes 5 arguments, but 11 were provided. We need to remove the extra arguments.\\n  GfxState* state = new GfxState(72.0, 72.0, &box, 0, gTrue);\\n  state->setFont(font, 12.0);\\n  splash.startDoc(nullptr);\\n  // splash.startPage(0, state, nullptr);\\n  // The 'startPage' function takes 2 arguments, but 3 were provided. We need to remove the last argument.\\n  splash.startPage(0, state);\\n  \\n  Unicode u = stream.ConsumeIntegral<Unicode>();\\n  int z = stream.ConsumeIntegral<int>();\\n  double n = stream.ConsumeFloatingPoint<double>();\\n  double yF = stream.ConsumeFloatingPoint<double>();\\n  double hF = stream.ConsumeFloatingPoint<double>();\\n  double wF = stream.ConsumeFloatingPoint<double>();\\n  double xF = stream.ConsumeFloatingPoint<double>();\\n  unsigned int charCode = stream.ConsumeIntegral<CharCode>();\\n  int m = stream.ConsumeIntegral<int>();\\n  int nzz = stream.ConsumeIntegral<int>();\\n\\n  splash.drawChar(state, \\n               xF, yF, wF, hF,\\n               n, m, charCode, z, \\n               &u, nzz, \\n               gTrue, gTrue, gTrue);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}