{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "The error messages indicate that the linker is unable to find the definitions for several methods in the FoFiTrueType, FoFiType1C, FoFiType1, and FoFiIdentifier classes. These classes are part of the Xpdf library.\\n\\nThe problem is likely that the Xpdf library is not being correctly linked during the build process. This could be due to a missing or incorrect library path, or the library may not have been built correctly.\\n\\nTo fix this issue, you need to ensure that the Xpdf library is correctly built and linked. This is typically done in the build configuration or makefile.\\n\\nUnfortunately, without access to the build configuration or makefile, it's not possible to provide a specific solution. However, here are some general steps you can take:\\n\\n1. Ensure that the Xpdf library is correctly built. You may need to manually build the library, or there may be a script or command provided to do this.\\n\\n2. Check the build configuration or makefile for your fuzzing harness. There should be a line that specifies the Xpdf library for linking. This might look something like `-lXpdf` or `LIBS += -lXpdf`.\\n\\n3. Ensure that the path to the Xpdf library is correctly specified in the build configuration or makefile. This might look something like `-L/path/to/xpdf/lib` or `LIBPATH += /path/to/xpdf/lib`.\\n\\n4. If you're still having issues, check the documentation for the Xpdf library and your build system. There may be additional steps required to correctly build and link the library.\\n\\nPlease note that the exact syntax and commands may vary depending on your build system and the structure of your project.",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\n#include \"GString.h\"\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"Splash.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  SplashColor color = {0, 0, 0, 1};\\n  SplashOutputDev splashOut(splashModeCMYK8, 4, gFalse, color);\\n  double dx = 100.0, dy = 100.0;\\n  GfxPath dummyPath(gFalse, dx, dy, nullptr, 0, 0);\\n  PDFRectangle rect(dx, dy, dx+1, dy+1);\\n  GfxState *state = new GfxState(dx, dy, &rect, 0, gTrue);\\n  FuzzedDataProvider provider(data, size);\\n\\n  double x = provider.ConsumeFloatingPoint<double>();\\n  double y = provider.ConsumeFloatingPoint<double>();\\n  double dx2 = provider.ConsumeFloatingPoint<double>();\\n  double dy2 = provider.ConsumeFloatingPoint<double>();\\n  double originX = provider.ConsumeFloatingPoint<double>();\\n  double originY = provider.ConsumeFloatingPoint<double>();\\n  \\n  auto buffer = provider.ConsumeRemainingBytes<char>();\\n\\n  GString str(buffer.data(), buffer.size());\\n  GBool adjust = gTrue;\\n  size_t len_chars = str.getLength();\\n  \\n  for (int i = 0; i < len_chars-1; i += 2) {\\n    if (provider.remaining_bytes() == 0) break;\\n    CharCode code = provider.ConsumeIntegral<CharCode>();\\n    Unicode *u = (Unicode*)gmallocn(2, sizeof(Unicode)); // Only GoLexer occupies heap memory\\n    if (u == nullptr) {return 1;} \\n    u[0] = (Unicode)buffer.data()[i];\\n    u[1] = (Unicode)buffer.data()[i+1];\\n\\n    splashOut.drawChar(state, x, y, dx2, dy2, originX, originY, code, 2,\\n                       u, str.getChar(code), adjust, adjust, adjust);\\n\\n    gfree(u);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}