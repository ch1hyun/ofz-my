{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Declare and initialize max errno\\nconst enum http_errno max_valid_http_errno = HPE_PAUSED;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size != sizeof(int)) {\\n        return 0;\\n    }\\n\\n    const int http_error = *((int*)data);\\n\\n    // Calling the function under fuzzing\\n    if ((http_error >= 0) && (http_error <= max_valid_http_errno)) {\\n        const char* description = http_errno_description((enum http_errno)http_error);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern const char * http_errno_description(enum http_errno);\\n\\nconst int max_valid_http_errno = HPE_PAUSED;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \tif (size != sizeof(int)) {\\n    \treturn 0;\\n  \t}\\n\\n  \tint http_error = *((int*)data);\\n\\n  \tif (http_error >= 0 && http_error <= max_valid_http_errno) {\\n    \tconst char* description = http_errno_description(http_error);\\n  \t}\\n\\n  \treturn 0;\\n}",
        "model": ""
    }

    ]
}