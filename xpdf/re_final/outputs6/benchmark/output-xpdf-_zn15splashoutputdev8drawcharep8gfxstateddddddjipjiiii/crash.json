{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFRectangle.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  double hDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n  PDFRectangle pageBox;\\n  int rotateA = fuzzed_data.ConsumeIntegral<int>();\\n  GBool upsideDown = fuzzed_data.ConsumeBool();\\n  GfxState *state = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n  double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n  Unicode *u = new Unicode[nBytes];\\n  int uLen = fuzzed_data.ConsumeIntegral<int>();\\n  GBool charExists = fuzzed_data.ConsumeBool();\\n  GBool dRight = fuzzed_data.ConsumeBool();\\n  GBool dDown = fuzzed_data.ConsumeBool();\\n\\n  SplashColorMode colorMode = static_cast<SplashColorMode>(fuzzed_data.ConsumeIntegral<int>());\\n  int bitmapRowPad = fuzzed_data.ConsumeIntegral<int>();\\n  GBool reverseVideo = fuzzed_data.ConsumeBool();\\n  SplashColor paperColor;\\n  GBool bitmapTopDown = fuzzed_data.ConsumeBool();\\n  GBool allowAntialias = fuzzed_data.ConsumeBool();\\n\\n  SplashOutputDev *splashOutputDev = new SplashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n  splashOutputDev->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, charExists, dRight, dDown);\\n\\n  delete state;\\n  delete[] u;\\n  delete splashOutputDev;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Replace the non-existent PDFRectangle.h with PDFDoc.h\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(double) * 6 + sizeof(CharCode) + sizeof(int) + sizeof(Unicode) + sizeof(GBool) * 3) {\\n        return 0;\\n    }\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    double hDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double vDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n    PDFRectangle pageBox;\\n    int rotateA = fuzzed_data.ConsumeIntegral<int>();\\n    GBool upsideDown = fuzzed_data.ConsumeBool();\\n    GfxState *state = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n    CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n    int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n    Unicode *u = new Unicode[fuzzed_data.remaining_bytes()];\\n    GBool charExists = fuzzed_data.ConsumeBool();\\n    GBool isVertical = fuzzed_data.ConsumeBool();\\n    GBool doAdjustSpacing = fuzzed_data.ConsumeBool();\\n    SplashColorMode colorModeA = static_cast<SplashColorMode>(fuzzed_data.ConsumeIntegral<int>());\\n    int bitmapRowPadA = fuzzed_data.ConsumeIntegral<int>();\\n    GBool reverseVideoA = fuzzed_data.ConsumeBool();\\n    SplashColorPtr paperColorA = nullptr;\\n    GBool bitmapTopDownA = fuzzed_data.ConsumeBool();\\n    GBool allowAntialiasA = fuzzed_data.ConsumeBool();\\n    SplashOutputDev dev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n    dev.drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, nBytes, charExists, isVertical, doAdjustSpacing);\\n    delete[] u;\\n    delete state;\\n    return 0;\\n}",
        "model": ""
    }

    ]
}