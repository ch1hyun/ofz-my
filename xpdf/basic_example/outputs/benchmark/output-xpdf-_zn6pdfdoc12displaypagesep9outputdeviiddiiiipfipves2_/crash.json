{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <limits>\\n#include \"PDFDoc.h\"\\n#include \"GString.h\"\\n#include \"OutputDev.h\"\\n#include \"GlobalParams.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  virtual GBool upsideDown() { return gTrue; }\\n  virtual GBool useDrawChar() { return gTrue; }\\n  virtual GBool interpretType3Chars() { return gTrue; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1)\\n    return 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n  \\n  int num1 = stream.ConsumeIntegral<int>();\\n  int num2 = stream.ConsumeIntegral<int>();\\n  double num3 = stream.ConsumeFloatingPoint<double>();\\n  double num4 = stream.ConsumeFloatingPoint<double>();\\n  int num5 = stream.ConsumeIntegral<int>();\\n  GBool bool1 = stream.ConsumeBool();\\n  GBool bool2 = stream.ConsumeBool();\\n  GBool bool3 = stream.ConsumeBool();\\n  \\n  if (!stream.remaining_bytes()) {\\n    return 0;\\n  }\\n\\n  std::vector<uint8_t> remainingData = stream.ConsumeRemainingBytes<uint8_t>();\\n  \\n  // Create a dummy OutputDev object instead of casting from remainingData\\n  MyOutputDev output;\\n\\n  GString *fileNameA = new GString(\"dummy\");\\n\\n  // Initialize GlobalParams\\n  globalParams = new GlobalParams();\\n\\n  PDFDoc doc(fileNameA);\\n  doc.displayPages(&output, num1, num2, num3, num4, num5, bool1, bool2, bool3, gFalse, nullptr);\\n\\n  delete fileNameA;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/goo/gfile.h\"\\n#include \"/src/xpdf-4.05/goo/gmem.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n#include \"/src/xpdf-4.05/goo/Trace.h\"\\n#include \"/src/xpdf-4.05/xpdf/Zoox.h\"\\n#include \"OutputDev.h\"\\n#include \"/src/freetype/include/freetype/ftwinfnt.h\"\\n#include \"/src/freetype/include/freetype/freetype.h\"\\n#include \"/work/prefix/include/freetype2/freetype/freetype.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  bool gBool1 = stream.ConsumeBool();\\n  bool gBool2 = stream.ConsumeBool();\\n  bool gBool3 = stream.ConsumeBool();\\n\\n  int int1 = stream.ConsumeIntegral<int>();\\n  int int2 = stream.ConsumeIntegral<int>();\\n  int int3 = stream.ConsumeIntegral<int>();\\n\\n  double double1 = stream.ConsumeFloatingPoint<double>();\\n  double double2 = stream.ConsumeFloatingPoint<double>();\\n\\n  std::string str1 = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange(0, 10));\\n  OutputDev *outputDev = new OutputDev(str1.c_str());\\n\\n  std::vector<uint8_t> bytes = stream.ConsumeRemainingBytes();\\n  void *data_ptr = bytes.data();\\n\\n  PDFDoc doc;\\n  doc.displayPages(outputDev, int2, int3, double1, double2, int1, gBool1, gBool2, gBool3, data_ptr);\\n\\n  delete outputDev;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}