{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"Stream.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    GfxState gfxState(nullptr, gFalse);\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode* u = nullptr;\\n    int uLen = stream.ConsumeIntegral<int>();\\n    GBool rotated = stream.ConsumeBool();\\n    GBool uRightToLeft = stream.ConsumeBool();\\n    GBool uVertical = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeRGB8, 0, gFalse, nullptr, gTrue, gTrue);\\n    splashOutputDev.startDoc(nullptr);\\n    splashOutputDev.startPage(0, nullptr);\\n    splashOutputDev.drawChar(&gfxState, x, y, dx, dy, ox, oy, code, nBytes, u, uLen, rotated, uRightToLeft, uVertical);\\n    splashOutputDev.endPage();\\n    splashOutputDev.endDoc();\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    GfxState gfxState(nullptr, gTrue); // Initialize GfxState object with nullptr and copyPath as true\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *u = nullptr;\\n    int uLen = stream.ConsumeIntegral<int>();\\n    GBool rotated = stream.ConsumeBool();\\n    GBool upright = stream.ConsumeBool();\\n    GBool fill = stream.ConsumeBool();\\n\\n    // Call drawChar function with initialized parameters\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 0, gFalse, nullptr, 0, gTrue, gTrue); // Initialize SplashOutputDev object with additional parameters\\n    splashOutputDev.drawChar(&gfxState, x, y, dx, dy, ox, oy, charCode, nBytes, u, uLen, rotated, upright, fill);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}