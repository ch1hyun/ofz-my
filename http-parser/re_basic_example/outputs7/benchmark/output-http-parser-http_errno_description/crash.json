{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <http_parser.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  enum http_errno err = (enum http_errno)(data[0] % (HTTP_ERRNO_MAX - 1));\\n  const char* description = http_errno_description(err);\\n\\n  // Ignore the calculated description, it's not necessary for fuzzing\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <http_parser.h>\\n#include <string.h>\\n\\nconst char *http_errno_description(enum http_errno err);\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if(Size < 1) {\\n    return 0;\\n  }\\n\\n  enum http_errno err = (enum http_errno)Data[0];\\n\\n  if (err >= 0 && err < HTTP_ERRNO_MAX) {\\n    const char *desc = http_errno_description(err);\\n    if (desc == NULL) {\\n      return 0;\\n    }\\n  }\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif\\n/* The crash was happening because the code was not checking if the value of 'err' is within the valid range of 'http_errno' before calling 'http_errno_description'. The fix is to add a check to ensure 'err' is within the valid range of 'http_errno'. */",
        "model": ""
    }

    ]
}