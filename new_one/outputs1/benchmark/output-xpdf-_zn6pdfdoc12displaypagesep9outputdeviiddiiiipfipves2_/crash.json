{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\" // Include the header file for OutputDev\\n\\nclass CustomOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; } // Implement pure virtual method upsideDown\\n    GBool useDrawChar() override { return false; } // Implement pure virtual method useDrawChar\\n    GBool interpretType3Chars() override { return false; } // Implement pure virtual method interpretType3Chars\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    CustomOutputDev* outputDev = new CustomOutputDev(); // Initialize CustomOutputDev object\\n    int page = stream.ConsumeIntegral<int>(); // Consume an integer for page parameter\\n    int numPages = stream.ConsumeIntegral<int>(); // Consume an integer for numPages parameter\\n    double scale = stream.ConsumeFloatingPoint<double>(); // Consume a floating point number for scale parameter\\n    double rotation = stream.ConsumeFloatingPoint<double>(); // Consume a floating point number for rotation parameter\\n    int startX = stream.ConsumeIntegral<int>(); // Consume an integer for startX parameter\\n    GBool clip = stream.ConsumeBool(); // Consume a boolean for clip parameter\\n    GBool reverseVideo = stream.ConsumeBool(); // Consume a boolean for reverseVideo parameter\\n    GBool allowSubsampling = stream.ConsumeBool(); // Consume a boolean for allowSubsampling parameter\\n\\n    // Call the function-under-test PDFDoc::displayPages\\n    GString* fileName = new GString(\"dummy.pdf\"); // Create a dummy file name\\n    PDFDoc pdfDoc(fileName); // Create an instance of PDFDoc with the dummy file name\\n    pdfDoc.displayPages(outputDev, page, numPages, scale, rotation, startX, clip, reverseVideo, allowSubsampling, nullptr, nullptr);\\n\\n    // Cleanup allocated memory\\n    delete fileName;\\n    delete outputDev;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"GlobalParams.h\" // Include GlobalParams header\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(0x12345678); // Example address\\n    int page1 = stream.ConsumeIntegral<int>();\\n    int page2 = stream.ConsumeIntegral<int>();\\n    double zoomX = stream.ConsumeFloatingPoint<double>();\\n    double zoomY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool smooth = static_cast<GBool>(stream.ConsumeBool());\\n    GBool antialias = static_cast<GBool>(stream.ConsumeBool());\\n    GBool textSmoothing = static_cast<GBool>(stream.ConsumeBool());\\n    void* abortCheckCbkData = nullptr; // Change 'abort' to 'abortCheckCbkData'\\n\\n    // Create an instance of PDFDoc\\n    GString* fileName = new GString(\"dummy.pdf\"); // Provide a dummy file name\\n    PDFDoc pdfDoc(fileName);\\n\\n    // Call the function-under-test using the instance\\n    GlobalParams params; // Create an instance of GlobalParams\\n    pdfDoc.displayPages(outputDev, page1, page2, zoomX, zoomY, rotation, smooth, antialias, textSmoothing, nullptr, abortCheckCbkData); // Pass 'abortCheckCbkData' instead of 'data'\\n\\n    delete fileName; // Clean up allocated memory\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}