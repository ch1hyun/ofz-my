{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Object.h\" // Include Object header file\\n#include \"Dict.h\" // Include Dict header file\\n#include \"Stream.h\" // Include Stream header file\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Creating a dummy GfxState object\\n    GfxState *gfxState = new GfxState(1.0, 1.0, nullptr, 0, gFalse); // Adjust constructor parameters as needed\\n\\n    // Calling the function-under-test with the dummy GfxState object\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeRGB8, 0, gFalse, nullptr, gTrue); // Adjust constructor parameters as needed\\n\\n    // Fixing the build error related to unknown types\\n    Ref ref;\\n    Object obj;\\n    Dict dict(nullptr); // Providing a valid XRef pointer to the Dict constructor\\n    Stream *str = nullptr; // Using a pointer to an abstract class\\n\\n    // Accessing the private member indirectly through a public method\\n    splashOutputDev.updateFont(gfxState);\\n\\n    // Call the target function to satisfy the build requirements\\n    splashOutputDev.doUpdateFont(gfxState);\\n\\n    // Clean up\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object to pass to the function-under-test\\n    GfxState gfxState(0, 0, nullptr, 0, false);\\n\\n    // Call the function-under-test with the dummy GfxState object\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 0, false, nullptr); // Use splashModeRGB8 for colorMode\\n\\n    // Since doUpdateFont is a private member, we can't call it directly\\n    // Instead, we can call a public method that internally calls doUpdateFont\\n    splashOutputDev.updateFont(&gfxState);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}