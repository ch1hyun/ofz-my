{
    "samples": [

    {
        "benchmark": "output-tremor-ov_test",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.84",
        "coverage_diff": "0.0033208800332088003",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <fcntl.h>\\n#include <limits.h>\\n#include <ogg/ogg.h>\\n#include \"/src/tremor/ivorbisfile.h\"\\n#include <stdlib.h>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FILE *f;\\n  char filename[PATH_MAX];\\n  \\n  // Create temporary file\\n  snprintf(filename, sizeof(filename), \"/tmp/ov_test_fuzz.XXXXXX\");\\n  int fd = mkstemp(filename);\\n  \\n  if(fd == -1){\\n    return 0;\\n  }\\n\\n  write(fd, data, size);\\n  close(fd);\\n\\n  f = fopen(filename, \"rb\");\\n\\n  if(f == NULL){\\n    printf(\"File Error\\\n\");\\n    return -1;\\n  }\\n\\n  OggVorbis_File vf;\\n  \\n  if(ov_test(f, &vf, NULL, 0) == 0)\\n  {\\n    ov_test_open(&vf);\\n    ov_clear(&vf);\\n  }\\n  \\n  // Close and remove file\\n  fclose(f);\\n  remove(filename);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-tremor-ov_test",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.55",
        "coverage_diff": "0.0033208800332088003",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"ivorbisfile.h\"\\n#include <cstddef>\\n#include <cstdio>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n    \\n  FILE* tmp = tmpfile();\\n  std::string s = stream.ConsumeRemainingBytesAsString();\\n  fwrite(s.data(), 1, s.size(), tmp);\\n  rewind(tmp);\\n\\n  OggVorbis_File vf;\\n  int result = ov_test(tmp, &vf, NULL, 0);\\n\\n  if(result == 0) {\\n    ov_test_open(&vf);\\n  }\\n  fclose(tmp);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}