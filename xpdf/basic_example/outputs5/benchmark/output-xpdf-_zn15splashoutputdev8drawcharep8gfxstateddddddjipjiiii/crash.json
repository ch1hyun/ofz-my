{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"CharTypes.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"Ref.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    if (Size < 1) {\\n        return 0;\\n    }\\n    \\n    // Create an instance of SplashOutputDev\\n    SplashColorMode colorModeA = splashModeRGB8;\\n    int bitmapRowPadA = 4;\\n    GBool reverseVideoA = gFalse;\\n    SplashColor paperColorA;\\n    paperColorA[0] = paperColorA[1] = paperColorA[2] = paperColorA[3] = 0;\\n    SplashOutputDev *splashOutputDev = new SplashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA);\\n\\n    // Create an instance of GfxState\\n    double hDPIA = 72.0;\\n    double vDPIA = 72.0;\\n    PDFRectangle pageBox;\\n    int rotateA = 0;\\n    GBool upsideDown = gTrue;\\n    GfxState *gfxState = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n    // Create an instance of CharCode\\n    CharCode charCode = 0;\\n\\n    // Create an instance of Unicode\\n    Unicode *unicode = new Unicode[Size];\\n\\n    // Call the drawChar function\\n    splashOutputDev->drawChar(gfxState, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, charCode, 0, unicode, Size, gTrue, gTrue, gTrue);\\n\\n    // Cleanup\\n    delete splashOutputDev;\\n    delete gfxState;\\n    delete[] unicode;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"splash/SplashFont.h\"\\n#include \"PDFRectangle.h\" // Include the header file where 'PDFRectangle' is defined\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // initialize splashout\\n  SplashColor paperColor = { 0xff, 0xff, 0xff };\\n  SplashOutputDev *splashout = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n  splashout->startPage(0, NULL);\\n\\n  //initialize gfxstate\\n  double hDPI = 72.0;\\n  double vDPI = 72.0;\\n  int rotate = 0;\\n  GBool useMediaBox = gTrue;\\n  GBool crop = gTrue;\\n  GBool printing = gFalse;\\n  GBool reverseVideo = gFalse;\\n  \\n  int page = 0; // first page\\n  PDFRectangle box = { 0, 0, 200, 200 }; // arbitrary rectangle\\n  PDFRectangle *mediaBox = &box;\\n  PDFRectangle *cropBox = &box;\\n\\n  GfxState* state = new GfxState(hDPI, vDPI, mediaBox, rotate, useMediaBox);\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  CharCode c = stream.ConsumeIntegral<uint32_t>();\\n  int nByte = stream.ConsumeIntegralInRange<int>(1,4);\\n  GBool overwriteColor = stream.ConsumeBool();\\n  GBool strokeAdjust = stream.ConsumeBool();\\n  GBool dashing = stream.ConsumeBool();\\n\\n  Unicode * u = new Unicode[nByte];\\n  for (int i = 0; i < nByte; i++) {    \\n    u[i] = stream.ConsumeIntegral<uint32_t>();  \\n  }\\n\\n  splashout->drawChar(state, x, y, dx, dy, originX, originY, c, nByte, u, nByte, overwriteColor, strokeAdjust, dashing);\\n\\n  delete splashout;\\n  delete state;\\n  delete [] u;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}