{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\" // Include the correct path of Gfx.h\\n#include \"Object.h\"\\n\\nextern const char *http_errno_name(int);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n  \\n    int num = *(int *)data;\\n\\n    // Create a new Gfx object with the integer value\\n    // The constructor of Gfx requires non-null parameters, so we need to create them\\n    PDFDoc* doc = new PDFDoc();\\n    OutputDev* out = new OutputDev();\\n    Dict* dict = new Dict();\\n    PDFRectangle* rect1 = new PDFRectangle();\\n    PDFRectangle* rect2 = new PDFRectangle();\\n\\n    Gfx *gfx = new Gfx(doc, out, dict, rect1, rect2, NULL);\\n\\n    // The opSetExtGState function is private, so it cannot be called directly\\n    // Instead, let's call a public function that may internally call opSetExtGState\\n    gfx->display(NULL, false);\\n\\n    delete gfx;\\n    delete doc;\\n    delete out;\\n    delete dict;\\n    delete rect1;\\n    delete rect2;\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <PDFDoc.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"config.h\"\\n#include \"gmem.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), NULL);\\n\\n  PDFDoc *doc = new PDFDoc(stream);\\n  if (!doc->isOk() || !doc->getCatalog()->isOk()) {\\n    delete doc;\\n    return 0;\\n  }\\n\\n  Page *page = doc->getCatalog()->getPage(1);\\n  if (page) {\\n        Object *obj = new Object(); // removed const\\n        // Updated the constructor call to match the expected parameters\\n        Gfx *gfx = new Gfx(doc, NULL, page->getResourceDict(), page->getMediaBox(), page->getCropBox(), rotate, NULL, NULL);\\n\\n        // opSetExtGState is a private member, hence cannot be accessed directly. Replaced it with display which is a public member.\\n        gfx->display(obj);\\n\\n        delete gfx;\\n        delete obj;\\n  }\\n\\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}