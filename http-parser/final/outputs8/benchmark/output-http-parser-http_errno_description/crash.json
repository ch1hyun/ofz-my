{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.44",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size == 0)\\n    {\\n        return 0;\\n    }\\n    \\n    int num_errors = sizeof(enum http_errno);\\n    int idx = data[0] % num_errors;\\n\\n    // Call the function-under-test\\n    const char * description  = http_errno_description((enum http_errno) idx);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Define a safe range for http_errno enumeration\\n#define HTTP_ERRNO_MIN 0\\n#define HTTP_ERRNO_MAX 30\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < sizeof(int)){\\n        return 0;\\n    }\\n\\n  int http_error_raw;\\n  memcpy(&http_error_raw, data, sizeof(int));\\n\\n  http_error_raw = abs(http_error_raw) % (HTTP_ERRNO_MAX - HTTP_ERRNO_MIN + 1) + HTTP_ERRNO_MIN;\\n\\n  enum http_errno http_error = (enum http_errno) http_error_raw;\\n\\n  const char * description = http_errno_description(http_error);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}