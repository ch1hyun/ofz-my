{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.29",
        "coverage_diff": "0.00016243874705579772",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"libraw.h\"\\n\\nclass LibRawPublic : public LibRaw {\\npublic:\\n  using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  /* A bit is the smallest possible amount of memory - this minimizes the chances that we run out of memory when allocating the buffer. */\\n  uint32_t bufferSize = stream.ConsumeIntegralInRange<uint32_t>(1, size);\\n\\n  /* Start by defining and allocate our buffer using `std::vector<uint8_t>`. \\n  Vector ensures that we have a contiguous block of memory, and automatically handles freeing the memory when out of scope */\\n  std::vector<uint8_t> buffer(bufferSize);\\n  \\n  /* Then, create a LibRawPublic object. */\\n  LibRawPublic rawProcessor;\\n\\n  /* Next, call the `crxDecodePlane` function with the buffer pointer and size.\\n  The standard buffer.data() is guaranteed to return a pointer\\n  to a contiguous block of memory representing the contents of the buffer */\\n  rawProcessor.crxDecodePlane(buffer.data(), bufferSize);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw.h>\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  int MyCrxDecodePlane(void *p1, uint32_t p2) {\\n    if (p1 != nullptr) { // Check that p1 is not pointing to an invalid memory location\\n      return this->crxDecodePlane(p1, p2);\\n    }\\n    return 0;\\n  }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0)\\n    return 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  std::vector<uint8_t> param1 = stream.ConsumeBytes<uint8_t>(stream.remaining_bytes() / 2);\\n  if(param1.size() == 0) {\\n    return 0;\\n  }\\n\\n  uint32_t param2 = stream.ConsumeIntegral<uint32_t>();\\n\\n  MyLibRaw rawProcessor;\\n  if (!param1.empty()) { // Check that param1 is not empty\\n    rawProcessor.MyCrxDecodePlane(&param1[0], param2);\\n  }\\n  return 0;\\n}",
        "model": ""
    }

    ]
}