{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    LibRaw RawProcessor;\\n    RawProcessor.crxLoadDecodeLoop((void *)data, size);\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/libraw/libraw/libraw.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include <cstring>\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    // Initialize LibRaw image processor.\\n    MyLibRaw image_processor;\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // As we need two inputs, we'll divide the input into two roughly equally sized parts.\\n    size_t decodeLoopSize = fuzzed_data.remaining_bytes() > 1 ? fuzzed_data.ConsumeIntegralInRange<uint32_t>(1, size / 2) : 1;\\n\\n    // Allocate memory for the decodeLoop\\n    void* decodeLoopVoid = operator new(decodeLoopSize);\\n\\n    // Populate the decodeLoop memory with bytes from the fuzzer.\\n    std::vector<uint8_t> decodeLoopBytes = fuzzed_data.ConsumeBytes<uint8_t>(decodeLoopSize);\\n    if (decodeLoopBytes.empty()) {\\n        operator delete(decodeLoopVoid);\\n        return 0;\\n    }\\n    memcpy(decodeLoopVoid, decodeLoopBytes.data(), decodeLoopSize);\\n\\n    // Generate a random unsigned integer within the appropriate range using the remaining bytes.\\n    int fuzzed_value = fuzzed_data.remaining_bytes() > 0 ? fuzzed_data.ConsumeIntegral<int>() : 0;\\n\\n    // Call the function under test.\\n    image_processor.crxLoadDecodeLoop(decodeLoopVoid, fuzzed_value);\\n\\n    // Cleanup\\n    operator delete(decodeLoopVoid);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}