{
    "samples": [

    {
        "benchmark": "output-tremor-ov_open",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <string.h>\\n#include <assert.h>\\n#include <errno.h>\\n#include <stdio.h>\\n\\n#include \"ivorbisfile.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    FuzzedDataProvider stream(Data, Size);\\n    \\n    uint16_t bufferSize = stream.ConsumeIntegral<uint16_t>();\\n    std::string buffer = stream.ConsumeRemainingBytesAsString();\\n    if(buffer.empty())\\n        return 0;\\n\\n    FILE *input = fmemopen((void*)(buffer.c_str()), bufferSize, \"r\");\\n    OggVorbis_File vf;\\n\\n    int result = ov_open(input,&vf,NULL,bufferSize);\\n    if (result == 0)\\n        ov_clear(&vf);\\n        \\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-tremor-ov_open",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n\\n#include \"ivorbisfile.h\"\\n#include \"vorbisfile.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  if (size <= 16) {\\n    return 0;\\n  }\\n\\n  std::string initial = stream.ConsumeBytesAsString(16);\\n  long ibytes = static_cast<long>(size - 16);\\n  std::vector<uint8_t> data_copy(data + 16, data + size);\\n  \\n  FILE* tmpfile = fmemopen(data_copy.data(), ibytes, \"r\");\\n  \\n  if (tmpfile == nullptr) {\\n    return 0;\\n  }\\n\\n  OggVorbis_File vf;\\n  \\n  int err = ov_open_callbacks(tmpfile, &vf, nullptr, 0, OV_CALLBACKS_DEFAULT);\\n  if (err < 0) {\\n    fclose(tmpfile);\\n    return 0;\\n  }\\n\\n  ov_clear(&vf);\\n  fclose(tmpfile);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}