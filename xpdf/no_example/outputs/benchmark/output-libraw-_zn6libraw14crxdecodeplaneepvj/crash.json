{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw.h>\\n#include <vector>\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < sizeof(uint32_t))\\n    return 0;\\n\\n  FuzzedDataProvider dataProvider(data, size);\\n\\n  // Creating a MyLibRaw instance\\n  MyLibRaw processor;\\n  uint32_t planeSize = dataProvider.ConsumeIntegral<uint32_t>();\\n\\n  //Initialize an array\\n  std::vector<uint8_t> buffer(planeSize);\\n\\n  // Populate the buffer\\n  if (buffer.size() > 0)\\n    dataProvider.ConsumeData(buffer.data(), buffer.size());\\n\\n  // Call the function-under-test\\n  if (buffer.size() > 0) {\\n    if (buffer.data() != nullptr) {\\n      try {\\n        // Ensure that the planeSize is not larger than the buffer size\\n        planeSize = std::min(planeSize, static_cast<uint32_t>(buffer.size()));\\n        int result = processor.crxDecodePlane(buffer.data(), planeSize);\\n      } catch (...) {\\n        return 0;\\n      }\\n    }\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass FuzzRawProcessor : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    if(size < sizeof(uint32_t))\\n        return 0;\\n    FuzzedDataProvider stream(data, size);\\n    uint32_t band_length = stream.ConsumeIntegral<uint32_t>();\\n    std::vector<uint8_t> imgData = stream.ConsumeRemainingBytes<uint8_t>();\\n    if(band_length > imgData.size())\\n        band_length = imgData.size();\\n\\n    FuzzRawProcessor RawProcessor;\\n    if(imgData.size() > 0) { // Ensure that imgData is not empty before decoding\\n        RawProcessor.open_buffer(imgData.data(), imgData.size());\\n        // Allocate memory for the decoded image data\\n        void* decodedData = malloc(band_length);\\n        if(decodedData == NULL)\\n            return 0;\\n        RawProcessor.crxDecodePlane(decodedData, band_length);\\n        free(decodedData);\\n    }\\n    \\n    return 0;\\n}",
        "model": ""
    }

    ]
}