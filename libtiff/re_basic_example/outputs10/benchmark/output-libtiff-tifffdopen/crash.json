{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "8.93",
        "coverage_diff": "0.006038282712396595",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstring>\\n#include <tiffio.h>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a temporary file and write the data to it.\\n  char filename[] = \"/tmp/libtiff_fuzz.XXXXXX\";\\n  int fd = mkstemp(filename);\\n  if (fd < 0) {\\n    return 0;\\n  }\\n  auto bytes_to_write = stream.ConsumeRemainingBytes<unsigned char>();\\n  write(fd, bytes_to_write.data(), bytes_to_write.size());\\n  lseek(fd, 0, SEEK_SET);\\n\\n  // Call the function-under-test\\n  TIFF *tif = TIFFFdOpen(fd, filename, \"r\");\\n  \\n  // Always remember to close file descriptors\\n  close(fd);\\n  \\n  // Cleanup temporary file\\n  remove(filename);\\n\\n  if (tif) {\\n    TIFFClose(tif);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.58",
        "coverage_diff": "0.0026769720024958235",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 4) {\\n    return 0;\\n  }\\n  FuzzedDataProvider stream(data, size);\\n  const std::string filename = stream.ConsumeRandomLengthString();\\n  const std::string mode = stream.ConsumeRandomLengthString();\\n  TIFF *tif = TIFFFdOpen(0, filename.c_str(), mode.c_str());\\n  if (tif != nullptr)\\n    TIFFClose(tif);\\n  return 0;\\n  \\n}",
        "model": ""
    }

    ]
}