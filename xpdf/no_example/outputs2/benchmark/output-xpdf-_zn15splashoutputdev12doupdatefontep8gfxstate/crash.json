{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n      \\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  Object info, xfa;\\n  Object *acroForm;\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = NULL;\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(stream);\\n    splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n\\n    splashOut->startDoc(doc->getXRef());\\n    for (size_t i = 1; i <= doc->getNumPages(); ++i) {\\n      doc->displayPage(splashOut, i, hdpi, vdpi, rotate, useMediaBox, crop, printing);\\n      GfxState state(hdpi, vdpi, doc->getCatalog()->getPage(i)->getResourceDict(), rotate, gFalse);\\n      splashOut->doUpdateFont(&state); // Fixed line: Call the function doUpdateFont instead of updateFont\\n    }\\n    (void)splashOut->getBitmap();\\n\\n  } catch (...) {\\n  }\\n\\n  delete doc;\\n  delete splashOut;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"Gfx.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiType1C.h\" // Corrected the path\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fdp(data, size);\\n\\n    // SplashColor is an array of three guchar (unsigned char in gtypes.h) elements.\\n    SplashColor splashColor;\\n    for (int i = 0; i < 3; i++) {\\n        splashColor[i] = fdp.ConsumeIntegral<unsigned char>();\\n    }\\n\\n    // Construct a new SplashOutputDev object.\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, splashColor, gTrue);\\n\\n    // Create a dummy SplashFont.\\n    SplashFont *font = nullptr;\\n\\n    // Create a dummy GfxState object.\\n    GfxState *state = new GfxState(72.0, 72.0, nullptr, 0, gTrue);\\n\\n    // Call doUpdateFont.\\n    splashOut->updateFont(state);\\n\\n    delete state;\\n    delete splashOut;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}