{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GlobalParams.h\" // Include the header file for GlobalParams\\n\\n// Define the unknown type DW_TAG_subroutine_typeInfinite_loop to avoid build error\\ntypedef struct {\\n    int dummy; // Define a dummy member for demonstration\\n} DW_TAG_subroutine_typeInfinite_loop;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(0x12345678); // Example address, not NULL\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool crop = static_cast<GBool>(stream.ConsumeBool());\\n    GBool useMediaBox = static_cast<GBool>(stream.ConsumeBool());\\n    GBool useCropBox = static_cast<GBool>(stream.ConsumeBool());\\n    DW_TAG_subroutine_typeInfinite_loop* loop = reinterpret_cast<DW_TAG_subroutine_typeInfinite_loop*>(0x87654321); // Example address, not NULL\\n    void* customData = reinterpret_cast<void*>(0xABCDABCD); // Example address, not NULL\\n\\n    // Create an instance of PDFDoc with a dummy filename\\n    GString dummyFilename = GString(\"dummy.pdf\");\\n    GlobalParams *globalParams = new GlobalParams();\\n    PDFDoc pdfDoc(&dummyFilename, globalParams); // Using the constructor that takes a GString pointer and GlobalParams pointer\\n\\n    // Call the function-under-test using the instance\\n    pdfDoc.displayPages(outputDev, page, numPages, scaleX, scaleY, rotation, crop, useMediaBox, useCropBox, nullptr, customData);\\n\\n    delete globalParams;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "triage": "PROJECT",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    OutputDev* dev = nullptr;\\n    int page_num1 = stream.ConsumeIntegral<int>();\\n    int page_num2 = stream.ConsumeIntegral<int>();\\n    double zoom_x = stream.ConsumeFloatingPoint<double>();\\n    double zoom_y = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool use_media_box = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n    void* abort = nullptr;\\n    void* data_ptr = nullptr;\\n\\n    GBool (*abortCheckCbk)(void *) = nullptr;\\n\\n    GString* fileName = new GString(\"dummy.pdf\"); // Using a dummy file name for fuzzing\\n    PDFDoc pdfDoc(fileName); // Using the constructor that takes a GString pointer as the file name\\n    pdfDoc.displayPages(dev, page_num1, page_num2, zoom_x, zoom_y, rotation, use_media_box, crop, printing, abortCheckCbk, data_ptr);\\n\\n    delete fileName; // Freeing the allocated memory for the dummy file name\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}