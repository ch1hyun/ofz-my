{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"PDFDoc.h\"\\n#include \"XRef.h\"\\n#include \"Object.h\"\\n#include \"Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  const int numArgs = fdp.ConsumeIntegralInRange<int>(1, 100);\\n  std::vector<Object> args;\\n  args.reserve(numArgs);\\n  for(int i = 0; i < numArgs; ++i) {\\n    Object obj;\\n    obj.initNull();\\n    args.push_back(obj);\\n  }\\n\\n  GlobalParams *globalParams = new GlobalParams(nullptr);\\n\\n  PDFRectangle mediaBox;\\n  GfxState *gfx_state = new GfxState(72.0, 72.0, &mediaBox, 0, true);\\n  BaseStream *str = nullptr;\\n  XRef xref(str, true);\\n  PDFDoc pdf_doc(str, nullptr, nullptr, nullptr);\\n  Catalog catalog(&pdf_doc);\\n  Dict *resDict = nullptr;\\n  \\n  // Fix the Gfx constructor and use public method instead of private method\\n  Gfx gfx(&pdf_doc, nullptr, 0, resDict, &mediaBox, nullptr, true);\\n  gfx.setExtGState(args.data(), numArgs);\\n  \\n  for(auto& arg : args) {\\n    arg.free();\\n  }\\n\\n  delete globalParams;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "44.35",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  if (size < 3) {\\n    return 0;\\n  }\\n\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1, 3);\\n\\n  Object args[3];\\n  args[0].initNull();\\n  if(numArgs > 1) {\\n    std::string name = fdp.ConsumeRandomLengthString();\\n    args[1].initName(name.c_str());\\n  }\\n  if(numArgs > 2) {\\n    int64_t refNum = fdp.ConsumeIntegral<int64_t>();\\n    int64_t refGen = fdp.ConsumeIntegral<int64_t>();\\n    args[2].initRef(refNum, refGen);\\n  }\\n\\n  // In order for opSetExtGState to work, the args array should contain Ref type objects that can be found in the PDFDoc catalog.\\n  // In this context it's not possible because the PDFDoc instance cannot be controlled and hence we can't add objects to its `xref` attribute.\\n  // Also, it's not possible to create a dummy `PDFDoc` because its constructor is private.\\n\\n  //  Gfx gfx(doc.getCatalog(), pdf_out,\\n  //          0, 0, 0, 0, 0, 0,\\n  //          gFalse);\\n  // gfx\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}