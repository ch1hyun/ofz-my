{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.03",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"GString.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"SplashBitmap.h\"\\n#include \"Splash.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  double hdpi = stream.ConsumeFloatingPoint<double>();\\n  double vdpi = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useCropBox = stream.ConsumeBool();\\n  GBool crop = stream.ConsumeBool();\\n  GBool printing = stream.ConsumeBool();\\n  std::vector<char> payload = stream.ConsumeRemainingBytes<char>();\\n\\n  if (payload.empty()) {\\n    return 0;\\n  }\\n\\n  GString filename(payload.data(), payload.size());\\n  GString null_pass;\\n  PDFDoc *doc = new PDFDoc(&filename, &null_pass, &null_pass);\\n\\n  if(!doc->isOk()) {\\n    delete doc;\\n    return 0;\\n  }\\n\\n  SplashColor paperColor;\\n  paperColor[0] = 255;\\n  paperColor[1] = 255;\\n  paperColor[2] = 255;\\n  SplashOutputDev* splashOut = new SplashOutputDev(splashModeBGR8, 4, false, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n\\n  if(doc->isLinearized()) {\\n    doc->displayPage(splashOut, 1, 72, 72, 0, useCropBox, crop, printing);\\n  } else {\\n    doc->displayPages(splashOut, 1, doc->getNumPages(), 72, 72, 0, useCropBox, crop, printing);\\n  }\\n\\n  delete splashOut;\\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"Object.h\"\\n#include \"GString.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n\\n#include \"Annot.h\"\\n#include \"Catalog.h\"\\n#include \"ErrorCodes.h\"\\n#include \"GlobalParams.h\"\\n#include \"Link.h\"\\n#include \"OptionalContent.h\"\\n#include \"PDFDocEncoding.h\"\\n#include \"Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/JPXStream.h\"\\n#include \"/src/xpdf-4.05/xpdf/JBIG2Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream-CCITT.h\"\\n#include \"/src/xpdf-4.05/xpdf/TextString.h\"\\n#include \"TextOutputDev.h\"\\n\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  } \\n\\n  FuzzedDataProvider stream(data, size);\\n  \\n  const std::vector<uint8_t> random_data = stream.ConsumeRemainingBytes<uint8_t>();\\n  \\n  int logLevel = gAlwaysLog;\\n  gErrorLogLevel = logLevel;\\n\\n  globalParams = std::make_unique<GlobalParams>();\\n\\n  void* infLoopCBArg = nullptr;\\n  DW_TAG_subroutine_typeInfiniteLoop* infLoopCB = nullptr;\\n\\n  Object obj;\\n  obj.initNull();\\n\\n  auto base_stream = std::make_unique<ArrayStream>(&random_data[0], random_data.size(), 0, obj.copy());\\n\\n  bool writing = false;\\n  auto textOut = new TextOutputDev(nullptr, writing, gFalse, gFalse);\\n  auto pdfDoc = std::make_unique<PDFDoc>(base_stream.get(), nullptr, nullptr);\\n\\n  if (!pdfDoc->isOk()) {\\n    delete textOut;\\n    return 0;\\n  }\\n\\n  int firstPage = 1;\\n  int lastPage = pdfDoc->getNumPages();\\n  double hDPI = 72.0;\\n  double vDPI = 72.0;\\n  int rotate = 0;\\n  GBool useMediaBox = gFalse;\\n  GBool crop = gTrue;\\n  GBool printing = gFalse;\\n\\n  pdfDoc->displayPages(textOut, firstPage, lastPage, hDPI, vDPI, rotate,\\n                         useMediaBox, crop, printing,\\n                         infLoopCB, infLoopCBArg);\\n  delete textOut;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}