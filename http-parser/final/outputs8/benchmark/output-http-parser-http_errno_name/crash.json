{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\n#define HTTP_ERRNO_MIN 0\\n#define HTTP_ERRNO_MAX 31\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    if(size < sizeof(int))\\n        return 0;\\n\\n    int errno_raw;\\n    memcpy(&errno_raw, data, sizeof(int));\\n\\n    if(errno_raw < HTTP_ERRNO_MIN || errno_raw > HTTP_ERRNO_MAX)\\n        return 0;\\n\\n    enum http_errno err_num = static_cast<enum http_errno>(errno_raw);\\n  \\n    // Executing the function-under-test\\n    const char * err_name = http_errno_name(err_num);\\n\\n    return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern const char * http_errno_name(int);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  int http_error = *(int *)data;\\n  if (http_error >= 0 && http_error <= 63) {\\n    http_errno_name(http_error);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}