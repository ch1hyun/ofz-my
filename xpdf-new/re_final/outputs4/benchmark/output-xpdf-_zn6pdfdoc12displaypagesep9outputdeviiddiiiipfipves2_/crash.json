{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Corrected include path for PDFDoc.h\\n#include \"OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Corrected include path for SplashOutputDev.h\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  int start_page = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int end_page = fuzzed_data_provider.ConsumeIntegral<int>();\\n  double h_dpi = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double v_dpi = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool use_crop = fuzzed_data_provider.ConsumeBool();\\n  GBool crop = fuzzed_data_provider.ConsumeBool();\\n  GBool printing = fuzzed_data_provider.ConsumeBool();\\n  int (*abort_check_c)(void*) = nullptr;\\n  void *abort_check_data = nullptr;\\n  \\n  GString fileName(\"dummy.pdf\");\\n  PDFDoc pdf_doc(&fileName);\\n  SplashOutputDev output_dev(splashModeRGB8, 4, gFalse, splashWhite);\\n  \\n  pdf_doc.displayPages(&output_dev, start_page, end_page, h_dpi, v_dpi, rotate, use_crop, crop, printing, abort_check_c, abort_check_data);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <fstream>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a temporary file with the fuzzed data\\n    std::ofstream temp_file(\"fuzzed.pdf\");\\n    temp_file.write(reinterpret_cast<const char*>(data), size);\\n    temp_file.close();\\n\\n    // Create a GString object for PDFDoc\\n    GString fileName(\"fuzzed.pdf\");\\n\\n    // Create a PDFDoc object\\n    PDFDoc doc(&fileName);\\n\\n    // Get the necessary parameters from the fuzzed data\\n    int startPage = fuzzed_data.ConsumeIntegral<int>();\\n    int endPage = fuzzed_data.ConsumeIntegral<int>();\\n    double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int rotate = fuzzed_data.ConsumeIntegral<int>();\\n    GBool useMediaBox = fuzzed_data.ConsumeBool();\\n    GBool crop = fuzzed_data.ConsumeBool();\\n    GBool printing = fuzzed_data.ConsumeBool();\\n\\n    // Create a SplashOutputDev object\\n    SplashColor paperColor;\\n    SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, paperColor);\\n    splashOut.startDoc(doc.getXRef());\\n\\n    // Call the function under test\\n    doc.displayPages(&splashOut, startPage, endPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, nullptr, nullptr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}