{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass FuzzRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < 2) {\\n    return 0; // Not enough data for fuzzing\\n  }\\n  \\n  FuzzedDataProvider stream(data, size);\\n  \\n  FuzzRaw RawProcessor;\\n  uint32_t plane = stream.ConsumeIntegral<uint32_t>();\\n  size_t dataSize = stream.remaining_bytes();\\n  \\n  // Check if there is any data left to consume\\n  if(dataSize == 0) {\\n    return 0;\\n  }\\n\\n  void* input_data = malloc(dataSize);\\n  \\n  // Copy the remaining data to input_data\\n  std::memcpy(input_data, stream.ConsumeRemainingBytesAsString().data(), dataSize);\\n  \\n  // Check if input_data is not null before calling the function\\n  if(input_data != nullptr) {\\n    // Calls the function-under-test\\n    int ret = RawProcessor.crxDecodePlane(input_data, plane);\\n  }\\n  \\n  free(input_data);\\n \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <vector>\\n\\n#include \"libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  uint32_t planeSize = stream.ConsumeIntegral<uint32_t>();\\n  std::vector<uint8_t> remaining_data = stream.ConsumeRemainingBytes<uint8_t>();\\n\\n  // Check if remaining_data is empty to prevent runtime error\\n  if (remaining_data.empty()) {\\n    return 0;\\n  }\\n\\n  // Check if planeSize is greater than the size of remaining_data to prevent runtime error\\n  if (planeSize > remaining_data.size()) {\\n    return 0;\\n  }\\n  \\n  // Set up the object for the decoding process.\\n  MyLibRaw decoder;\\n  decoder.crxDecodePlane(remaining_data.data(), planeSize);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}