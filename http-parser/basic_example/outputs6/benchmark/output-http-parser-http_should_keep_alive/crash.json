{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.33",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  const char *data_copy = reinterpret_cast<const char*>(data);\\n  http_parser_execute(&parser, NULL, data_copy, size);\\n\\n  // Test if connection should keep alive\\n  http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.88",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  // Initialize the http_parser object\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Set some of the http_parser object fields from fuzzer data\\n  parser.http_errno = (http_errno)data[0];\\n  size = size == 1 ? 1 : size >> 1;\\n  parser.status_code = uint16_t(data[size - 1] | (data[size - 2] << 8));\\n\\n  http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}