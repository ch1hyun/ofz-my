{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.10",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// This will be called for every input the fuzzer generates\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) { return 0; } // Add this line to avoid the case when size is 0\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Pause when first byte of data is odd\\n  if (data[0] % 2) {\\n    http_parser_pause(&parser, 1);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "29.33",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  if(size == 0) {\\n    return 0;\\n  }\\n\\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_init(parser, HTTP_BOTH);\\n\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  // Check if parser is not NULL before executing\\n  if(parser != NULL) {\\n    http_parser_execute(parser, &settings, (const char *)data, size);\\n    // Check if the parser is not in error state before pausing\\n    if (parser->http_errno == HPE_OK) {\\n      http_parser_pause(parser, 1); // Added this line to call the function http_parser_pause\\n    }\\n  }\\n\\n  free(parser);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}