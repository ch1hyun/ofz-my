{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"goo/GString.h\"\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"xpdf/Object.h\"\\n#include \"xpdf/Stream.h\"\\n#include \"xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"xpdf/GfxState.h\"\\n#include \"fuzzer/FuzzedDataProvider.h\"\\n\\nclass FuzzOutputDev : public OutputDev {\\n public:\\n  virtual ~FuzzOutputDev() {}\\n  virtual GBool upsideDown() { return gTrue; }\\n  virtual GBool useDrawChar() { return gTrue; }\\n  virtual GBool interpretType3Chars() { return gFalse; }\\n  virtual void startPage(int pageNum, GfxState *state, XRef *xref) {}\\n  virtual void endPage() {}\\n  virtual void drawChar(GfxState *state, double x, double y, double dx, double dy, double originX, double originY, CharCode code, int nBytes, Unicode *u, int uLen) {}\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider stream(data, size);\\n  FuzzOutputDev output;\\n  int startPage = stream.ConsumeIntegral<int>();\\n  int endPage = stream.ConsumeIntegral<int>();\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeBool();\\n  GBool crop = stream.ConsumeBool();\\n  GBool printing = stream.ConsumeBool();\\n  GString fileName(reinterpret_cast<const char*>(data), size);\\n  PDFDoc doc(&fileName);\\n  doc.displayPages(&output, startPage, endPage, hDPI, vDPI, rotate, useMediaBox, crop, printing);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"SplashOutputDev.h\"\\n\\n// Create a dummy function to pass as abortCheckCbk\\nGBool abortCheckCbk(void *data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create necessary objects\\n    GString fileNameA(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&fileNameA);\\n    SplashColor splashWhite;\\n    SplashColorMode colorMode;\\n    SplashOutputDev outputDev(colorMode, 4, gFalse, splashWhite);\\n    int loop = 0;\\n\\n    // Fuzz the inputs\\n    int arg_2 = fuzzed_data.ConsumeIntegral<int>();\\n    int arg_3 = fuzzed_data.ConsumeIntegral<int>();\\n    double arg_4 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double arg_5 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int arg_6 = fuzzed_data.ConsumeIntegral<int>();\\n    GBool arg_7 = fuzzed_data.ConsumeBool();\\n    GBool arg_8 = fuzzed_data.ConsumeBool();\\n    GBool arg_9 = fuzzed_data.ConsumeBool();\\n    auto bytes = fuzzed_data.ConsumeBytes<uint8_t>(1);\\n    void* arg_12 = (void*)bytes.data();\\n\\n    // Call the target function\\n    pdfDoc.displayPages(&outputDev, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, abortCheckCbk, arg_12);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}