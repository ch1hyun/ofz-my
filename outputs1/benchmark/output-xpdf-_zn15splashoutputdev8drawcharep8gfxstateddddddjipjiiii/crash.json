{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "61.88",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <string>\\n#include <cstdint> // Include for uint8_t and uint32_t\\n\\n// Assuming the necessary includes for SplashOutputDev, GfxState, CharCode, Unicode, and GBool are available.\\nclass GfxState {};\\nusing CharCode = uint32_t; // Assuming CharCode is a typedef for uint32_t.\\nusing Unicode = uint32_t;   // Assuming Unicode is a typedef for uint32_t.\\nusing GBool = bool;         // Assuming GBool is a typedef for bool.\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation (omitted for brevity)\\n    }\\n};\\n\\n// The function must be defined with extern \"C\" to avoid name mangling issues\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the drawChar function\\n    GfxState gfxState; // Create an instance of GfxState\\n    double param1 = stream.ConsumeFloatingPoint<double>(); // First double parameter\\n    double param2 = stream.ConsumeFloatingPoint<double>(); // Second double parameter\\n    double param3 = stream.ConsumeFloatingPoint<double>(); // Third double parameter\\n    double param4 = stream.ConsumeFloatingPoint<double>(); // Fourth double parameter\\n    double param5 = stream.ConsumeFloatingPoint<double>(); // Fifth double parameter\\n    double param6 = stream.ConsumeFloatingPoint<double>(); // Sixth double parameter\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode parameter\\n    int intParam = stream.ConsumeIntegral<int>(); // Integer parameter\\n    size_t unicodeLength = stream.ConsumeIntegralInRange<size_t>(1, 100); // Length for Unicode array\\n\\n    // Use ConsumeRandomLengthString to ensure correct type and size\\n    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeLength);\\n    std::vector<Unicode> unicodeArray(unicodeString.begin(), unicodeString.end()); // Convert string to Unicode vector\\n    \\n    int intParam2 = stream.ConsumeIntegral<int>(); // Second integer parameter\\n    GBool boolParam1 = stream.ConsumeBool(); // First GBool parameter\\n    GBool boolParam2 = stream.ConsumeBool(); // Second GBool parameter\\n    GBool boolParam3 = stream.ConsumeBool(); // Third GBool parameter\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "61.11",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include <string>\\n\\n// Assuming these types are defined somewhere in the codebase\\nclass GfxState {};\\nusing CharCode = uint32_t; // Example definition, replace with actual type\\nusing Unicode = uint32_t;   // Example definition, replace with actual type\\nusing GBool = int;          // Example definition, replace with actual type\\n\\nclass SplashOutputDev {\\npublic:\\n    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a GfxState pointer\\n    GfxState gfxState;\\n\\n    // Consume doubles for the parameters\\n    double param1 = stream.ConsumeFloatingPoint<double>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    double param5 = stream.ConsumeFloatingPoint<double>();\\n    double param6 = stream.ConsumeFloatingPoint<double>();\\n\\n    // Consume a CharCode\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n\\n    // Consume an integer\\n    int intParam = stream.ConsumeIntegral<int>();\\n\\n    // Consume a Unicode string\\n    std::string unicodeString = stream.ConsumeRandomLengthString();\\n    std::vector<Unicode> unicodeVector(unicodeString.begin(), unicodeString.end());\\n    Unicode* unicodePtr = unicodeVector.empty() ? nullptr : unicodeVector.data();\\n\\n    // Consume additional integers\\n    int additionalIntParam = stream.ConsumeIntegral<int>();\\n\\n    // Consume GBool values\\n    GBool boolParam1 = stream.ConsumeBool() ? 1 : 0;\\n    GBool boolParam2 = stream.ConsumeBool() ? 1 : 0;\\n    GBool boolParam3 = stream.ConsumeBool() ? 1 : 0;\\n\\n    // Call the function under test\\n    SplashOutputDev splashOutputDev;\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodePtr, additionalIntParam, boolParam1, boolParam2, boolParam3);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}