{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n\\n#include \"CharTypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"UnicodeTypeTable.h\"\\n#include \"/src/xpdf-4.05/splash/SplashFTFontEngine.h\"\\n#include \"/src/xpdf-4.05/splash/SplashFontEngine.h\"\\n#include \"/src/xpdf-4.05/splash/SplashXPathScanner.h\"\\n#include \"/src/freetype/src/gzip/inffixed.h\"\\n#include \"/src/xpdf-4.05/splash/SplashPath.h\"\\n#include \"/src/freetype/src/autofit/afloader.h\"\\n#include \"/src/freetype/src/cid/cidload.h\"\\n#include \"/src/freetype/src/psaux/psfixed.h\"\\n#include \"/src/freetype/src/bdf/bdf.h\"\\n#include \"/src/freetype/src/autofit/aflatin.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  GfxStateBuilder state;\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode charCode = fdp.ConsumeIntegral<CharCode>();\\n  int length = fdp.ConsumeIntegralInRange<int>(0, 3);\\n  Unicode unicode = fdp.ConsumeIntegral<Unicode>();\\n  GBool charExists = fdp.ConsumeBool();\\n  GBool accent = fdp.ConsumeBool();\\n  GBool dontFill = fdp.ConsumeBool();\\n\\n  state.drawLine(0, 0, originX, originY);\\n  state.transform(x, y, &originX, &originY);\\n\\n  SplashOutputDev outputDev(splashModeRGB8, 4, gFalse, NULL, gFalse, splashThinLineDefault);\\n  outputDev.startDoc(state.getXRef());\\n  outputDev.drawChar(state.getState(), x, y, dx, dy, originX, originY, charCode, 1, &unicode, length, charExists, accent, dontFill);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\n#define MAX_UNICODES 256\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double x_Val = fdp.ConsumeFloatingPoint<double>();\\n  double y_Val = fdp.ConsumeFloatingPoint<double>();\\n  double dx_Val = fdp.ConsumeFloatingPoint<double>();\\n  double dy_Val = fdp.ConsumeFloatingPoint<double>();\\n  double originX_Val = fdp.ConsumeFloatingPoint<double>();\\n  double originY_Val = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  GBool is_combining = fdp.ConsumeBool();\\n  GBool need_space = fdp.ConsumeBool();\\n  GBool can_draw_sector = fdp.ConsumeBool();\\n\\n  Unicode u[MAX_UNICODES];\\n  size_t len = fdp.remaining_bytes();\\n  if(len > sizeof(u)) {\\n    len = sizeof(u);\\n  }\\n  fdp.ConsumeData(u, len);\\n\\n  globalParams = new GlobalParams(NULL);\\n\\n  SplashColor color;\\n  auto splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, color);\\n\\n  auto state = new GfxState(72, 72, nullptr, 0, gFalse);\\n\\n  splashOut->startDoc(nullptr);\\n  splashOut->startPage(0, state);\\n  splashOut->drawChar(state, x_Val, y_Val, dx_Val, dy_Val, originX_Val, originY_Val, code, nBytes, u, len, is_combining, need_space, can_draw_sector);\\n  \\n  delete state;\\n  delete splashOut;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}