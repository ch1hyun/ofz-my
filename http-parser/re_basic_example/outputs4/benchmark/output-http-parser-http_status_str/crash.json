{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.88",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n\\n#include \"/src/http-parser/http_parser.h\"\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(uint16_t)) {\\n    return 0;\\n  }\\n\\n  uint16_t enum_value = *(uint16_t*)data;\\n  enum http_status enum_http_status = (enum http_status) (enum_value % HTTP_STATUS_OK);\\n\\n  // Calls the function-under-test\\n  const char* status_str = http_status_str(enum_http_status);\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.07",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <stdio.h>\\n#include <http_parser.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) return 0;\\n  uint16_t enum_value = (data[0]<<8|data[1]);\\n  // Call the libary function with the fuzzed enum type\\n  const char * status = http_status_str(static_cast<enum http_status>(enum_value));\\n  // Do something with the result, like output it.\\n  // printf(\"%s\\\n\", status);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}