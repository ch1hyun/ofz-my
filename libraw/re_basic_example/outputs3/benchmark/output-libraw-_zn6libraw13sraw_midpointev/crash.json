{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.75",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  FuzzedDataProvider FDP(Data, Size);\\n  int ret;\\n\\n  LibRaw RawProcessor;\\n\\n  ret = RawProcessor.open_buffer((void*)Data, Size);\\n  if (ret != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n\\n  ret = RawProcessor.unpack();\\n  RawProcessor.recycle();\\n  if (ret != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n\\n  // sraw_midpoint becomes valid after calling unpack\\n  ret = RawProcessor.sraw_midpoint();\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n\\n#include \"libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a new LibRaw instance\\n  LibRaw raw_processor;\\n  \\n  // Open the buffer\\n  int ret = raw_processor.open_buffer(\\n      reinterpret_cast<void*>(const_cast<uint8_t*>(data)), size);\\n\\n  if(ret != 0) {\\n      // The buffer cannot be opened.\\n    return 0;\\n  }\\n\\n  // Unpack the file\\n  ret = raw_processor.unpack();\\n\\n  if(ret != 0) {\\n      // The file cannot be unpacked.\\n    return 0;\\n  }\\n\\n  // Call the function under test\\n  ret = raw_processor.sraw_midpoint();\\n \\n  // Free resources\\n  raw_processor.recycle();\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}