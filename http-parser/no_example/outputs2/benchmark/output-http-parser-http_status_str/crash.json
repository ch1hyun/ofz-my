{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size != sizeof(uint16_t)) \\n    return 0;\\n\\n  uint16_t status = data[0] | (data[1] << 8);\\n\\n  if (status > HTTP_STATUS_PARTIAL_CONTENT)\\n    return 0; \\n\\n  const char * result = http_status_str((enum http_status)status);\\n\\n  (void)result; \\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.70",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nenum my_http_status {\\n    s100 = 100, s101, s102,\\n    s200 = 200, s201, s202, s203, s204, s205, s206, s207, s208, s226,\\n    s300 = 300, s301, s302, s303, s304, s305, s307, s308,\\n    s400 = 400, s401, s402, s403, s404, s405, s406, s407, s408,\\n    s411 = 411, s412, s413, s414, s415, s416, s417, s422, s423, s424,\\n    s426 = 426, s428, s429, s431, s451,\\n    s500 = 500, s501, s502, s503, s504, s505, s506, s507, s508, s510, s511,\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n  \\n  uint8_t status = data[0] % 61;  // we only have 61 http statuses\\n  \\n  // Some mapping from our fuzzed status to an actual http status\\n  enum my_http_status http_status = (enum my_http_status)(\\n    status < 3 ? (status + 100) : \\n    status < 13 ? (status + 198) : \\n    status < 21 ? (status + 290) : \\n    status < 31 ? (status + 379) : \\n    status < 41 ? (status + 372) : \\n    status < 46 ? (status + 381) : \\n    status < 54 ? (status + 456) : \\n    511);\\n  \\n  http_status_str(http_status);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}