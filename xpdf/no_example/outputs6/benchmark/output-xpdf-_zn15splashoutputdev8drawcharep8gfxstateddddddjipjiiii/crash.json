{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <string>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"PreScanOutputDev.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"parseargs.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"splash/SplashFont.h\"\\n#include \"splash/SplashTypes.h\"\\n\\n#include \"FoFiTrueType.h\"\\n#include \"GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"Object.h\"\\n#include \"GooString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1)\\n    return 0;\\n  \\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  uint32_t sx = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\\n  uint32_t sy = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\\n  if (!sx || !sy)\\n    return 0;\\n\\n  double m11 = static_cast<double>(fuzzed_data_provider.ConsumeFloatingPoint<float>());\\n  double m12 = static_cast<double>(fuzzed_data_provider.ConsumeFloatingPoint<float>());\\n  double m21 = static_cast<double>(fuzzed_data_provider.ConsumeFloatingPoint<float>());\\n  double m22 = static_cast<double>(fuzzed_data_provider.ConsumeFloatingPoint<float>());\\n\\n  double state_matrix[6] = {m11, m12, m21, m22,\\n                            static_cast<double>(fuzzed_data_provider.ConsumeFloatingPoint<float>()),\\n                            static_cast<double>(fuzzed_data_provider.ConsumeFloatingPoint<float>())};\\n  double char_matrix[6] = {m11, m12, m21, m22,\\n                           static_cast<double>(fuzzed_data_provider.ConsumeFloatingPoint<float>()),\\n                           static_cast<double>(fuzzed_data_provider.ConsumeFloatingPoint<float>())};\\n  \\n  size_t n = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 257);\\n  if (!n)\\n    return 0;\\n\\n  size_t char_one_len = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, n);\\n  size_t char_two_len = n - char_one_len;\\n  \\n  std::string char_one_str = fuzzed_data_provider.ConsumeBytesAsString(char_one_len);\\n  std::string char_two_str = fuzzed_data_provider.ConsumeBytesAsString(char_two_len);\\n\\n  if (char_one_str.empty() || char_two_str.empty())\\n    return 0;\\n\\n  Unicode char_one[char_one_str.size() + 1];\\n  Unicode char_two[char_two_str.size() + 1];\\n  \\n  GString *font_file_name = new GString(\"/usr/share/fonts/TTF/DejaVuSans.ttf\");\\n  FoFiTrueType *ff = FoFiTrueType::load(font_file_name->getCString(), 0);\\n  if (!ff)\\n    return 0;\\n  \\n  char *fontName = strdup(char_one_str.c_str());\\n  if (!fontName)\\n    return 0;\\n  \\n  SplashOutputDev *splash_out_dev = new SplashOutputDev(splashModeRGB8, 4, false, NULL, false);\\n  if (!splash_out_dev)\\n    return 0;\\n  \\n  GfxFont *font = GfxFont::makeFont(NULL, fontName, Ref(), NULL);\\n  if (!font)\\n    return 0;\\n\\n  GfxState *state = new GfxState(72.0, 72.0, NULL, 0, false);  // 72dpi\\n\\n  GfxFontLoc *fontLoc = font->locateFont(NULL, false);\\n  if (!fontLoc)\\n    return 0;\\n\\n  globalParams = new GlobalParams(NULL);\\n  SplashFont *splashFont = splash_out_dev->getFont(font, state);\\n  if (!splashFont)\\n    return 0;\\n  \\n  strncpy((char*)char_one, char_one_str.c_str(), char_one_str.size());\\n  strncpy((char*)char_two, char_two_str.c_str(), char_two_str.size());\\n\\n  Unicode uMap[2]{(Unicode) *char_one, (Unicode) *char_two};\\n  Unicode *u = uMap;\\n\\n  splash_out_dev->startDoc(NULL);\\n  splash_out_dev->beginString(state, new GooString(font_file_name->getCString()));\\n  splash_out_dev->drawChar(state, 0.0, 0.0, m11, m12, m21, m22, 0, 2, u, 2, true, false, false);\\n  splash_out_dev->endString(state);\\n  \\n  delete globalParams;\\n  delete splash_out_dev;\\n  delete state;\\n  delete font;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"GfxFont.h\"\\n#include \"GlobalParams.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"config.h\"\\n#include \"gmempp.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  globalParams = new GlobalParams(nullptr);\\n  \\n  GfxFont *gfxFont = nullptr;\\n  PDFRectangle box;\\n  GfxState *gfxState = new GfxState(72, 72, &box, 0, gFalse);\\n  gfxState->setFont(gfxFont, 1.0);\\n\\n  SplashColor splashColor;\\n  SplashOutputDev *splashOutputDev = new SplashOutputDev(splashModeRGB8, 4, false, splashColor);\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  \\n  if (fdp.remaining_bytes() >= 4){\\n    splashOutputDev->drawChar(\\n                     gfxState,\\n                     fdp.ConsumeFloatingPoint<double>(),\\n                     fdp.ConsumeFloatingPoint<double>(),\\n                     fdp.ConsumeFloatingPoint<double>(),\\n                     fdp.ConsumeFloatingPoint<double>(),\\n                     fdp.ConsumeFloatingPoint<double>(),\\n                     fdp.ConsumeFloatingPoint<double>(),\\n                     u,\\n                     1,\\n                     nullptr,\\n                     11,\\n                     gFalse,\\n                     gFalse,\\n                     gFalse\\n  );\\n  }\\n  \\n  delete gfxState;\\n  delete splashOutputDev;\\n  delete globalParams;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}