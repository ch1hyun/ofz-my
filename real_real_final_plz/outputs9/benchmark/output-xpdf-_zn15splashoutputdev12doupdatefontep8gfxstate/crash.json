{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n#include \"Gfx.h\"\\n#include \"XRef.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Added include for SplashOutputDev.h\\n\\n// Include necessary headers\\n#include \"Splash.h\" // Include Splash.h for SplashColorMode\\n#include \"GfxFont.h\" // Include GfxFont.h for GfxFont\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer (cannot be NULL)\\n    GfxState gfxState(1.0, 1.0, nullptr, 0, false);\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeRGB8, 0, false, nullptr);\\n    splashOutputDev.startDoc(nullptr);\\n\\n    // Create a GfxFont object to pass to doUpdateFont\\n    GfxFont *font = new GfxFont(nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Gfx.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n\\n// Include necessary headers for the functions causing errors\\n#include \"Object.h\"\\n#include \"XRef.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object\\n    GfxState* gfxState = new GfxState(96, 96, nullptr, 0, false);\\n\\n    // Call the function-under-test with the initialized GfxState object\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeMono1, 1, false, nullptr);\\n\\n    // Dummy objects to satisfy the function call\\n    Ref dummyRef;\\n    Object dummyObject;\\n    Dict dummyDict(nullptr); // Provide XRef pointer to Dict constructor\\n    Stream* dummyStream = nullptr; // Use pointer for abstract class Stream\\n\\n    // Commented out the problematic lines and replaced them with calls that have the correct number of arguments\\n    splashOutputDev.drawImageMask(gfxState, &dummyObject, dummyStream, 0, 0, false, false, false);\\n\\n    splashOutputDev.drawImage(gfxState, &dummyObject, dummyStream, 0, 0, nullptr, nullptr, false, false);\\n\\n    splashOutputDev.drawMaskedImage(gfxState, &dummyObject, dummyStream, 0, 0, nullptr, 0, 0, false, false);\\n\\n    splashOutputDev.drawSoftMaskedImage(gfxState, &dummyObject, dummyStream, 0, 0, nullptr, 0, 0, nullptr, false);\\n\\n    splashOutputDev.opiBegin(gfxState, &dummyDict);\\n    splashOutputDev.opiEnd(gfxState, &dummyDict);\\n    splashOutputDev.beginStructureItem(\"tag\", 0, &dummyDict);\\n\\n    // Uncommented the line that was causing the error\\n    splashOutputDev.doUpdateFont(gfxState);\\n\\n    // Cleanup\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}