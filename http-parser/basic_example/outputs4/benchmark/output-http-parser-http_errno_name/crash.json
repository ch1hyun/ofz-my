{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n\\n#include \"http_parser.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size != 1) {\\n    return 0;\\n  }\\n \\n  // Cast the 8-bit integer to http_errno since it probably is being used as an enumerated type.\\n  http_errno err = static_cast<http_errno>(data[0]);\\n\\n  // Call the API\\n  const char * err_name = http_errno_name(err);\\n  \\n  // The output of the function is not used because the purpose is to \\n  // fuzz the http_errno_name function, not to process its output.\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno)) {\\n    return 0;\\n  }\\n\\n  enum http_errno err;\\n  memcpy(&err, data, sizeof(enum http_errno));\\n  if (err < 0 || err >= HTTP_ERRNO_MAX) {\\n    return 0;\\n  }\\n  const char* error_name = http_errno_name(err);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}