{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdio>\\n#include <cstring>\\n#include <cstdlib>\\n\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  int TestFd = -1;\\n  FuzzedDataProvider stream(Data, Size);\\n  std::string tmp = stream.ConsumeRandomLengthString();\\n  char *tmp_data = const_cast<char *>(tmp.data());\\n  \\n  std::string mode = stream.ConsumeRandomLengthString();\\n  char *mode_data = const_cast<char *>(mode.data());\\n  printf(\"opening temp file\\\n\");\\n  FILE *TestFile = tmpfile();\\n  if (TestFile == NULL) {\\n    fprintf(stderr, \"Failure creating temp file\");\\n    return 0;\\n  }\\n  TestFd = fileno(TestFile);\\n  \\n  printf(\"writing data to file\\\n\");\\n  fwrite(Data, Size, 1, TestFile);\\n  \\n  TIFF *output;\\n  output = TIFFFdOpenExt(TestFd, tmp_data, mode_data, NULL);\\n  \\n  if (output != nullptr) \\n      TIFFClose(output);\\n\\n  fclose(TestFile);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    if (Size < 3) {\\n        return 0;\\n    }\\n    // TIFFOpenOptions options; // Remove this line as TIFFOpenOptions is not a valid type\\n\\n    // Initialize options as needed\\n\\n    TIFF* tiff = TIFFClientOpen(\"name\", \"r\", (thandle_t)Data, \\n                                _tiffReadProc, _tiffWriteProc, \\n                                _tiffSeekProc, _tiffCloseProc, \\n                                _tiffSizeProc, _tiffMapFileProc, \\n                                _tiffUnmapFileProc);\\n    if (tiff) {\\n        // Do something with tiff\\n        TIFFClose(tiff);\\n    }\\n    return 0;\\n}",
        "model": ""
    }

    ]
}