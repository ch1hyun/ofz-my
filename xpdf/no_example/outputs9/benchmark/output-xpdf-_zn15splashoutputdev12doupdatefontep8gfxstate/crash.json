{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"splash/SplashFontEngine.h\"\\n#include \"splash/SplashFontFileID.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"splash/SplashFTFontEngine.h\"\\n#include \"splash/SplashFont.h\"\\n#include \"splash/SplashFontFile.h\"\\n#include \"goo/GooString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Ref.h\"\\n#include \"splash/SplashCoord.h\"\\n#include \"/src/freetype/src/autofit/afloader.h\"\\n#include \"/src/freetype/src/cid/cidload.h\"\\n#include \"/src/freetype/src/psaux/psfixed.h\"\\n#include \"/src/freetype/src/bdf/bdf.h\"\\n#include \"/src/freetype/src/autofit/aflatin.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n    \\n    // initialize with random values\\n    double mat[6];\\n    for (int i = 0; i < 6; ++i) {\\n        mat[i] = stream.ConsumeFloatingPoint<double>();\\n    }\\n\\n    double x1 = stream.ConsumeFloatingPoint<double>();\\n    double y1 = stream.ConsumeFloatingPoint<double>();\\n    double x2 = stream.ConsumeFloatingPoint<double>();\\n    double y2 = stream.ConsumeFloatingPoint<double>();\\n   \\n    std::string fileName = stream.ConsumeRemainingBytesAsString();\\n\\n    SplashFontEngine *engine = new SplashFTFontEngine(gTrue, gTrue, gFalse);\\n    OutStream *os = new MemOutStream(data, size);\\n    SplashFontFileID *id = new SplashFontFileID(0);\\n    SplashFontSrc *src = new SplashFontSrc(gFalse, os, 0);\\n    SplashFontFile *fontFile = engine->loadType1Font(id, new GooString(fileName.c_str()), gFalse, false, mat, src, x1, y1, x2, y2);\\n    if (!fontFile) {\\n        delete id;\\n        return 0;\\n    }\\n    GfxState gfxState;\\n    SplashOutputDev dev(engine, fontFile);\\n    dev.doUpdateFont(&gfxState);\\n   \\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n  \\n#include <string.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"XRef.h\"\\n#include \"config.h\"\\n#include \"/src/xpdf-4.05/goo/gfile.h\"\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/goo/gmem.h\"\\n#include \"/src/xpdf-4.05/goo/GHash.h\"\\n#include \"splash/SplashBitmap.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  Object obj;\\n  obj.initNull();\\n  double page_media_box[4] = {\\n    fdp.ConsumeFloatingPointInRange<double>(-100, 100),\\n    fdp.ConsumeFloatingPointInRange<double>(-100, 100),\\n    fdp.ConsumeFloatingPointInRange<double>(-100, 100),\\n    fdp.ConsumeFloatingPointInRange<double>(-100, 100) };\\n  double page_crop_box[4] = {\\n    fdp.ConsumeFloatingPointInRange<double>(-100, 100),\\n    fdp.ConsumeFloatingPointInRange<double>(-100, 100),\\n    fdp.ConsumeFloatingPointInRange<double>(-100, 100),\\n    fdp.ConsumeFloatingPointInRange<double>(-100, 100) };\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n  MemStream *stream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n  \\n  PDFRectangle *mediaBox = new PDFRectangle(0, 0, 0, 0);\\n  GfxState* state = new GfxState(72.0, 72.0, mediaBox, 0, gTrue);\\n  \\n  globalParams = new GlobalParams(\"xpdfrc\");\\n  globalParams->setErrQuiet(true);\\n\\n  std::unique_ptr<PDFDoc> doc = std::make_unique<PDFDoc>(new GString((char*)data, size), nullptr, nullptr, nullptr);\\n  if (!doc) return 0;\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  auto splashOutputDev = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n\\n  splashOutputDev->startDoc(doc->getXRef());\\n  splashOutputDev->updateFont(state);\\n\\n  delete splashOutputDev;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}