{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "The error message is missing, so it's impossible to provide a solution without knowing the exact problem. However, if there are no errors in the provided code, then it should build correctly.",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" \\n#include \"UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" \\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  GBool upsideDown() override { return gTrue; }\\n  GBool useDrawChar() override { return gTrue; }\\n  GBool interpretType3Chars() override { return gTrue; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider data_provider(data, size);\\n  const double hDPI = data_provider.ConsumeFloatingPoint<double>() * 72.0; \\n  const double vDPI = data_provider.ConsumeFloatingPoint<double>() * 72.0; \\n\\n  const int rotate = 0;\\n  const GBool useMediaBox = gFalse;\\n  const GBool crop = gTrue;\\n  const GBool printing = gFalse;\\n  const GBool useRotate = gFalse;\\n\\n  if (!globalParams) {\\n      globalParams = new GlobalParams(\"/path/to/config/file\");\\n  }\\n\\n  std::vector<char> pdf_input = data_provider.ConsumeRemainingBytes<char>();\\n  Object obj;\\n  MemStream *mem_stream = new MemStream(pdf_input.data(), 0, pdf_input.size(), &obj);\\n  PDFDoc *doc = new PDFDoc(mem_stream, new GString(), new GString());\\n\\n  std::vector<int> pageList;\\n  for(int page = 1; page <= doc->getNumPages(); ++page) {\\n    pageList.push_back(page);\\n  }\\n  int pageListLength = pageList.size();\\n\\n  MyOutputDev *output_device = new MyOutputDev(); \\n\\n  doc->displayPages(output_device, 1, pageListLength, hDPI, vDPI,\\n                      rotate, useMediaBox, crop, printing, nullptr, nullptr);\\n\\n  delete doc;\\n  delete mem_stream;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}