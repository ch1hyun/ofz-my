{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n    \\n    // Initialize the necessary variables\\n    OutputDev *outputDev;\\n    int firstPage = 1, lastPage = 1;\\n    double hDPI = 72.0, vDPI = 72.0;\\n    int rotate = 0;\\n    GBool useMediaBox = gFalse, crop = gFalse, printing = gFalse;\\n\\n    // Create a GString object from the data\\n    std::string strData = stream.ConsumeRemainingBytesAsString();\\n    GString *docData = new GString(strData.c_str(), strData.size());\\n\\n    // Create a PDFDoc object\\n    PDFDoc doc(docData, NULL, NULL, NULL);\\n\\n    // Call the function with the initialized variables\\n    doc.displayPages(outputDev, firstPage, lastPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL);\\n\\n    // Delete the GString object\\n    delete docData;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <memory>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n#include \"Dict.h\"\\n#include \"XRef.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  auto globalParams = std::make_unique<GlobalParams>(\"\");\\n\\n  SplashColor paperColor;\\n  paperColor[0] = paperColor[1] = paperColor[2] = 255;\\n  auto splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor);\\n  splashOut->startDoc(NULL);\\n\\n  Object obj; // Fixed line\\n  auto str = new MemStream((char*)data, 0, size, &obj);\\n  auto pdfDoc = std::make_unique<PDFDoc>(str, NULL, NULL);\\n\\n  int firstPage = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int lastPage = fuzzed_data_provider.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data_provider.ConsumeBool();\\n  GBool crop = fuzzed_data_provider.ConsumeBool();\\n  GBool printing = fuzzed_data_provider.ConsumeBool();\\n  void *stream = nullptr;\\n\\n  pdfDoc->displayPages(splashOut, firstPage, lastPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, nullptr, stream);\\n\\n  delete splashOut;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}