{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  // Enumerate all http_errno values\\n  const enum http_errno all_errnos[] = {HPE_OK, HPE_CB_message_begin, HPE_CB_message_begin, HPE_CB_headers_complete, HPE_CB_message_complete,\\n                                           HPE_CB_chunk_header, HPE_CB_chunk_complete, HPE_INVALID_EOF_STATE, HPE_HEADER_OVERFLOW,\\n                                           HPE_CLOSED_CONNECTION, HPE_INVALID_VERSION, HPE_INVALID_STATUS, HPE_INVALID_METHOD, HPE_INVALID_URL,\\n                                           HPE_INVALID_HOST, HPE_INVALID_PORT, HPE_INVALID_PATH, HPE_INVALID_QUERY_STRING, HPE_INVALID_FRAGMENT,\\n                                           HPE_LF_EXPECTED, HPE_INVALID_HEADER_TOKEN, HPE_INVALID_CONTENT_LENGTH, HPE_UNEXPECTED_CONTENT_LENGTH,\\n                                           HPE_INVALID_CHUNK_SIZE, HPE_INVALID_CONSTANT, HPE_INVALID_INTERNAL_STATE, HPE_STRICT,\\n                                           HPE_LF_EXPECTED, HPE_INVALID_CONTENT_LENGTH, HPE_INVALID_CHUNK_SIZE,\\n                                           HPE_INVALID_CONSTANT, HPE_INVALID_INTERNAL_STATE, HPE_STRICT, HPE_PAUSED, HPE_UNKNOWN};\\n  \\n  // Get a random http_errno value\\n  enum http_errno errno_val = all_errnos[data[0] % (sizeof(all_errnos)/sizeof(all_errnos[0]))];\\n  const char * errno_desc = http_errno_description(errno_val);\\n\\n  // Create a http_parser instance and initialize it\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_REQUEST);\\n\\n  // Parse the data\\n  http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0; // The function under test expects an enum as argument which cannot be zero.\\n  }\\n  \\n  for (size_t i = 0; i < size; i++) {\\n    unsigned char enum_value = data[i] % (HPE_INVALID_EOF_STATE + 1); // Ensure the value does not exceed the maximum enumeration value.\\n    const char* description = http_errno_description((enum http_errno)enum_value);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}