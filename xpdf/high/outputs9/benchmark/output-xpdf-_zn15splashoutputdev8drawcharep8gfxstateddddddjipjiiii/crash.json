{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <xpdf/Object.h>\\n#include <xpdf/Stream.h>\\n#include <xpdf/Dict.h>\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include <xpdf/GfxState.h>\\n#include <xpdf/SplashOutputDev.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    // Create necessary parameters for the drawChar function\\n    double hDPIA = 72.0;\\n    double vDPIA = 72.0;\\n    PDFRectangle pageBox;\\n    int rotateA = 0;\\n    GBool upsideDown = gFalse;\\n    GfxState *state = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n    double x = 0.0, y = 0.0, dx = 0.0, dy = 0.0, originX = 0.0, originY = 0.0;\\n    CharCode code = data[0];\\n    int nBytes = 0;\\n    Unicode *u = nullptr;\\n    int uLen = 0;\\n    GBool horizontal = gTrue, real = gTrue, reverse = gFalse;\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev *outputDev = new SplashOutputDev();\\n\\n    // Call the drawChar function\\n    outputDev->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, horizontal, real, reverse);\\n\\n    // Clean up\\n    delete outputDev;\\n    delete state;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "96.23",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode* u = new Unicode(nBytes);\\n  for (int i = 0; i < nBytes; i++) {\\n    u[i] = fdp.ConsumeIntegral<Unicode>();\\n  }\\n  GBool gfxFontIsRef = fdp.ConsumeIntegral<GBool>();\\n  GBool manualGoo = fdp.ConsumeIntegral<GBool>();\\n  GBool printChar = fdp.ConsumeIntegral<GBool>();\\n\\n  // This will not produce meaningful fuzzing results as we can't control the state and font.\\n  // GfxState* state = new GfxState(72.0, 72.0, &mediaBox, 0, gFalse);\\n  // SplashOutputDev* splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  // splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, gfxFontIsRef, manualGoo, printChar);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}