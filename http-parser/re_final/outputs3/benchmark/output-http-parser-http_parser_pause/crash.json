{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "33.08",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  //if HTTP protocol size is higher than 0\\n  if (size > 0) {\\n    // Execute the parser and check if it parsed any data\\n    size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n    // Only pause the parser if it parsed some data and the parser is not in error state\\n    if (parsed > 0 && HTTP_PARSER_ERRNO(&parser) == HPE_OK)\\n      http_parser_pause(&parser, 1);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "32.45",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  if(size == 0) {\\n    return 0;\\n  }\\n\\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_init(parser, HTTP_BOTH);\\n  // initializing settings\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n  http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n  int pause = data[size-1] % 2;\\n  if (parser->upgrade) {\\n    http_parser_pause(parser, pause);\\n  }\\n  \\n  free(parser);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}