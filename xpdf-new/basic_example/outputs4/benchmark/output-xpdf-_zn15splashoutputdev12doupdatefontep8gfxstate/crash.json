{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"OutputDev.h\"\\n#include \"Splash.h\"\\n#include \"SplashTypes.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"splash/SplashFont.h\"\\n#include \"splash/SplashPath.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"PDFRectangle.h\"\\n\\nSplashColor splash_black = {0x00, 0x00, 0x00};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Initialize SplashOutputDev\\n  auto bitmap = new SplashBitmap(10, 10, 4, splashModeRGB8, false, false, nullptr);\\n  SplashOutputDev splashOutputDev(splashModeRGB8, 4, false, splash_black);\\n  splashOutputDev.startDoc(NULL);\\n  if (bitmap) {\\n    delete bitmap;\\n  }\\n\\n  // Attempt to get GfxState from the remaining data\\n  std::vector<double> transform(6);\\n  double effectAlphaConstant = 0;\\n  double fillAlphaConstant = 0;\\n  double strokeAlphaConstant = 0;\\n  \\n  double lastX = 0;\\n  double lastY = 0;\\n  std::string currFont = stream.ConsumeRandomLengthString(20);\\n  \\n  for (auto& coordinate : transform) {\\n    coordinate = stream.ConsumeFloatingPoint<double>();\\n  }\\n  \\n  const size_t remaining = stream.remaining_bytes();\\n  \\n  if (remaining > 2) {\\n    effectAlphaConstant = stream.ConsumeFloatingPoint<double>();\\n    fillAlphaConstant = stream.ConsumeFloatingPoint<double>();\\n    strokeAlphaConstant = stream.ConsumeFloatingPoint<double>();\\n  }\\n  \\n  if (remaining > 3) {\\n    lastX = stream.ConsumeFloatingPoint<double>();\\n    lastY = stream.ConsumeFloatingPoint<double>();\\n  }\\n\\n  // load up the constructed GfxState\\n  PDFRectangle rect;\\n  GfxState state(\\n      /* hDPI = */ 1,\\n      /* vDPI = */ 1,\\n      /* transform = */ &rect,\\n      /* pageRotation = */ 0,\\n      /* upsideDown = */ false\\n      );\\n\\n  // call function to be fuzzed\\n  splashOutputDev.updateFont(&state);\\n  splashOutputDev.doUpdateFont(&state); // Added line to call the function under test\\n\\n  // Cleanup and return\\n  splashOutputDev.clearModRegion();\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <config.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"splash/SplashGlyphBitmap.h\"\\n#include \"PDFRectangle.h\" // Include the header file for PDFRectangle\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  bool noComposite = fdp.ConsumeBool();\\n  bool forceRasterize = fdp.ConsumeBool();\\n  SplashColor paperColor;\\n  paperColor[0] = fdp.ConsumeIntegral<uint8_t>();\\n  paperColor[1] = fdp.ConsumeIntegral<uint8_t>();\\n  paperColor[2] = fdp.ConsumeIntegral<uint8_t>();\\n  paperColor[3] = fdp.ConsumeIntegral<uint8_t>();\\n\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor, gTrue);\\n  splashOut->startDoc(nullptr);\\n\\n  double hDPIA = fdp.ConsumeFloatingPoint<double>();\\n  double vDPIA = fdp.ConsumeFloatingPoint<double>();\\n  PDFRectangle pageBox;\\n  int rotateA = fdp.ConsumeIntegral<int>();\\n  GBool upsideDown = fdp.ConsumeBool();\\n\\n  GfxState *gfxState = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n  splashOut->updateFont(gfxState);\\n  // splashOut->doUpdateFont(gfxState); // Removed this line as doUpdateFont is a private member\\n\\n  delete gfxState;\\n  delete splashOut;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}