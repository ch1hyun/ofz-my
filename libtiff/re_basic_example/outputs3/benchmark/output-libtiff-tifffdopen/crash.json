{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 3) {\\n        return 0;\\n    }\\n    TIFF *tif = TIFFFdOpen(0, reinterpret_cast<const char *>(data), \"r\");\\n    if (tif) {\\n        TIFFClose(tif);\\n    }\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0015296982871404706",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  \\n  int pipe_fd[2];\\n\\n  // Creating a pipe that will be used for fuzzer data input\\n  if (pipe(pipe_fd) == -1) return 0;\\n  std::string remaining_bytes = stream.ConsumeRemainingBytesAsString();\\n  if (!remaining_bytes.empty()) {\\n    write(pipe_fd[1], remaining_bytes.data(), remaining_bytes.size());\\n  }\\n\\n  // Close write end, because TIFFFdOpen can read only\\n  close(pipe_fd[1]);\\n  \\n  // Call target function\\n  TIFF* tiff = TIFFFdOpen(pipe_fd[0], \"\", \"r\");\\n  if (tiff) { // Close TIFF if opened\\n    TIFFClose(tiff);\\n  }\\n  \\n  close(pipe_fd[0]);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}