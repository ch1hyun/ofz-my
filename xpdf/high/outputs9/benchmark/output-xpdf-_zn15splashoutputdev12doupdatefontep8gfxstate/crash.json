{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"PDFRectangle.h\"\\n#include \"GfxFont.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  bool translate = stream.ConsumeBool();\\n\\n  GBool modeColor = gTrue;\\n  int bitmapRowPad = 4;\\n  GBool reverseVideo = gFalse;\\n  SplashColor paperColor;\\n  \\n  PDFRectangle pageBox(x, y, hDPI, vDPI);\\n  GfxState *state = new GfxState(hDPI, vDPI, &pageBox, translate, gFalse);\\n\\n  state->moveTo(x, y);\\n  \\n  SplashOutputDev splashOut(splashModeRGB8, bitmapRowPad, reverseVideo, paperColor);\\n  splashOut.startDoc(state->getFont()->getNextChar);\\n  \\n  try {\\n    splashOut.doUpdateFont(state); // Fix: Call the function doUpdateFont() directly\\n  } catch(...) {\\n    delete state;\\n    return 0;\\n  }\\n  \\n  delete state;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include \"Object.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"Dict.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    if (Size == 0) {\\n        return 0;\\n    }\\n\\n    PDFRectangle box;\\n    GfxState *state = new GfxState(72.0, 72.0, &box, 0, gTrue); \\n    SplashOutputDev *outputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, gRGBDef);\\n\\n    // Ensure that Data and Size can be used to update the state\\n    // This depends on the implementation details of GfxState and SplashOutputDev\\n\\n    outputDev->doUpdateFont(state);\\n    \\n    delete outputDev;\\n    delete state;\\n    \\n    return 0;\\n}",
        "model": ""
    }

    ]
}