{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "30.31",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nstatic int on_message_begin(http_parser* _) {\\n  (void)_;\\n  return 0;\\n}\\n\\nstatic int on_headers_complete(http_parser* _) {\\n  (void)_;\\n  return 0;\\n}\\n\\nstatic int on_message_complete(http_parser* _) {\\n  (void)_;\\n  return 0;\\n}\\n\\nstatic int on_chunk_header(http_parser* _) {\\n  (void)_;\\n  return 0;\\n}\\n\\nstatic int on_chunk_complete(http_parser* _) {\\n  (void)_;\\n  return 0;\\n}\\n\\nstatic int on_url(http_parser* _, const char* at, size_t length) {\\n  (void)_;\\n  (void)at;\\n  (void)length;\\n  return 0;\\n}\\n\\nstatic int on_header_field(http_parser* _, const char* at, size_t length) {\\n  (void)_;\\n  (void)at;\\n  (void)length;\\n  return 0;\\n}\\n\\nstatic int on_header_value(http_parser* _, const char* at, size_t length) {\\n  (void)_;\\n  (void)at;\\n  (void)length;\\n  return 0;\\n}\\n\\nstatic int on_body(http_parser* _, const char* at, size_t length) {\\n  (void)_;\\n  (void)at;\\n  (void)length;\\n  return 0;\\n}\\n\\nstatic http_parser_settings settings = {\\n  .on_message_begin = on_message_begin,\\n  .on_header_field = on_header_field,\\n  .on_header_value = on_header_value,\\n  .on_url = on_url,\\n  .on_status = NULL,\\n  .on_body = on_body,\\n  .on_headers_complete = on_headers_complete,\\n  .on_message_complete = on_message_complete,\\n  .on_chunk_header = on_chunk_header,\\n  .on_chunk_complete = on_chunk_complete\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1)\\n    return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  int pause = (int)(data[0]%2);\\n  http_parser_pause(&parser, pause);\\n\\n  http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    http_parser parser;\\n\\n    // Iterate over the data array.\\n    for (size_t i = 0; i < size; i++) {\\n        int pause = data[i] % 2;\\n        http_parser_init(&parser, HTTP_BOTH);\\n        http_parser_pause(&parser, pause);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}