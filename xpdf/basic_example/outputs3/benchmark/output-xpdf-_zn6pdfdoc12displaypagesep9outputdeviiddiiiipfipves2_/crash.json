{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"Stream.h\" // Include 'Stream.h' before 'Object.h'\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"gfile.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 20) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeBool();\\n  GBool crop = stream.ConsumeBool();\\n  GBool printing = stream.ConsumeBool();\\n  auto startPage = stream.ConsumeIntegralInRange<int>(1, 500);\\n  auto endPage = stream.ConsumeIntegralInRange<int>(startPage, 500);\\n\\n  if (globalParams != nullptr) {\\n    delete globalParams;\\n  }\\n  globalParams = new GlobalParams(nullptr);\\n  globalParams->setErrQuiet(1);\\n\\n  std::vector<uint8_t> fileData = stream.ConsumeRemainingBytes<uint8_t>();\\n  Object obj;\\n  auto str = new MemStream(reinterpret_cast<char*>(fileData.data()), 0, fileData.size(), &obj);\\n  PDFDoc doc(str);\\n\\n  if (!doc.isOk()) {\\n    return 0;\\n  }\\n\\n  SplashColor paperColor;\\n  for (unsigned i = 0; i < splashMaxColorComps; ++i) {\\n    paperColor[i] = 255;  // white background\\n  }\\n  auto splashOut = new SplashOutputDev(splashModeRGB8, 4, false, paperColor, true, false);\\n  splashOut->startDoc(doc.getXRef());\\n\\n  doc.displayPages(splashOut, startPage, endPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, nullptr, nullptr);\\n\\n  if (!stream.ConsumeBool()) {\\n    splashOut->getBitmap();\\n  }\\n\\n  delete splashOut;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes);\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    PDFDoc doc(stream);\\n    if (doc.isOk() == gTrue) {\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      splashOut->setNoComposite(gTrue);\\n      splashOut->startDoc(doc.getXRef());\\n      doc.displayPages(splashOut, 1, doc.getNumPages(), hdpi, vdpi, rotate, useMediaBox, crop, printing, NULL, NULL);\\n      delete splashOut;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}