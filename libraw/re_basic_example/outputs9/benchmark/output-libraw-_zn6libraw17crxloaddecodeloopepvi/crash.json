{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.30",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n// Create a derived class from 'LibRaw'\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  void* buffer = malloc(size);\\n  if (!buffer) {\\n    return 0;\\n  }\\n\\n  int blocks = stream.ConsumeIntegral<int>();\\n\\n  // Get the remaining bytes from the stream\\n  auto remaining_bytes = stream.ConsumeRemainingBytes<unsigned char>();\\n  \\n  // Ensure we do not copy more data than the size of the buffer\\n  size_t copy_size = remaining_bytes.size() < size ? remaining_bytes.size() : size;\\n\\n  memcpy(buffer, remaining_bytes.data(), copy_size);\\n\\n  MyLibRaw librawProcessor;\\n  \\n  // Calls the function-under-test\\n  librawProcessor.crxLoadDecodeLoop(buffer, blocks);\\n\\n  free(buffer);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/libraw/libraw/libraw.h\"\\n#include <stdint.h>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nclass FuzzLibRaw : public LibRaw {\\n public:\\n  using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider stream(data, size);\\n  const int buffer_size = stream.ConsumeIntegralInRange<int>(1, static_cast<int>(size));\\n  auto remaining_bytes = stream.ConsumeBytes<uint8_t>(buffer_size);\\n\\n  FuzzLibRaw libRaw;\\n\\n  // create a buffer with the size of remaining_bytes\\n  void* buffer = malloc(remaining_bytes.size() + 1); // add 1 to avoid zero size\\n\\n  // copy the remaining_bytes to the buffer\\n  memcpy(buffer, remaining_bytes.data(), remaining_bytes.size());\\n\\n  // call the decoder function\\n  if (remaining_bytes.size() > 0) { // check if there is data to decode\\n    libRaw.crxLoadDecodeLoop(buffer, static_cast<int>(remaining_bytes.size()));\\n  }\\n\\n  // free the buffer\\n  free(buffer);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}