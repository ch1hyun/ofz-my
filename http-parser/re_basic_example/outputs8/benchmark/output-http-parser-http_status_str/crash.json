{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.87",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\n#include \"http_parser.h\"\\n\\n// The http_status's range is form 100 to 599 as per HTTP specification\\n#define HTTP_STATUS_RANGE 500\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n if (size != 1)\\n   return 0;\\n\\n uint16_t http_status = data[0] % HTTP_STATUS_RANGE + 100; // Converts status to range between 100 and 599\\n const char * status_str = http_status_str(static_cast<enum http_status>(http_status));\\n\\n return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.88",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\n#include \"http_parser.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size == 0) {\\n    return 0;\\n  }\\n\\n  // Cast the first byte of Data into a http_status enum value and call http_status_str\\n  enum http_status status = (enum http_status)Data[0];\\n  const char* status_str = http_status_str(status);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}