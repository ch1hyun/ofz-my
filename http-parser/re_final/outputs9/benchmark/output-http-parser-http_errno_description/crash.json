{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size<sizeof(int)) {\\n        return 0;\\n  }\\n  \\n  int err_raw;\\n  memcpy(&err_raw, data, sizeof(int));\\n\\n  // Verify the err_raw is within valid limits of enumerations\\n  if(err_raw < 0 || err_raw >= _HTTP_ERRNO_H)\\n    return 0;\\n\\n  enum http_errno err = (enum http_errno)(err_raw);\\n \\n  // Call the function-under-test\\n  const char * err_str = http_errno_description(err);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Fuzz test http_errno_description() requires inputs to be valid http_errno\\n  // Therefore, convert the bytes from the fuzzer to an http_errno and call the function\\n\\n  if(size == 0)\\n    return 0; // All inputs must be of a positive size\\n  \\n  // Call the function-under-test, make sure we only generate http_errno inside the enum range\\n  const char* error_message = http_errno_description((enum http_errno)(data[0] % HTTP_ERRNO_MAX));\\n  \\n  // Output the error message to keep the function\\n  if (error_message) {}\\n  \\n  // Ensure the fuzzer keeps running\\n  return 0; \\n}",
        "model": ""
    }

    ]
}