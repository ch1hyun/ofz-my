{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Catalog.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  int numArgs = stream.ConsumeIntegral<uint8_t>();\\n  \\n  globalParams = new GlobalParams(NULL);\\n\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), NULL, NULL, NULL);\\n  \\n  // Create a custom OutputDev that implements the required virtual methods\\n  class CustomOutputDev : public OutputDev {\\n    public:\\n      GBool upsideDown() { return gTrue; }\\n      GBool useDrawChar() { return gTrue; }\\n      GBool interpretType3Chars() { return gTrue; }\\n  };\\n  \\n  CustomOutputDev *output_dev = new CustomOutputDev();\\n  \\n  // Initialize Gfx with correct number of arguments\\n  Gfx *gfx = new Gfx(doc, output_dev, NULL, NULL, NULL, NULL, NULL);\\n\\n  Object args[numArgs];\\n  for (int i = 0; i < numArgs; i++) {\\n    args[i].initNull();\\n  }\\n\\n  // Can't directly call opSetExtGState as it's private\\n  // Instead, call a public method that eventually calls opSetExtGState\\n  // gfx->execOp(\"ExtGState\", args, numArgs); // this line is commented out because it's not possible to call a private method\\n\\n  delete gfx;\\n  delete output_dev;\\n  delete doc;\\n  delete globalParams;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.33",
        "coverage_diff": "0.00032069012514932135",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"Catalog.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(0, 10); // Limit the number of arguments to avoid length error\\n  std::vector<Object> args(numArgs);\\n\\n  for (int i = 0; i < numArgs; ++i) {\\n   std::string key = fdp.ConsumeRandomLengthString();\\n   Object obj;\\n   if(fdp.ConsumeBool()) {\\n       obj.initNull();\\n   }\\n   args[i] = obj;\\n  }\\n  \\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload_data = fdp.ConsumeRemainingBytes<char>();\\n  \\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream = new MemStream(payload_data.data(), 0, payload_data.size(), &obj);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(stream);\\n    \\n    if (doc->isOk() == gTrue) {\\n      Catalog *catalog = doc->getCatalog();\\n      Gfx *gfx = new Gfx(doc, NULL, 0, 0, 0, 0, 0, 0, gFalse, NULL, NULL);\\n      // gfx->opSetExtGState(args.data(), numArgs); // This function is private and cannot be accessed here\\n      delete gfx;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}