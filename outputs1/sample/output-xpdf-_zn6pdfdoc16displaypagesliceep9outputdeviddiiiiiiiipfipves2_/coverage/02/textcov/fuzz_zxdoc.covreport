LLVMFuzzerTestOneInput:
   27|      3|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   28|      3|auto start_target = std::chrono::high_resolution_clock::now();
   29|      3|    FuzzedDataProvider fuzzed_data(data, size);
   30|       |
   31|       |    // Create an OutputDev object
   32|      3|    MyOutputDev *output_dev = new MyOutputDev(); // Using the concrete subclass
   33|       |
   34|       |    // Consume parameters for the function
   35|      3|    int param1 = fuzzed_data.ConsumeIntegral<int>();
   36|      3|    double param2 = fuzzed_data.ConsumeFloatingPoint<double>();
   37|      3|    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();
   38|      3|    int param4 = fuzzed_data.ConsumeIntegral<int>();
   39|      3|    GBool param5 = fuzzed_data.ConsumeBool() ? 1 : 0; // Assuming GBool is an integer type
  ------------------
  |  Branch (39:20): [True: 0, False: 3]
  ------------------
   40|      3|    GBool param6 = fuzzed_data.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (40:20): [True: 0, False: 3]
  ------------------
   41|      3|    GBool param7 = fuzzed_data.ConsumeBool() ? 1 : 0;
  ------------------
  |  Branch (41:20): [True: 0, False: 3]
  ------------------
   42|      3|    int param8 = fuzzed_data.ConsumeIntegral<int>();
   43|      3|    int param9 = fuzzed_data.ConsumeIntegral<int>();
   44|      3|    int param10 = fuzzed_data.ConsumeIntegral<int>();
   45|      3|    int param11 = fuzzed_data.ConsumeIntegral<int>();
   46|       |
   47|       |    // Since DW_TAG_subroutine_type.h is not available, we assume a pointer to some type is acceptable
   48|      3|    void* param12 = nullptr; // Placeholder for the subroutine type
   49|       |
   50|       |    // Consume a random length string for the last parameter
   51|      3|    std::string param13 = fuzzed_data.ConsumeRandomLengthString(1024); // Limiting to 1024 bytes
   52|       |
   53|       |    // Validate the size of the consumed data
   54|      3|    if (param13.empty()) {
  ------------------
  |  Branch (54:9): [True: 3, False: 0]
  ------------------
   55|      3|        delete output_dev;
   56|      3|        return 0; // Exit if the string is empty
   57|      3|    }
   58|       |
   59|       |    // Create a GString for PDFDoc constructor
   60|      0|    GString *fileNameA = new GString(param13.c_str());
   61|       |
   62|       |    // Call the function under test
   63|      0|    PDFDoc pdf_doc(fileNameA); // Using the constructor that requires a GString
   64|      0|	auto start_func = std::chrono::high_resolution_clock::now();
   65|      0|    pdf_doc.displayPageSlice(output_dev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, abortCheckCallback, param12);
   66|      0|	auto end_func = std::chrono::high_resolution_clock::now();
   67|       |
   68|       |    // Clean up
   69|      0|    delete output_dev;
   70|      0|    delete fileNameA; // Clean up GString
   71|      0|auto end_target = std::chrono::high_resolution_clock::now();
   72|      0|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   73|       |
   74|      0|    return 0;
   75|      3|}

_ZN9OutputDevC2Ev:
   39|      3|  OutputDev() {}
_ZN9OutputDevD2Ev:
   42|      3|  virtual ~OutputDev() {}

