{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPageSlice function\\n    OutputDev* outputDev = nullptr; // Initialize with a valid pointer\\n    int param1 = stream.ConsumeIntegral<int>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    int param4 = stream.ConsumeIntegral<int>();\\n    GBool param5 = stream.ConsumeBool();\\n    GBool param6 = stream.ConsumeBool();\\n    GBool param7 = stream.ConsumeBool();\\n    int param8 = stream.ConsumeIntegral<int>();\\n    int param9 = stream.ConsumeIntegral<int>();\\n    int param10 = stream.ConsumeIntegral<int>();\\n    int param11 = stream.ConsumeIntegral<int>();\\n    void* param12 = nullptr; // Initialize with a valid pointer\\n    void* param13 = nullptr; // Initialize with a valid pointer\\n\\n    // Create an instance of PDFDoc with a valid filename\\n    GString fileName(\"valid_file.pdf\");\\n    PDFDoc pdfDoc(&fileName);\\n\\n    // Call the function-under-test using the instance\\n    pdfDoc.displayPageSlice(outputDev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPageSlice\\n    OutputDev *outputDev = nullptr;\\n    int page = stream.ConsumeIntegral<int>();\\n    double xMin = stream.ConsumeFloatingPoint<double>();\\n    double yMin = stream.ConsumeFloatingPoint<double>();\\n    int xMax = stream.ConsumeIntegral<int>();\\n    GBool b1 = stream.ConsumeBool();\\n    GBool b2 = stream.ConsumeBool();\\n    GBool b3 = stream.ConsumeBool();\\n    int startX = stream.ConsumeIntegral<int>();\\n    int startY = stream.ConsumeIntegral<int>();\\n    int width = stream.ConsumeIntegral<int>();\\n    int height = stream.ConsumeIntegral<int>();\\n    void *loop = nullptr;\\n    void *dataPtr = nullptr;\\n\\n    // Create an instance of PDFDoc with a dummy file name\\n    GString fileName(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&fileName); // Using the constructor that takes a GString pointer\\n\\n    // Define a dummy abortCheckCbk function to pass as argument\\n    GBool dummyAbortCheckCbk(void *data) {\\n        return gFalse;\\n    }\\n\\n    // Call the function-under-test using the instance\\n    pdfDoc.displayPageSlice(outputDev, page, xMin, yMin, xMax, b1, b2, b3, startX, startY, width, height, dummyAbortCheckCbk, loop, dataPtr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}