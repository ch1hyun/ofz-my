{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"fofi/FoFiTrueType.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"splash/SplashGlyphBitmap.h\"\\n#include \"splash/SplashPath.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  unsigned int tounicode_len = stream.remaining_bytes() / 2;\\n  const char* font_path = \"/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf\";\\n  GString s_font_path(font_path);\\n  const auto tounicode = stream.ConsumeBytes<unsigned char>(tounicode_len);\\n\\n  // libpoppler requires that initialize called exactly once.\\n  static bool one_time = []() {\\n    globalParams = new GlobalParams(\"\");\\n    return true;\\n  }();\\n\\n  FoFiTrueType* ff =\\n      FoFiTrueType::load((char*)font_path, strlen(font_path));\\n  // Check for parse failure (issue=6126).\\n  if (!ff)\\n    return 0;\\n\\n  GString* fname = new GString(\"ABCDEF+\");\\n  Ref embRef = {-1, 0};\\n  GfxFont* font = Gfx8BitFont::makeFont(\\n      fname, embRef, new GString(\"FoFiTrueType\"),\\n      ((ff->getIsSymbolic()) ? fontTrueType : fontType1C), 2, 1,\\n      new GString(\"ABC DE\"), new GString(\"MacRomanEncoding\"),\\n      new GString((char*)tounicode.data(), tounicode_len), nullptr, nullptr,\\n      nullptr, nullptr);\\n\\n  SplashOutputDev splash_out(splashModeRGB8, 4, gFalse, nullptr);\\n  splash_out.startDoc(nullptr);\\n  GfxState* state = new GfxState(\\n      72.0, 72.0, splash_out.getClip(), 0, gTrue,\\n      nullptr);  // The pointer is just being passed around, not owned.\\n\\n  auto ustring = stream.ConsumeRemainingBytes<unsigned char>();\\n  Unicode* u = (Unicode*)ustring.data();\\n  int len = ustring.size();\\n  splash_out.drawChar(\\n      state, 0, 0, 0, 0, 0, 0, 0, 2, u, len,\\n      false,  // Whether or not to adjust the text matrix and the pen position.\\n      true,   // Filled?\\n      false   // Whether or not to stroke.\\n  );\\n\\n  delete state;\\n  delete ff;\\n  delete font;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"GfxState.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/TextString.h\"\\n#include \"/src/xpdf-4.05/xpdf/CMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxMatrix.h\"\\n#include \"/src/freetype/src/gzip/inffixed.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/Lexer.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  double tOriginX = fdp.ConsumeFloatingPoint<double>();\\n  double tOriginY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegralInRange<CharCode>(0, 255);\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  GBool freeData = fdp.ConsumeBool();\\n  GBool adjustFill = fdp.ConsumeBool();\\n  GBool fill = fdp.ConsumeBool();\\n\\n  double params[6] = {1.0, 0.0, 0.0, 1.0, 0.0, 0.0};\\n  GfxMatrix *matrix = new GfxMatrix(params);\\n  GfxState *state = new GfxState(72.0, 72.0, matrix);\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n\\n  \\n  size_t unicodeStrSize = fdp.ConsumeIntegralInRange<size_t>(0, 50);\\n  auto unicodeStr = fdp.ConsumeBytes<unsigned char>(unicodeStrSize);\\n  \\n  Unicode * u = new Unicode[unicodeStrSize];\\n  for(size_t i=0; i<unicodeStrSize; i++)\\n    u[i] = unicodeStr[i];\\n\\n  // SplashOutputDev::drawChar requires a startDoc call before invocation.\\n  PDFDoc *doc = new PDFDoc();\\n  int ret;\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setEnableFreeType(const_cast<char*>(\"yes\"));\\n  globalParams->setupBaseFonts(const_cast<char*>(\"/usr/share/cups/fonts\"));\\n  globalParams->setErrQuiet(1);\\n\\n  splashOut->startDoc(doc->getXRef());\\n\\n  splashOut->drawChar(state, dx, dy, originX, originY, tOriginX, tOriginY,\\n                      code, nBytes, u, unicodeStrSize, freeData, adjustFill, fill);\\n\\n  delete splashOut;\\n  delete globalParams;\\n  delete[] u;\\n  delete state;\\n  delete matrix;\\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}