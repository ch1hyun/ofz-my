{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n#include <cstdint> // Include for uint8_t\\n#include <cstddef> // Include for size_t\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Consume Object pointer\\n    Object obj;\\n    size_t obj_size = stream.ConsumeIntegralInRange<size_t>(sizeof(Object), 1000); // Assuming Object size is between sizeof(Object) and 1000 bytes\\n    if (obj_size != sizeof(Object)) {\\n        return 0; // Return early if the size is incorrect\\n    }\\n    stream.ConsumeData(&obj, obj_size);\\n\\n    // Consume int argument\\n    int arg = stream.ConsumeIntegral<int>();\\n\\n    // Call the function-under-test\\n    PDFDoc doc(nullptr);\\n    OutputDev out(nullptr);\\n    Dict resDict(nullptr);\\n    PDFRectangle box;\\n    PDFRectangle cropBox;\\n\\n    Gfx gfx(&doc, &out, &resDict, &box, &cropBox); // Create an instance of Gfx with necessary arguments\\n    gfx.opSetExtGState(&obj, arg);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\" // Include the Object header file\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include the PDFDoc header file\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include the OutputDev header file\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\" // Include the GlobalParams header file\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\" // Include the XRef header file\\n\\n#include <cstdint>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for opSetExtGState function\\n    Object obj; // Removed Gfx:: namespace\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Create necessary objects for Gfx constructor\\n    GlobalParams *globalParams = new GlobalParams();\\n    XRef *xref = new XRef(nullptr, globalParams);\\n    PDFDoc pdfDoc(xref);\\n    OutputDev *outputDev = nullptr; // OutputDev is an abstract class, so we cannot instantiate it directly\\n    Dict *resDict = new Dict(xref);\\n\\n    // Call the function-under-test\\n    Gfx gfx(&pdfDoc, outputDev, resDict, nullptr, nullptr);\\n    gfx.opSetExtGState(&obj, value); // Removed Gfx:: namespace\\n\\n    delete globalParams;\\n    delete xref;\\n    delete resDict;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}