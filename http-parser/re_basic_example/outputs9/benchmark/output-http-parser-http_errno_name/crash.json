{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n    uint8_t reduced_data = data[0] % (sizeof(enum http_errno) / sizeof(int));\\n    http_errno_name((enum http_errno)reduced_data);\\n    return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include \"http_parser.h\"\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size == 0)\\n    return 0;\\n\\n  // Treat the first byte of the data as http_errno type.\\n  enum http_errno err = (enum http_errno)data[0];\\n  if(err < 0 || err >= _HTTP_ERRNO_H) { // Check if the error number is within the valid range\\n    return 0;\\n  }\\n\\n  (void)http_errno_name(err);\\n\\n  return 0;\\n} \\n\\n#ifdef __cplusplus\\n}\\n#endif\\n// This solution checks if the error number is within the valid range before passing it to the http_errno_name function. This prevents the function from crashing when it receives an invalid error number.",
        "model": ""
    }

    ]
}