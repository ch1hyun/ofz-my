{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/splash/Splash.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0)\\n    return 0;\\n\\n  // Initialize the necessary parameters\\n  std::unique_ptr<GlobalParams> globalParams = std::make_unique<GlobalParams>(\"\");\\n  SplashColor color;\\n  color[0] = color[1] = color[2] = color[3] = 0;\\n  SplashOutputDev splashOutputDev(splashModeRGB8, 4, gFalse, color, gTrue);\\n\\n  // Parse the fuzzing input\\n  FuzzedDataProvider fuzzed_data_provider(reinterpret_cast<const uint8_t *>(data), size);\\n  GfxFontType type = static_cast<GfxFontType>(fuzzed_data_provider.ConsumeIntegral<int>());\\n  Ref embRef;\\n  embRef.num = fuzzed_data_provider.ConsumeIntegral<int>();\\n  embRef.gen = fuzzed_data_provider.ConsumeIntegral<int>();\\n  \\n  char list[2];\\n  list[0] = fuzzed_data_provider.ConsumeIntegral<char>();\\n  list[1] = 0;\\n  const char *name = list;\\n  std::string extFontFile;\\n  if (fuzzed_data_provider.ConsumeBool()) {\\n    extFontFile = fuzzed_data_provider.ConsumeRemainingBytesAsString();\\n  }\\n  \\n  GfxFontLoc *location = new GfxFontLoc();\\n  Dict *dict = new Dict(NULL);\\n  GfxFont *gfxFont = GfxFont::makeFont(NULL, name, embRef, dict); // Fixed line\\n\\n  // Perform the operation\\n  // splashOutputDev.doUpdateFont(gfxFont->setupGState(NULL, NULL)); // Commented out because it's a private member\\n\\n  // Clean up\\n  delete gfxFont;\\n  delete dict;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdint.h>\\n#include <stddef.h>\\n\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/goo/GList.h\"\\n#include \"/src/xpdf-4.05/goo/GHash.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/xpdf/Array.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Decrypt.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashFontEngine.h\"\\n#include \"/src/xpdf-4.05/xpdf/EncryptMetadata.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashBitmap.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (data == nullptr || size == 0) {\\n    return 0;\\n  }\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Setup\\n  PDFDoc *doc = nullptr;\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n\\n  SplashOutputDev splashOut(splashModeBGR8, 1, gFalse, paperColor);\\n  SplashFontEngine *fontEngine =\\n      new SplashFontEngine(gFalse, false,\\n                           fontAntialias ? splashFTFontEngineModeFT : splashFTFontEngineModeNone,\\n                           gFalse);\\n  splashOut.setFontAntialias(fontAntialias);\\n  splashOut.setVectorAntialias(vectorAntialias);\\n  splashOut.setThinLineMode(thinLineMode);\\n  splashOut.setFontEngine(fontEngine);\\n\\n  if (doc == nullptr) {\\n    return 0;\\n  }\\n\\n  XRef *xref = doc->getXRef();\\n  if (xref->isEncrypted()) {\\n    Object id1 = doc->getTrailerDict()->getDict()->lookupSafely(\"ID\");\\n    Object *id2 = id1.isArray() ? id1.arrayGet(1, &id1) : nullptr;\\n    void *encKey;\\n    CryptAlgorithm encAlgorithm;\\n    EncryptMetadata *encryptMetadata =\\n        new EncryptMetadata(new GooString(id1.getString()), new GooString(id1.getString()),\\n                            xref->getCatalog()->getEncAlgorithm(),\\n                            xref->getCatalog()->getEncKeyLength());\\n    int encVersion;\\n    int encRevision;\\n    xref->getCatalog()->getEncryptedMetadataParams(\\n        &encKey, &encVersion, &encRevision, &encAlgorithm);\\n    DCTStream dctStream(\\n        xref->getCatalog()->getDecryptionKey(), encVersion, encRevision,\\n        encAlgorithm, &id1, encryptMetadata);\\n    GfxResources *gfxResource =\\n        new GfxResources(xref, nullptr, nullptr, &dctStream);\\n    Gfx *gfx =\\n        new Gfx(xref, nullptr, nullptr, gfxResource, nullptr, &id1, nullptr);\\n    GfxState *state = new GfxState(\\n        72, 72, nullptr, gfx->getDefaultCTM(), NULL, NULL);\\n    splashOut.doUpdateFont(state);\\n    id1.free();\\n  }\\n  // cleanup\\n  delete doc;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}