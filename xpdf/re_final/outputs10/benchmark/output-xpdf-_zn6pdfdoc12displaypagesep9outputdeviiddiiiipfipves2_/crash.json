{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"GfxState.h\" // for GfxState\\n#include \"Object.h\" // for Object\\n#include \"Stream.h\" // for Stream\\n#include \"Dict.h\" // for Dict\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n\\n// Dummy concrete subclass of OutputDev\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  GBool upsideDown() override { return gFalse; }\\n  GBool useDrawChar() override { return gTrue; }\\n  GBool interpretType3Chars() override { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 4) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  // Create a dummy PDFDoc object\\n  GString fileName(\"dummy.pdf\");\\n  PDFDoc doc(&fileName, nullptr, nullptr, nullptr);\\n\\n  // Create a dummy OutputDev object\\n  MyOutputDev output;\\n\\n  // Extract values from fuzzed data\\n  int startPage = fuzzed_data.ConsumeIntegral<int>();\\n  int endPage = fuzzed_data.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data.ConsumeBool();\\n  GBool crop = fuzzed_data.ConsumeBool();\\n  GBool printing = fuzzed_data.ConsumeBool();\\n\\n  // Create a dummy stream object\\n  Stream *stream = new Stream();\\n\\n  // Call the function under test\\n  doc.displayPages(&output, startPage, endPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, nullptr, stream);\\n\\n  // Delete the stream object to avoid memory leak\\n  delete stream;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GlobalParams.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 4) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  int first_page_num = fuzzed_data.ConsumeIntegral<int>();\\n  int last_page_num = fuzzed_data.ConsumeIntegral<int>();\\n  double h_dpi = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double v_dpi = fuzzed_data.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data.ConsumeIntegral<int>();\\n  GBool use_media_box = fuzzed_data.ConsumeBool();\\n  GBool crop = fuzzed_data.ConsumeBool();\\n  GBool printing = fuzzed_data.ConsumeBool();\\n  \\n  SplashColor paperColor;\\n  paperColor[0] = paperColor[1] = paperColor[2] = 255; // white\\n  \\n  // Fix: Initialize globalParams with a non-null cfgFileName\\n  const char *cfgFileName = \"dummy.cfg\";\\n  globalParams = new GlobalParams(cfgFileName); // Initialize globalParams before creating SplashOutputDev\\n  \\n  SplashOutputDev *output_dev = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  output_dev->startDoc(nullptr);\\n  \\n  GString fileNameA(fuzzed_data.ConsumeRemainingBytesAsString().c_str());\\n  \\n  PDFDoc doc(&fileNameA);\\n  doc.displayPages(output_dev, first_page_num, last_page_num, h_dpi, v_dpi, rotate, use_media_box, crop, printing, nullptr, nullptr);\\n  \\n  delete output_dev;\\n  delete globalParams; // Clean up globalParams after use\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}