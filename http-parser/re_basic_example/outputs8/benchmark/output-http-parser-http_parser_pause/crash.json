{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "20.42",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nhttp_parser_settings settings_null{};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < 3)\\n    return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Removed FuzzedDataProvider and replaced it with equivalent C code\\n  int pause_flag = data[0] % 2; // Ensure pause_flag is either 0 or 1\\n  size_t len = size - 2;\\n  const char *data_buffer = (const char *)(data + 2);\\n\\n  // Parsing the part of data\\n  size_t parsed = http_parser_execute(&parser, &settings_null, data_buffer, len);\\n\\n  // Check if parsing was successful before pausing\\n  if (parsed == len) {\\n    // Pause the HTTP parser\\n    http_parser_pause(&parser, pause_flag);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.10",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  if (stream.remaining_bytes() > 0) {\\n    const uint8_t next_byte = stream.ConsumeIntegral<uint8_t>();\\n    if (next_byte >= 128) {\\n      // For any byte less than 128, disable pausing\\n      http_parser_pause(&parser, 0);\\n    } else {\\n      // For any byte equal or greater than 128, enable pausing\\n      http_parser_pause(&parser, 1);\\n    }\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}