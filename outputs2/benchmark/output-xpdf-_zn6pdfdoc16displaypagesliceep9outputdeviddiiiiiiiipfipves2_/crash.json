{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "45.39",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n\\n// Assuming these types are defined somewhere in your codebase\\nclass OutputDev {};\\nusing GBool = bool;\\nstruct DW_TAG_subroutine_typeInfiniteLoop {};\\n\\n// Forward declaration of PDFDoc class\\nclass PDFDoc {\\npublic:\\n    static void displayPageSlice(OutputDev *outputDev, int pageIndex, double x1, double y1, int width, GBool render, GBool text, GBool images, int rotate, int quality, int flags1, int flags2, DW_TAG_subroutine_typeInfiniteLoop *loop, void *userData);\\n};\\n\\nvoid PDFDoc::displayPageSlice(OutputDev *outputDev, int pageIndex, double x1, double y1, int width, GBool render, GBool text, GBool images, int rotate, int quality, int flags1, int flags2, DW_TAG_subroutine_typeInfiniteLoop *loop, void *userData) {\\n    // Implementation of the function (not provided in the original code)\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an OutputDev instance\\n    OutputDev outputDev;\\n\\n    // Consume parameters\\n    int pageIndex = fuzzed_data.ConsumeIntegral<int>();\\n    double x1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int width = fuzzed_data.ConsumeIntegral<int>();\\n    GBool render = fuzzed_data.ConsumeBool();\\n    GBool text = fuzzed_data.ConsumeBool();\\n    GBool images = fuzzed_data.ConsumeBool();\\n    int rotate = fuzzed_data.ConsumeIntegral<int>();\\n    int quality = fuzzed_data.ConsumeIntegral<int>();\\n    int flags1 = fuzzed_data.ConsumeIntegral<int>();\\n    int flags2 = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Create a DW_TAG_subroutine_typeInfiniteLoop instance\\n    DW_TAG_subroutine_typeInfiniteLoop loop;\\n\\n    // Create a user data pointer\\n    std::vector<uint8_t> userDataVector = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    void *userData = userDataVector.data();\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    PDFDoc::displayPageSlice(&outputDev, pageIndex, x1, y1, width, render, text, images, rotate, quality, flags1, flags2, &loop, userData);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\" // Updated to the correct path for GString\\n#include \"/src/xpdf-4.05/xpdf/GBool.h\"   // Include GBool for gTrue and gFalse\\n\\n// Placeholder definition for DW_TAG_subroutine_typeInfinite_loop\\nstruct DW_TAG_subroutine_typeInfinite_loop {}; \\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a FuzzedDataProvider object\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize parameters\\n    auto output_dev_bytes = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(OutputDev));\\n    if (output_dev_bytes.size() != sizeof(OutputDev)) return 0; // Validate size\\n    OutputDev* output_dev = reinterpret_cast<OutputDev*>(output_dev_bytes.data());\\n\\n    int int_param1 = fuzzed_data.ConsumeIntegral<int>();\\n    double double_param1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double double_param2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int int_param2 = fuzzed_data.ConsumeIntegral<int>();\\n    \\n    // Use GBool from the included GBool.h\\n    GBool bool_param1 = fuzzed_data.ConsumeBool() ? gTrue : gFalse; \\n    GBool bool_param2 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n    GBool bool_param3 = fuzzed_data.ConsumeBool() ? gTrue : gFalse;\\n    \\n    int int_param3 = fuzzed_data.ConsumeIntegral<int>();\\n    int int_param4 = fuzzed_data.ConsumeIntegral<int>();\\n    int int_param5 = fuzzed_data.ConsumeIntegral<int>();\\n    int int_param6 = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Initialize the last two parameters\\n    auto infinite_loop_bytes = fuzzed_data.ConsumeBytes<uint8_t>(sizeof(DW_TAG_subroutine_typeInfinite_loop));\\n    if (infinite_loop_bytes.size() != sizeof(DW_TAG_subroutine_typeInfinite_loop)) return 0; // Validate size\\n    DW_TAG_subroutine_typeInfinite_loop* infinite_loop_param = reinterpret_cast<DW_TAG_subroutine_typeInfinite_loop*>(infinite_loop_bytes.data());\\n    \\n    // Use ConsumeRandomLengthString to create a valid char buffer for PDFDoc\\n    std::string file_name = fuzzed_data.ConsumeRandomLengthString(); // Random string for file name\\n    GString g_file_name(file_name.c_str()); // Create GString from the random string\\n    \\n    // Call the PDFDoc constructor with a valid GString\\n    PDFDoc pdf_doc(&g_file_name); // Create an instance of PDFDoc with a valid file name\\n\\n    // Use remaining bytes for the last void pointer\\n    void* void_param = fuzzed_data.ConsumeRemainingBytes<uint8_t>().data(); \\n\\n    // Call the function under test\\n    pdf_doc.displayPageSlice(output_dev, int_param1, double_param1, double_param2, int_param2, bool_param1, bool_param2, bool_param3, int_param3, int_param4, int_param5, int_param6, infinite_loop_param, void_param);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}