{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <config.h>\\n#include <Object.h>\\n#include <GfxState.h>\\n#include <OutputDev.h>\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include <PDFDoc.h>\\n#include <XRef.h>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    bool useOverprintPreview() override { return gFalse; };\\n    void startPage(int pageNum, GfxState *state) override {};\\n    void endPage() override {};\\n    void drawString(GfxState *state, GString *s) override {};\\n    void eoFill(GfxState *state) override {};\\n    void fill(GfxState *state) override {};\\n    void stroke(GfxState *state) override {};\\n    void updateFillColor(GfxState *state) override {};\\n    void updateFillOpacity(GfxState *state) override {};\\n    void updateStrokeColor(GfxState *state) override {};\\n    void updateStrokeOpacity(GfxState *state) override {};\\n    void updateFillOverprint(GfxState *state) override {};\\n    void updateStrokeOverprint(GfxState *state) override {};\\n    void updateOverprintMode(GfxState *state) override {};\\n    void updateFillColorSpace(GfxState *state) override {};\\n    void updateStrokeColorSpace(GfxState *state) override {};\\n    void updateFont(GfxState *state) override {};\\n    GBool getStreamData(GfxState * state, Stream * str,\\n            int width, int height, int bpc, GfxImageColorMap * colorMap,\\n            int * maskColors,\\n            GBool inlineImg,\\n            ImageStream * buf) override { return gFalse; };\\n    int* downscaleImage(GfxState *state, int orig_width, int orig_height,\\n                        GfxImageColorMap *colorMap,\\n                        int *buffer, int width, int height) override { return buffer; };\\n    void processLink(Link *link) override {};\\n    void drawImageMask(GfxState *state, Object *ref, Stream *str,\\n                       int width, int height, GBool invert,\\n                       GBool interpolate, GBool inlineImg) override {};\\n    void drawImage(GfxState *state, Object *ref, Stream *str,\\n                   int width, int height, GfxImageColorMap *colorMap,\\n                   GBool interpolate, int *maskColors, GBool inlineImg) override {};\\n    void clip(GfxState *state) override {};\\n    void eoClip(GfxState *state) override {};\\n    bool isReverseVideo() const override { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  std::string name = \"\\x01\";\\n  std::vector<unsigned char> extgstate_dict_data = stream.ConsumeBytes<unsigned char>(stream.remaining_bytes());\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(extgstate_dict_data.data(), extgstate_dict_data.size());\\n    if (doc->isOk() == gTrue) {\\n      XRef *xref = doc->getXRef();\\n      int key2 = 1;\\n      unsigned int xt = xref->getEntry(1).type;\\n      unsigned int off = xref->getEntry(1).offset;\\n      unsigned int gen = xref->getEntry(1).gen;\\n\\n      Object obj;\\n      xref->fetch(key2, gen, &obj);\\n\\n      GooString *goo = new GooString;\\n      goo->append('Q');\\n      goo->append(' ');\\n      goo->append('q');\\n      goo->append(' ');\\n      goo->append(\"/GS\");\\n      goo->append(name.c_str());\\n      goo->append(' ');\\n      goo->append(\"gs\");\\n      goo->append(' ');\\n      Parser *parser = new Parser(xref, new Lexer(xref, goo), gTrue);\\n\\n      GfxResources *gfxRes = new GfxResources(xref, obj.getDict(), NULL);\\n      DummyOutputDev dummy;\\n      Gfx *gfx = new Gfx(doc->getCatalog(), &dummy, doc->getPdfResources(), gfxRes, parser, &obj);\\n      gfx->opSetExtGState(&obj, 1);\\n      \\n      delete gfx;\\n      delete parser;\\n      delete gfxRes;\\n      obj.free();\\n    }\\n  } catch(...) {}\\n  \\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <GfxState.h>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"ImageOutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Decrypt.h\"\\n#include \"parseargs.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/JPXStream.h\"\\n#include \"/src/freetype/src/type1/t1parse.h\"\\n#include \"/src/xpdf-4.05/xpdf/JBIG2Stream.h\"\\n#include \"/src/freetype/include/freetype/internal/t1types.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (sizeof(GfxExtGState) > size) {\\n    return 0;\\n  }\\n\\n  // Initialize GfxExtGState.\\n  GfxExtGState gstate;\\n  memcpy(&gstate, data, sizeof(GfxExtGState));\\n\\n  // Setup Object object_idx_array with current ExtGState.\\n  Object object_idx_array[1];\\n  object_idx_array[0].initExtGState(&gstate);\\n\\n  // Set up plumbing to create Gfx Object\\n  globalParams = std::make_unique<GlobalParams>();\\n  PDFDoc doc(std::make_unique<BaseStream>(), std::make_unique<Object>(),\\n              std::make_unique<Encrypt>());\\n\\n  // Create Gfx Object using a \"valid\" page.\\n  Object page_obj;\\n  page_obj.setNull();\\n  Gfx gfx(&doc, &page_obj, nullptr, nullptr, nullptr, nullptr);\\n\\n  // Attempt set ExtGState\\n  int index = 0;\\n  gfx.opSetExtGState(object_idx_array, index);\\n \\n  return 0;\\n\\n}",
        "model": ""
    }

    ]
}