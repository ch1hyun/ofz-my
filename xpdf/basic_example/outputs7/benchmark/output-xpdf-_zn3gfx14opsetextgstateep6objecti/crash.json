{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <PDFDoc.h>\\n#include <Object.h>\\n#include <Gfx.h>\\n#include <GString.h>\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  unsigned char *obj_data;\\n  if (size <= sizeof(int))\\n  {\\n    return 0;\\n  }\\n  else\\n  {\\n    obj_data = stream.ConsumeBytes<unsigned char>(sizeof(int)).data();\\n  }\\n\\n  int num_args = *reinterpret_cast<int *>(obj_data);\\n  \\n  Object obj_array[2];\\n  for (int i = 0; i < num_args; i++)\\n  {\\n    Object obj = Object();\\n    obj.initNull();\\n    obj_array[i] = obj;\\n  }\\n\\n  // Create a MemStream object from the fuzzing data\\n  MemStream memStream(obj_data, 0, size, Object(objNull));\\n\\n  // Create a PDFDoc object using the MemStream\\n  PDFDoc doc(&memStream);\\n\\n  // Create an instance of OutputDev (or a subclass) to pass as the second argument to Gfx\\n  SplashColorMode colorMode = splashModeRGB8;\\n  SplashColor splashColor;\\n  splashColor[0] = 0;\\n  splashColor[1] = 0;\\n  splashColor[2] = 0;\\n  SplashOutputDev splashOut(colorMode, 4, gFalse, splashColor);\\n\\n  Gfx gfx(&doc, &splashOut, NULL, NULL, NULL, NULL);\\n\\n  // As opSetExtGState is a private member of Gfx, we cannot call it directly.\\n  // Instead, we should call a public method that eventually calls opSetExtGState.\\n  // For example, if execOp is such a method, we can call:\\n  // gfx.execOp(\"opSetExtGState\", obj_array, num_args);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stdio.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n#include \"Gfx.h\"\\n#include \"XRef.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  int int_arg = stream.ConsumeIntegral<int>();\\n\\n  const std::vector<uint8_t> obj_data = stream.ConsumeBytes<uint8_t>(stream.remaining_bytes());\\n\\n  // Initialize a XRef, Object and Gfx\\n  BaseStream *strA = nullptr;\\n  GBool repair = gFalse;\\n  XRef xref(strA, repair);\\n  \\n  Object obj;\\n  obj.initNull();\\n  \\n  GString *fileNameA = new GString(\"dummy\");\\n  PDFDoc doc(fileNameA);\\n  \\n  OutputDev *outA = nullptr;\\n  Dict *resDict = nullptr;\\n  PDFRectangle *box = nullptr;\\n  PDFRectangle *cropBox = nullptr;\\n  GBool (*abortCheckCbkA)(void *data) = nullptr;\\n  void *abortCheckCbkDataA = nullptr;\\n  Gfx gfx(&doc, outA, resDict, box, cropBox, abortCheckCbkA, abortCheckCbkDataA);\\n\\n  // Call the function now\\n  gfx.display(&obj, int_arg);\\n\\n  // Call the required function\\n  // gfx.opSetExtGState(&obj, int_arg); // This function is private and cannot be called directly\\n\\n  // Instead, we can use a public function that calls opSetExtGState internally\\n  // For example, if there is a public function named 'setGraphicsState' that calls 'opSetExtGState', we can use it like this:\\n  // gfx.setGraphicsState(&obj, int_arg); // This line is commented out since there is no such function in the Gfx class\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}