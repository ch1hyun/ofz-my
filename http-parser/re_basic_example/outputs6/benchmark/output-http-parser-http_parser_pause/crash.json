{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.21",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  static const http_parser_settings settings_null = {\\n      .on_message_begin = 0,\\n      .on_header_field = 0,\\n      .on_header_value = 0,\\n      .on_url = 0,\\n      .on_status = 0,\\n      .on_body = 0,\\n      .on_headers_complete = 0,\\n      .on_message_complete = 0,\\n      .on_chunk_header = 0,\\n      .on_chunk_complete = 0\\n  };\\n\\n  size_t parsed = http_parser_execute(&parser, &settings_null, reinterpret_cast<const char*>(data), size);\\n\\n  if(size >= sizeof(int)){\\n    int pause_cb = *((int*)data);\\n    http_parser_pause(&parser, pause_cb);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.99",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size<1) return 0;\\n  \\n  FuzzedDataProvider stream(data, size);\\n  http_parser_settings settings = {};\\n  http_parser parser;\\n\\n  http_parser_init(&parser, HTTP_BOTH);\\n  int pause = stream.ConsumeIntegral<int>(); //Get value for pause from fuzzer\\n  pause = pause % 2 ? 1 : 0;\\n  http_parser_pause(&parser, pause);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}