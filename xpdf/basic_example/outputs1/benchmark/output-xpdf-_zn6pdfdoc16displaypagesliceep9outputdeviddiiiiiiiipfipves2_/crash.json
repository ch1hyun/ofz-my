{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n    double hdpi = provider.ConsumeFloatingPoint<double>();\\n    double vdpi = provider.ConsumeFloatingPoint<double>();\\n    int rotate = provider.ConsumeIntegral<int>();\\n    bool useMediaBox = provider.ConsumeBool();\\n    bool crop = provider.ConsumeBool();\\n    bool printing = provider.ConsumeBool();\\n    std::vector<char> outBuf = provider.ConsumeRemainingBytes<char>();\\n  \\n    // Copy the data to a new buffer that can be managed by GString\\n    char* buffer = new char[outBuf.size()];\\n    memcpy(buffer, outBuf.data(), outBuf.size());\\n    GString str(buffer, outBuf.size());\\n\\n    PDFDoc doc(&str);\\n\\n    if (!doc.isOk() || doc.getNumPages() == 0) {\\n        return 0;\\n    }\\n\\n    SplashColor  paperColor;\\n    SplashColor  bitmapColor;\\n    GBool bitmapTopDownA = gTrue;\\n    SplashOutputDev   splash(splashModeRGB8, 3, gFalse, paperColor, bitmapTopDownA, gTrue);\\n \\n    splash.startDoc(doc.getXRef());\\n    doc.displayPageSlice(&splash, 1, hdpi, vdpi, rotate, useMediaBox, crop, printing, 0, 0, 211, 322, nullptr, nullptr);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.91",
        "coverage_diff": "0.0002645693532481901",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"PreScanOutputDev.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int pg = fdp.ConsumeIntegral<int>();\\n  double dpi = fdp.ConsumeFloatingPoint<double>();\\n  double dpiPrint = fdp.ConsumeFloatingPoint<double>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n\\n  std::vector<unsigned char> remainingInput = fdp.ConsumeRemainingBytes<unsigned char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  BaseStream *str = new MemStream((char *)remainingInput.data(), 0, remainingInput.size(), &obj);\\n\\n  const char *cfgFileName = \"\"; // Add this line\\n  globalParams = new GlobalParams(cfgFileName); // Modify this line\\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL);\\n\\n  if (!doc->isOk()) {\\n    delete doc;\\n    delete globalParams;\\n    return 0;\\n  }\\n\\n  OutputDev *out = new PreScanOutputDev();\\n\\n  doc->displayPageSlice(out, pg, dpi, dpiPrint, 0, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n\\n  delete out;\\n  delete doc;\\n  delete globalParams;\\n\\n  return 0;\\n} ",
        "model": ""
    }

    ]
}