{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "22.71",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Create dummy callbacks for http_parser_settings\\nint noop_cb(http_parser *p) \\n{ \\n    return 0; \\n} \\n\\nint data_cb(http_parser *p, const char *buf, size_t len) \\n{ \\n    return 0; \\n}\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n\\n  // Initialize http_parser settings\\n  settings.on_message_begin = noop_cb;\\n  settings.on_header_field = data_cb;\\n  settings.on_header_value = data_cb;\\n  settings.on_url = data_cb;\\n  settings.on_status = data_cb;\\n  settings.on_body = data_cb;\\n  settings.on_headers_complete = noop_cb;\\n  settings.on_message_complete = noop_cb;\\n  settings.on_chunk_header = noop_cb;\\n  settings.on_chunk_complete = noop_cb;\\n\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  http_parser_execute(&parser, &settings, (const char*)data, size);\\n  http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "20.99",
        "coverage_diff": "0.006918238993710692",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  http_parser_settings_init(&settings);\\n\\n  http_parser_execute(&parser, &settings, (const char*)data, size);\\n  \\n  int shouldKeepAlive = http_should_keep_alive(&parser);\\n\\n  return shouldKeepAlive;\\n}",
        "model": ""
    }

    ]
}