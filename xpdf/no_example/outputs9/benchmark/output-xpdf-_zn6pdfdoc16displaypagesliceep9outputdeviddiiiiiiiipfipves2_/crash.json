{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.69",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <iostream>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nclass StreamYesOutputs : public SplashOutputDev {\\npublic:\\n    StreamYesOutputs(SplashColorMode colorMode, int colorTypeA, GBool bitmapTopDown, SplashColor color)\\n        : SplashOutputDev(colorMode, colorTypeA, bitmapTopDown, color)\\n    {\\n    }\\n\\n    GBool useTilingPatternFill() override\\n    {\\n        return gTrue;\\n    }\\n\\n    GBool useShadedFills()\\n    {\\n        return gTrue;\\n    }\\n\\n    GBool useFillColorStop()\\n    {\\n        return gTrue;\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n\\n    double hDPI = fdp.ConsumeFloatingPoint<double>();\\n    double vDPI = fdp.ConsumeFloatingPoint<double>();\\n    int rotate = fdp.ConsumeIntegral<int>();\\n    GBool useMediaBox = fdp.ConsumeBool();\\n    GBool crop = fdp.ConsumeBool();\\n    GBool printing = fdp.ConsumeBool();\\n    int sliceX = fdp.ConsumeIntegral<int>();\\n    int sliceY = fdp.ConsumeIntegral<int>();\\n    int sliceW = fdp.ConsumeIntegral<int>();\\n    int sliceH = fdp.ConsumeIntegral<int>();\\n    void *abortCheckCbkData = NULL;  // The value for this is not known, so currently assigning NULL\\n\\n    std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n    Object xpdf_obj;\\n    xpdf_obj.initNull();\\n    BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n    globalParams = new GlobalParams(NULL);\\n    globalParams->setErrQuiet(1);\\n    globalParams->setupBaseFonts(NULL);\\n    char yes[] = \"yes\";\\n    globalParams->setEnableFreeType(yes);\\n    globalParams->setErrQuiet(1);\\n\\n    PDFDoc *doc = NULL;\\n    try {\\n        doc = new PDFDoc(stream);\\n        if (!doc->isOk())\\n        {\\n            delete doc;\\n            delete globalParams;\\n            return 0;\\n        }\\n\\n        SplashColor paperColor = {255, 255, 255};\\n        StreamYesOutputs splashOutputDev(splashModeRGB8, 3, gFalse, paperColor);\\n\\n        for (int pageNum = 1; pageNum <= doc->getNumPages(); pageNum++) {\\n            doc->displayPageSlice(&splashOutputDev, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing,\\n                                  sliceX, sliceY, sliceW, sliceH, nullptr, abortCheckCbkData);\\n        }\\n    } catch (const std::exception &e) {\\n        std::cerr << e.what();\\n    }\\n\\n    delete doc;\\n    delete globalParams;\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.65",
        "coverage_diff": "0.0011464671974088239",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  int pageNum = stream.ConsumeIntegral<int>();\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeIntegral<GBool>();\\n  GBool crop = stream.ConsumeIntegral<GBool>();\\n  GBool printing = stream.ConsumeIntegral<GBool>();\\n  int sliceX = stream.ConsumeIntegral<int>();\\n  int sliceY = stream.ConsumeIntegral<int>();\\n  int sliceW = stream.ConsumeIntegral<int>();\\n  int sliceH = stream.ConsumeIntegral<int>();\\n  std::vector<uint8_t> buf(stream.remaining_bytes());\\n  void *abortCheckCbkData = buf.data();\\n\\n  // Create a temporary file with the data provided by the fuzzer\\n  char tempFileName[] = \"/tmp/fuzzed_pdf.XXXXXX\";\\n  int tempFd = mkstemp(tempFileName);\\n  if (tempFd < 0) {\\n    return 0;\\n  }\\n  ssize_t written = write(tempFd, buf.data(), buf.size());\\n  close(tempFd);\\n  if (written != buf.size()) {\\n    remove(tempFileName);\\n    return 0;\\n  }\\n\\n  GString *fileName = new GString(tempFileName);\\n  globalParams = new GlobalParams(\"/path/to/config/file\");\\n  globalParams->setErrQuiet(gFalse);\\n  PDFDoc *doc = new PDFDoc(fileName, NULL, NULL, NULL);\\n  \\n  if (!doc->isOk()) {\\n    delete doc;\\n    delete globalParams;\\n    remove(tempFileName);\\n    return 0;\\n  }\\n\\n  SplashColor splashColor;\\n  splashColor[0] = 255; // white\\n  splashColor[1] = 255; // white\\n  splashColor[2] = 255; // white\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gTrue, splashColor);\\n\\n  doc->displayPageSlice(splashOut, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL, abortCheckCbkData);\\n\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams;\\n  remove(tempFileName);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}