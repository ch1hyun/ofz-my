{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.46",
        "coverage_diff": "0.000489052440852715",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\n// Define a callback function for abortCheckCbk\\nGBool abortCheckCbk(void* data) {\\n  return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  // Create a GString from the fuzzed data\\n  GString *fileNameA = new GString(reinterpret_cast<const char*>(fuzzed_data.ConsumeBytes<uint8_t>(fuzzed_data.remaining_bytes() / 2).data()), fuzzed_data.remaining_bytes() / 2);\\n  \\n  PDFDoc pdf_doc(fileNameA);\\n\\n  int start_page = fuzzed_data.ConsumeIntegral<int>();\\n  int end_page = fuzzed_data.ConsumeIntegral<int>();\\n  double h_dpi = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double v_dpi = fuzzed_data.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data.ConsumeBool();\\n  GBool crop = fuzzed_data.ConsumeBool();\\n  GBool printing = fuzzed_data.ConsumeBool();\\n  OutputDev *output_dev = nullptr;\\n  \\n  // Fixed the error by passing the correct type of argument\\n  pdf_doc.displayPages(output_dev, start_page, end_page, h_dpi, v_dpi, rotate, useMediaBox, crop, printing, &abortCheckCbk, nullptr);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.37",
        "coverage_diff": "0.000481035187723982",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  virtual GBool upsideDown() { return gFalse; }\\n  virtual GBool useDrawChar() { return gTrue; }\\n  virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  // Create necessary objects and initialize with fuzzed data\\n  MyOutputDev outputDev;\\n  int startPage = fuzzed_data.ConsumeIntegral<int>();\\n  int endPage = fuzzed_data.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data.ConsumeBool();\\n  GBool crop = fuzzed_data.ConsumeBool();\\n  GBool printing = fuzzed_data.ConsumeBool();\\n\\n  // Use a dynamically allocated GString object instead of a local one\\n  GString* fileName = new GString(\"fuzzed.pdf\");\\n  PDFDoc pdfDoc(fileName);\\n\\n  // Call the function under test\\n  pdfDoc.displayPages(&outputDev, startPage, endPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, nullptr, nullptr);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}