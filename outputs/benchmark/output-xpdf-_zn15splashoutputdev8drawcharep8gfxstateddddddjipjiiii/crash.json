{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Ref.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  SplashColorMode colorModeA = static_cast<SplashColorMode>(fuzzed_data_provider.ConsumeIntegral<int>());\\n  int bitmapRowPadA = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool reverseVideoA = fuzzed_data_provider.ConsumeBool();\\n  SplashColorPtr paperColorA = nullptr;\\n  GBool bitmapTopDownA = fuzzed_data_provider.ConsumeBool();\\n  GBool allowAntialiasA = fuzzed_data_provider.ConsumeBool();\\n\\n  SplashOutputDev outputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n\\n  double hDPIA = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double vDPIA = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  PDFRectangle pageBox;\\n  int rotateA = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool upsideDown = fuzzed_data_provider.ConsumeBool();\\n\\n  GfxState state(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n  double dx = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double angle = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double ax = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double ay = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double bx = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n\\n  CharCode c = fuzzed_data_provider.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data_provider.ConsumeIntegral<int>();\\n  std::vector<Unicode> unicodes = fuzzed_data_provider.ConsumeBytesAsValueVector<Unicode>(nBytes);\\n  int uLen = unicodes.size();\\n\\n  GBool glyphIsEncoded = fuzzed_data_provider.ConsumeBool();\\n  GBool unicodeStrIsFromCharCode = fuzzed_data_provider.ConsumeBool();\\n  GBool isVertical = fuzzed_data_provider.ConsumeBool();\\n\\n  outputDev.drawChar(&state, dx, dy, angle, ax, ay, bx, c, nBytes, unicodes.data(), uLen, glyphIsEncoded, unicodeStrIsFromCharCode, isVertical);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <vector>\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"FuzzedDataProvider.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 20) return 0; \\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    GfxState *state = new GfxState();\\n    double values[6];\\n    for (int i = 0; i < 6; ++i) {\\n        values[i] = fuzzed_data.ConsumeFloatingPoint<double>();\\n    }\\n    CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n\\n    int byte_length = fuzzed_data.ConsumeIntegralInRange<int>(0, 4);\\n    std::vector<uint8_t> code_bytes = fuzzed_data.ConsumeBytes<uint8_t>(byte_length);\\n    Unicode *u = reinterpret_cast<Unicode *>(code_bytes.data());\\n\\n    int n = fuzzed_data.ConsumeIntegral<int>();\\n    bool numeric = fuzzed_data.ConsumeBool();\\n    bool printing = fuzzed_data.ConsumeBool();\\n    bool encrypted = fuzzed_data.ConsumeBool();\\n\\n    SplashOutputDev splash_device;\\n    splash_device.drawChar(state, values[0], values[1], values[2], values[3], values[4], values[5], \\n                           code, byte_length, u, n, numeric, printing, encrypted);\\n\\n    delete state;\\n    return 0; \\n}",
        "model": ""
    }

    ]
}