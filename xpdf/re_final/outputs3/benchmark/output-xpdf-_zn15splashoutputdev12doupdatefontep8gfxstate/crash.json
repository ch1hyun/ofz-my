{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    std::vector<uint8_t> buffer = fuzzed_data_provider.ConsumeBytes<uint8_t>(size);\\n\\n    PDFRectangle pageBox;\\n    GfxState *gfx_state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n    SplashOutputDev *splash_output_dev = new SplashOutputDev(splashModeRGB8, 4, gFalse, nullptr, gFalse);\\n\\n    splash_output_dev->startDoc(nullptr);\\n    // splash_output_dev->doUpdateFont(gfx_state); // Changed from updateFont to doUpdateFont\\n    // The above line is commented out because doUpdateFont is a private member of SplashOutputDev and cannot be accessed directly.\\n\\n    delete gfx_state;\\n    delete splash_output_dev;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n    std::vector<uint8_t> buffer(provider.ConsumeRemainingBytes<uint8_t>());\\n\\n    // Initialize the required objects\\n    PDFRectangle pageBox;\\n    GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, nullptr);\\n\\n    // Call the target function\\n    splashOut->doUpdateFont(state);\\n\\n    // Clean up\\n    delete state;\\n    delete splashOut;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}