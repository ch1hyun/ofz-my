{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  LibRaw libraw_loader;\\n  \\n  try {\\n    if (fuzzed_data_provider.remaining_bytes() > 0) {\\n      libraw_loader.open_buffer(fuzzed_data_provider.data(), fuzzed_data_provider.size());\\n      libraw_loader.unpack();\\n      libraw_loader.sraw_midpoint();\\n    }\\n  } catch (...) {\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.22",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  LibRaw libraw;\\n\\n  // Check if there is enough data to pass to the function\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  // Convert the fuzzer input to an integer\\n  int midpoint = *reinterpret_cast<const int*>(data);\\n\\n  // Use the integer as input to the function\\n  // The function sraw_midpoint() does not take any arguments, so remove the argument\\n  int result = libraw.sraw_midpoint();\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}