{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <cstdint>\\n#include <vector>\\n#include <memory>\\n\\n#include \"Splash.h\"\\n#include \"SplashTypes.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"SplashFontEngine.h\"\\n#include \"SplashFont.h\"\\n#include \"SplashClip.h\"\\n#include \"GlobalParams.h\"\\n#include \"Annot.h\"\\n#include \"ErrorCodes.h\"\\n#include \"XRef.h\"\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n\\nGlobalParams *globalParams = nullptr;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    // Ensure globalParams\\n    if (!globalParams) {\\n        globalParams = new GlobalParams();\\n    }\\n\\n    // Create SplashColor and SplashOutputDev\\n    SplashColor color;\\n    color[0] = 255;\\n    color[1] = 255;\\n    color[2] = 255;\\n    color[3] = 255;\\n    std::unique_ptr<SplashOutputDev> splashOutputDev = std::make_unique<SplashOutputDev>(splashModeBGR8, 4, gFalse, color);\\n    \\n    FuzzedDataProvider fdp(data, size);\\n    std::string fontDir = fdp.ConsumeRemainingBytesAsString();\\n\\n    // Update splash font with valid parameters\\n    globalParams->setupBaseFonts(fontDir.c_str());\\n    double hDPIA = 72.0;\\n    double vDPIA = 72.0;\\n    PDFRectangle pageBox;\\n    int rotateA = 0;\\n    GBool upsideDown = gTrue;\\n    GfxState* gfxState = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n    splashOutputDev->updateFont(gfxState);\\n    splashOutputDev->doUpdateFont(gfxState); // Added this line to call the required function\\n\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstring>\\n#include <cstdio>\\n#include <list>\\n#include <vector>\\n#include \"/src/freetype/src/autofit/afloader.h\"\\n#include \"/src/freetype/src/cid/cidload.h\"\\n#include \"/src/freetype/src/psaux/psfixed.h\"\\n#include \"/src/freetype/src/bdf/bdf.h\"\\n#include \"/src/freetype/src/autofit/aflatin.h\"\\n#include \"/work/prefix/include/freetype2/freetype/freetype.h\"\\n#include \"/src/freetype/include/freetype/freetype.h\"\\n\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashFont.h\"\\n#include \"SplashFontEngine.h\"\\n#include \"SplashFontFileID.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"GfxFont.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  uint8_t red = stream.ConsumeIntegral<uint8_t>();\\n  uint8_t green = stream.ConsumeIntegral<uint8_t>();\\n  uint8_t blue = stream.ConsumeIntegral<uint8_t>();\\n\\n  SplashColor color;\\n  color[0] = red;\\n  color[1] = green;\\n  color[2] = blue;\\n\\n  SplashOutputDev splashOutputDev(splashModeRGB8, 1, gFalse, color);\\n\\n  std::vector<uint8_t> fakeFontData(size);\\n  memset(fakeFontData.data(), 0, size);\\n  size_t totalBytes = stream.ConsumeIntegralInRange<size_t>(0, size);\\n  for (size_t idx = 0; idx < totalBytes; ++idx) {\\n    fakeFontData[idx] = stream.ConsumeIntegral<uint8_t>();\\n  }\\n\\n  // Set up a fake GfxState object.\\n  double fakeMat[6] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0};\\n  GfxState fakeState(72.0, 72.0, &fakeMat[0], 0, gFalse);\\n\\n  // And a fake GfxFont object.\\n  Dict *fakeDict = new Dict(nullptr);\\n  GfxFont *fakeFont = GfxFont::makeFont(nullptr, const_cast<char*>(\"FakeFont\"), fakeDict);\\n  fakeState.setFont(fakeFont, 1.0);\\n\\n  // Lead the GfxFont into a SplashFont.\\n  FT_Library library;\\n  int err = FT_Init_FreeType(&library);\\n  if (err) {\\n    return 0;\\n  }\\n  SplashFontFileID *id = new SplashFontFileID(nullptr);\\n  SplashFontSrc *src = new SplashFontSrc;\\n  src->setBuf(fakeFontData.data(), fakeFontData.size(), gTrue);\\n  const char *fakeName = \"fake\";\\n  SplashFontFile *fontfile = splashOutputDev.getFontFile(id);\\n  if (!fontfile) {\\n    fontfile =\\n        SplashFTFontFile::loadType1Font(&splashOutputDev, fakeName, id, src, library, fakeFontData.data(), size, gTrue);\\n  }\\n\\n  if (!fontfile) {\\n    delete id;\\n    delete src;\\n    FT_Done_FreeType(library);\\n    return 0;\\n  }\\n\\n  // And now the actual call.\\n  splashOutputDev.doUpdateFont(&fakeState);\\n\\n  delete id;\\n  delete src;\\n  FT_Done_FreeType(library);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}