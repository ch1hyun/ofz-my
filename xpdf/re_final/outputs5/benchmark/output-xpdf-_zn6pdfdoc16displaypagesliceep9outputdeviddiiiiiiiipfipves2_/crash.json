{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  GString fileName(\"test.pdf\");\\n  PDFDoc doc(&fileName);\\n  SplashColor paperColor;\\n  SplashOutputDev *outputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  int pageNum = fuzzed_data_provider.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n  bool useMediaBox = fuzzed_data_provider.ConsumeBool();\\n  bool crop = fuzzed_data_provider.ConsumeBool();\\n  bool printing = fuzzed_data_provider.ConsumeBool();\\n  int sliceX = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int sliceY = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int sliceW = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int sliceH = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool (*abortCheckCbk)(void *data) = nullptr;\\n  void *abortCheckCbkData = nullptr;\\n\\n  doc.displayPageSlice(outputDev, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, abortCheckCbkData);\\n\\n  delete outputDev;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.32",
        "coverage_diff": "0.0004489661752090499",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\n// Create a dummy class to implement the pure virtual methods of OutputDev\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gTrue; }\\n    GBool useDrawChar() override { return gTrue; }\\n    GBool interpretType3Chars() override { return gTrue; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  // Create a FuzzedDataProvider instance to consume fuzzing input.\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  // Create an instance of PDFDoc\\n  GString *fileName = new GString(\"dummy.pdf\");\\n  PDFDoc pdfDoc(fileName);\\n\\n  // Create an instance of OutputDev\\n  DummyOutputDev outputDev;\\n\\n  // Get the page number to display\\n  int pageNum = fuzzed_data.ConsumeIntegral<int>();\\n\\n  // Check if the page number is within the valid range\\n  if (pageNum < 1 || pageNum > pdfDoc.getNumPages()) {\\n    return 0;\\n  }\\n\\n  // Call the function under test\\n  pdfDoc.displayPageSlice(&outputDev, pageNum, fuzzed_data.ConsumeFloatingPoint<double>(),\\n                          fuzzed_data.ConsumeFloatingPoint<double>(), fuzzed_data.ConsumeIntegral<int>(), \\n                          fuzzed_data.ConsumeBool(), fuzzed_data.ConsumeBool(), fuzzed_data.ConsumeBool(), \\n                          fuzzed_data.ConsumeIntegral<int>(), fuzzed_data.ConsumeIntegral<int>(), \\n                          fuzzed_data.ConsumeIntegral<int>(), fuzzed_data.ConsumeIntegral<int>(), \\n                          nullptr, nullptr);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}