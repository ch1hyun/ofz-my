{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.24",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\nenum http_status restrict_status_range(int status_raw) {\\n  if (status_raw >= 100 && status_raw <= 599)\\n    return (enum http_status)status_raw;\\n  else\\n    return (enum http_status)200; // return a default value\\n}\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Ensure the input data can hold int\\n  if (size < sizeof(int))\\n    return 0;\\n\\n  int status_raw;\\n  memcpy(&status_raw, data, sizeof(int));\\n\\n  enum http_status status = restrict_status_range(status_raw);\\n\\n  const char* status_str = http_status_str(status);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.52",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h> // added for memcpy\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2)\\n    return 0;\\n\\n  size_t str_len = size - 1;\\n  char* test_str = malloc(str_len + 1);\\n  memcpy(test_str, data, str_len);\\n  test_str[str_len] = '\\0';\\n  \\n  enum http_status status;\\n  for(status = HTTP_STATUS_CONTINUE; status <= HTTP_STATUS_UPGRADE_REQUIRED; ++status) { // corrected the enum value\\n    const char *status_str = http_status_str(status);\\n    // You can do something with the return value here.\\n  }\\n  \\n  free(test_str);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}