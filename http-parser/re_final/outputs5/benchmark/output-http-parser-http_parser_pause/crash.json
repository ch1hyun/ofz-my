{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "21.10",
        "coverage_diff": "0.006918238993710692",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n\\n  if(size > 1) {\\n    http_parser_init(&parser, HTTP_BOTH);\\n    http_parser_settings settings;\\n    http_parser_settings_init(&settings);\\n    \\n    // Use the last byte of data to determine if we should pause\\n    int should_pause = data[size-1] % 2;\\n    http_parser_pause(&parser, should_pause);\\n\\n    http_parser_execute(&parser, &settings, (char*)data, size-1);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.21",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Callback function to handle pauses\\nint on_message_complete(http_parser* parser) {\\n  return 0;\\n}\\n\\n// Declare and initialize http_parser_settings\\nhttp_parser_settings settings = { .on_message_complete = on_message_complete };\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  if (size > 0) {\\n    size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n    if(parsed > 0)\\n      http_parser_pause(&parser, 1); //call our function-under-test\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}