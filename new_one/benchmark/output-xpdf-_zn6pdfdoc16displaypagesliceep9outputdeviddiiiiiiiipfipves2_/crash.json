{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n#include \"XRef.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return true; }\\n    GBool useDrawChar() override { return true; }\\n    GBool interpretType3Chars() override { return true; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPageSlice function\\n    DummyOutputDev* outputDev = new DummyOutputDev(); // Initialize OutputDev object\\n    int pageNum = stream.ConsumeIntegral<int>();\\n    double startX = stream.ConsumeFloatingPoint<double>();\\n    double startY = stream.ConsumeFloatingPoint<double>();\\n    int sizeX = stream.ConsumeIntegral<int>();\\n    GBool flag1 = stream.ConsumeBool();\\n    GBool flag2 = stream.ConsumeBool();\\n    GBool flag3 = stream.ConsumeBool();\\n    int param1 = stream.ConsumeIntegral<int>();\\n    int param2 = stream.ConsumeIntegral<int>();\\n    int param3 = stream.ConsumeIntegral<int>();\\n    int param4 = stream.ConsumeIntegral<int>();\\n    void* loopPtr = nullptr; // Initialize loop pointer\\n    void* dataPtr = nullptr; // Initialize data pointer\\n\\n    // Call the function-under-test\\n    PDFDoc pdfDoc; // Create an instance of PDFDoc\\n    pdfDoc.displayPageSlice(outputDev, pageNum, startX, startY, sizeX, flag1, flag2, flag3, param1, param2, param3, param4, loopPtr, dataPtr);\\n\\n    // Clean up allocated memory\\n    delete outputDev;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"PDFCore.h\"\\n\\n#include <cstdint>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function-under-test\\n    class MyOutputDev : public OutputDev {\\n    public:\\n        GBool upsideDown() override { return gTrue; }\\n        GBool useDrawChar() override { return gTrue; }\\n        GBool interpretType3Chars() override { return gTrue; }\\n    };\\n    MyOutputDev outputDev;\\n    int page = stream.ConsumeIntegral<int>();\\n    double startX = stream.ConsumeFloatingPoint<double>();\\n    double startY = stream.ConsumeFloatingPoint<double>();\\n    int sizeX = stream.ConsumeIntegral<int>();\\n    GBool b1 = stream.ConsumeBool();\\n    GBool b2 = stream.ConsumeBool();\\n    GBool b3 = stream.ConsumeBool();\\n    int rotate = stream.ConsumeIntegral<int>();\\n    int clip = stream.ConsumeIntegral<int>();\\n    int hDPI = stream.ConsumeIntegral<int>();\\n    int vDPI = stream.ConsumeIntegral<int>();\\n    void *loop = nullptr;\\n    void *userData = nullptr;\\n\\n    // Call the function-under-test\\n    GString fileName(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&fileName);\\n    GBool (*abortCheckCbk)(void *) = NULL; // Define the callback function pointer\\n    pdfDoc.displayPageSlice(&outputDev, page, startX, startY, sizeX, b1, b2, b3, rotate, clip, hDPI, vDPI, abortCheckCbk, loop, userData);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}