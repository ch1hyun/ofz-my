{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "23.55",
        "coverage_diff": "0.008176100628930818",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint message_begin(http_parser* _) {\\n  return 0;\\n}\\n\\nint url(http_parser* _, const char* __, size_t ___) {\\n  return 0;\\n}\\n\\nint status(http_parser* _, const char* __, size_t ___) {\\n  return 0;\\n}\\n\\nint header_field(http_parser* _, const char* __, size_t ___) {\\n  return 0;\\n}\\n\\nint header_value(http_parser* _, const char* __, size_t ___) {\\n  return 0;\\n}\\n\\nint headers_complete(http_parser* _) {\\n  return 0;\\n}\\n\\nint body(http_parser* _, const char* __, size_t ___) {\\n  return 0;\\n}\\n\\nint message_complete(http_parser* _) {\\n  return 0;\\n}\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size == 0) {\\n    return 0;\\n  }\\n  \\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_init(parser, HTTP_BOTH);\\n\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n  \\n  settings.on_message_begin = message_begin;\\n  settings.on_url = url;\\n  settings.on_status = status;\\n  settings.on_header_field = header_field;\\n  settings.on_header_value = header_value;\\n  settings.on_headers_complete = headers_complete;\\n  settings.on_body = body;\\n  settings.on_message_complete = message_complete;\\n  \\n  http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n  int result = http_should_keep_alive(parser);\\n\\n  free(parser);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Declare and initialize http_parser_settings\\nhttp_parser_settings settings = {0};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  if (size > 0) {\\n    http_parser_execute(&parser, &settings, (const char*)data, size);\\n    http_should_keep_alive(&parser);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}