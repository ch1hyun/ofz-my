{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  double a, b, c, d, e, f;\\n  int op;\\n\\n  if(size < sizeof(double)*6 + sizeof(int))\\n    return 0;\\n\\n  a = *((double*)data);\\n  data += sizeof(double);\\n  size -= sizeof(double);\\n\\n  b = *((double*)data);\\n  data += sizeof(double);\\n  size -= sizeof(double);\\n\\n  c = *((double*)data);\\n  data += sizeof(double);\\n  size -= sizeof(double);\\n\\n  d = *((double*)data);\\n  data += sizeof(double);\\n  size -= sizeof(double);\\n\\n  e = *((double*)data);\\n  data += sizeof(double);\\n  size -= sizeof(double);\\n\\n  f = *((double*)data);\\n  data += sizeof(double);\\n  size -= sizeof(double);\\n\\n  op = *((int*)data);\\n  data += sizeof(int);\\n  size -= sizeof(int);\\n  \\n  Dict *dict = new Dict(NULL);\\n  Object obj;\\n  obj.initBool(op);\\n  dict->add(\"op\", &obj);\\n\\n  GfxResources * res = new GfxResources(NULL, dict, NULL);\\n  XRef *xref = new XRef(NULL);\\n  Gfx * gfx = new Gfx(NULL, NULL, 1, dict, 72.0, 72.0, NULL, NULL, 0, NULL, NULL);\\n  \\n  delete dict;\\n  delete gfx;\\n  delete xref;\\n  delete res;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/SecurityHandler.h\"\\n#include \"/src/freetype/src/psaux/psglue.h\"\\n#include \"/src/freetype/src/autofit/afblue.h\"\\n#include \"/src/freetype/src/autofit/afmodule.h\"\\n#include \"/src/freetype/src/psnames/pstables.h\"\\n#include \"/src/freetype/src/autofit/afloader.h\"\\n#include \"/src/freetype/src/lzw/ftzopen.h\"\\n#include \"/src/freetype/src/bdf/bdfdrivr.h\"\\n#include \"/src/freetype/src/sdf/ftsdf.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size<2)\\n       return 0;\\n    int int_arg = data[0];\\n     \\n    std::vector<char> buffer(data, data + size); \\n    buffer.push_back('\\0'); \\n    Object * obj = new Object(std::move(GooString(buffer.data()))); \\n\\n    if (obj->isName()) {\\n        GfxResources* baseGState = NULL;\\n        PDFRectangle* res = NULL;\\n        PDFDoc *doc = NULL;\\n        XRef *xref = NULL;\\n        GooString *filename = new GooString;  // Ensuring filename is not static to keep it\\n                                              // stable in the memory for cleanup\\n        GooString *ownerPW = NULL, *userPW = NULL;\\n\\n        doc = PDFDocFactory().createPDFDoc(*filename, ownerPW, userPW);\\n        if(!doc->isOk())\\n            return 0;\\n\\n        xref=doc->getXRef();\\n        res = new PDFRectangle;\\n        baseGState = new GfxResources(xref, res, NULL);\\n        Gfx *gfx = new Gfx(doc, NULL, -1, 0, NULL, NULL, NULL, NULL, gTrue, gFalse);\\n        gfx->opSetExtGState(obj, int_arg);  // calling function being tested\\n\\n        delete(obj);\\n        delete(baseGState);\\n        delete(doc);\\n        delete(gfx);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}