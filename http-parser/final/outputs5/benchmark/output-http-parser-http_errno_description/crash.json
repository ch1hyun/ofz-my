{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include \"http_parser.h\"\\n\\n// Define a possible range for DW_TAG_enumeration_typehttperrno enumeration\\n#define HTTP_ERRNO_MIN 0\\n#define HTTP_ERRNO_MAX 23\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    if(size < sizeof(int))\\n        return 0;\\n        \\n    int err_raw;\\n    memcpy(&err_raw, data, sizeof(int));\\n\\n    // Limit input values range\\n    if(err_raw < HTTP_ERRNO_MIN || err_raw > HTTP_ERRNO_MAX)\\n        return 0;\\n\\n    enum http_errno err = (enum http_errno)err_raw; // Use C-style cast instead of static_cast which is C++ specific\\n\\n    // Call the function-under-test\\n    const char * errno_description = http_errno_description(err);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Define a possible range for DW_TAG_enumeration_typehttperrno enumeration\\n#define HTTP_ERRNO_MIN 0\\n#define HTTP_ERRNO_MAX 31\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size<sizeof(int))\\n        return 0;\\n\\n    int errno_raw;\\n    memcpy(&errno_raw, data, sizeof(int));\\n\\n    if(errno_raw < HTTP_ERRNO_MIN || errno_raw > HTTP_ERRNO_MAX )\\n        return 0;\\n   \\n    enum http_errno err = static_cast<enum http_errno>(errno_raw);\\n    \\n    // Calling function-under-test\\n    const char * description = http_errno_description(err);\\n\\n    return 0;\\n} \\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}