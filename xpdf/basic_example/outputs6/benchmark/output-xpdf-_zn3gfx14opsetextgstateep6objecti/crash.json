{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Object.h\"\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n#include \"OutputDev.h\"\\n#include \"SplashOutputDev.h\"\\n\\nstatic void dummyDocChanged(GfxState *state, void *data) {}\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  Object obj;\\n  MemStream *memStream = new MemStream((char *)data, 0, size, &obj);\\n  PDFDoc *doc = new PDFDoc(memStream);\\n  GfxResources *res = new GfxResources(doc->getXRef(), new Dict(doc->getXRef()), NULL);\\n  double dMat[6] = {1, 0, 0, 1, 0, 0};\\n  GfxState *state = new GfxState(72.0, 72.0, new PDFRectangle(), 0, gTrue);\\n  SplashColor paperColor;\\n  SplashOutputDev *outA = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  outA->startDoc(doc->getXRef());\\n  Gfx *gfx = new Gfx(doc, outA, 0, res, 72.0, 72.0, new PDFRectangle(), new PDFRectangle(), 0, dummyDocChanged, NULL);\\n\\n  Object args[2];\\n  args[0] = obj;\\n  args[1] = obj;\\n  Object cmd;\\n  cmd.initCmd((char *)\"opSetExtGState\");\\n  gfx->execOp(&cmd, args, 2);\\n  \\n  delete gfx;\\n  delete state;\\n  delete res;\\n  delete doc;\\n  delete outA;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <PDFDoc.h>\\n#include <Object.h>\\n#include <Stream.h>\\n#include <GfxState.h>\\n#include <Gfx.h>\\n#include <GfxFont.h>\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/BuiltinFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/freetype/src/winfonts/winfnt.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  // Create a stream with the fuzzed data\\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream = new MemStream((char*)data, 0, size, &obj);\\n  \\n  // Initialize XRef with a stream and repair flag\\n  XRef xref(stream, gFalse);\\n\\n  // Have to create a sane GfxState\\n  int x = fdp.ConsumeIntegral<int>();\\n  double font_size = fdp.ConsumeFloatingPoint<double>();\\n  PDFRectangle *box = new PDFRectangle();\\n  GfxFont *font = GfxFont::makeFont(&xref, \"Helvetica\", obj.copy(), gFalse);\\n  GfxState *state = new GfxState(x, x, box, x, font_size);\\n\\n  // Create Gfx instance\\n  PDFDoc *doc = new PDFDoc(stream, NULL, NULL);\\n  int len = fdp.ConsumeIntegralInRange<int>(1,100);\\n  std::vector<std::string> commandList(len, \"\");\\n  Gfx *gfx = new Gfx(doc, NULL, NULL, commandList.data(), len);\\n\\n  // Call the function\\n  gfx->opSetExtGState(&obj, fdp.ConsumeIntegral<int>());\\n\\n  // Clean up\\n  delete gfx;\\n  delete doc;\\n  delete box;\\n  delete font;\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}