{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"/src/http-parser/http_parser.c\"\\n\\nextern const char * http_errno_name(int);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    if(size < sizeof(int)){\\n        return 0;\\n    }\\n\\n    int http_errno = *(int *)data;\\n\\n    if(http_errno <= HPE_INVALID_URL && http_errno > 0){\\n        const char * str = http_errno_name(http_errno);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\n// Define a possible range for DW_TAG_enumeration_typehttp_errno enumeration\\n#define HTTP_ERRNO_MIN 0\\n#define HTTP_ERRNO_MAX 63\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    if(size<sizeof(int))\\n        return 0;\\n\\n    int errno_raw;\\n    memcpy(&errno_raw, data, sizeof(int));\\n\\n    if(errno_raw < HTTP_ERRNO_MIN || errno_raw > HTTP_ERRNO_MAX)\\n        return 0;\\n\\n    enum http_errno errno = (enum http_errno)errno_raw;\\n\\n    // Executing the function-under-test\\n    const char * str = http_errno_name(errno);\\n\\n    return 0;\\n} ",
        "model": ""
    }

    ]
}