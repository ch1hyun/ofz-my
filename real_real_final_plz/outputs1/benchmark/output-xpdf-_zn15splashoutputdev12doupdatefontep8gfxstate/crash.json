{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"XRef.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object (can be empty for this fuzzing purpose)\\n    GfxState* gfxState = new GfxState(1.0, 1.0, nullptr, 0, false);\\n\\n    // Call the function-under-test indirectly through a public method\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeMono8, 0, gFalse, nullptr);\\n    splashOutputDev.startDoc(nullptr); // Updated to pass only one argument\\n    splashOutputDev.updateFont(gfxState); // Utilize the public method to indirectly call the private function\\n\\n    // Utilize the public method to indirectly call the private function\\n    splashOutputDev.doUpdateFont(gfxState); // Call the required function directly\\n\\n    // Clean up memory\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"XRef.h\" // Include XRef.h to resolve Ref type\\n#include \"SplashOutputDev.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer (cannot be NULL)\\n    GfxState gfxState(96, 96, nullptr, 0, false);\\n\\n    // Call the function-under-test indirectly through a public method\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeMono8, 1, false, nullptr, false, true);\\n    splashOutputDev.doUpdateFont(&gfxState); // Call the function directly inside the fuzz target\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}