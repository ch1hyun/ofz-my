{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/splash/Splash.h\" // Corrected path\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  double rotate = fdp.ConsumeFloatingPoint<double>();\\n  double angle = fdp.ConsumeFloatingPoint<double>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  std::vector<char> buf = fdp.ConsumeBytes<char>(fdp.remaining_bytes() / 2);\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  globalParams = new GlobalParams(buf.data());\\n  globalParams->setupBaseFonts(\"/usr/share/ghostscript/9.25/Resource/cidfmap\");\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  PDFDoc *doc = NULL;\\n  doc = new PDFDoc(str, NULL, NULL, NULL);\\n\\n  if (doc->isOk()) {\\n    SplashColor paperColor = {0};\\n\\n    // Create a SplashOutputDev object\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor);\\n    splashOut->startDoc(doc->getXRef());\\n\\n    // Create a Gfx object\\n    Gfx *gfx = new Gfx(doc, splashOut, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\\n\\n    // Call the drawChar function\\n    splashOut->drawChar(gfx->getState(), x, y, hDPI, vDPI, rotate, angle, 0, 0, NULL, 0, useMediaBox, crop, printing);\\n\\n    delete gfx;\\n    delete splashOut;\\n  }\\n\\n  delete doc;\\n  delete str;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n\\n#include \"xpdf/GfxState.h\"\\n#include \"xpdf/CharCode.h\"\\n#include \"xpdf/Unicode.h\"\\n#include \"xpdf/GBool.h\"\\n#include \"xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Initialize necessary variables for drawChar\\n    GfxState *state;\\n    double x, y, dx, dy, originX, originY;\\n    CharCode code;\\n    int nBytes;\\n    Unicode *u;\\n    int uLen;\\n    GBool charExists;\\n    GBool d;\\n    GBool s;\\n\\n    // Call the function\\n    SplashOutputDev::drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, charExists, d, s);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}