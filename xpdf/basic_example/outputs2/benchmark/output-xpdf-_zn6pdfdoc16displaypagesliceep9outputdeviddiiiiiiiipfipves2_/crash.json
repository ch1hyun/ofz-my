{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/goo/GooString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create instance of PDFDoc\\n  const char *ownerPassword = \"owner\";\\n  const char *userPassword = \"user\";\\n  Object obj = Object(objNull);\\n  PDFDoc* doc = new PDFDoc(new MemStream((char*)data, 0, size, &obj), \\n  new GooString(ownerPassword), new GooString(userPassword));\\n\\n  if (!doc->isOk()) {\\n    delete doc;\\n    return 0;\\n  }\\n\\n  // Define parameters for displayPageSlice\\n  OutputDev *out = NULL; // OutputDev is abstract and we can't use it directly\\n  int pageNum = stream.ConsumeIntegralInRange<int>(1, doc->getNumPages());\\n  double hDPI = stream.ConsumeFloatingPointInRange<double>(0, 300);\\n  double vDPI = stream.ConsumeFloatingPointInRange<double>(0, 300);\\n  int rotate = stream.ConsumeIntegralInRange<int>(0, 360);\\n  GBool useMediaBox = stream.ConsumeBool();\\n  GBool crop = stream.ConsumeBool();\\n  GBool printing = stream.ConsumeBool();\\n  int sliceX = stream.ConsumeIntegral<int>();\\n  int sliceY = stream.ConsumeIntegral<int>();\\n  int sliceW = stream.ConsumeIntegral<int>();\\n  int sliceH = stream.ConsumeIntegral<int>();\\n\\n\\n  doc->displayPageSlice(out, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n\\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include <stddef.h>\\n#include <stdint.h>\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/freetype/src/autofit/afloader.h\"\\n#include \"/src/freetype/src/cid/cidload.h\"\\n#include \"/src/freetype/src/psaux/psfixed.h\"\\n#include \"/src/freetype/src/bdf/bdf.h\"\\n#include \"/src/freetype/src/autofit/aflatin.h\"\\n#include \"/work/prefix/include/freetype2/freetype/freetype.h\"\\n#include \"/src/freetype/include/freetype/freetype.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream* stream = new MemStream(data, 0, size, &xpdf_obj);\\n\\n  PDFDoc doc(stream);\\n  if (doc.isOk() == gFalse) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  \\n  SplashColor paperColor;\\n  paperColor[0] = stream.ConsumeIntegral<unsigned char>();\\n  paperColor[1] = stream.ConsumeIntegral<unsigned char>();\\n  paperColor[2] = stream.ConsumeIntegral<unsigned char>();\\n  \\n  SplashOutputDev splashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  splashOutputDev.startDoc(doc.getXRef());\\n\\n  doc.displayPageSlice(&splashOutputDev,\\n                       1, // page number\\n                       stream.ConsumeFloatingPoint<double>(), // hDPI\\n                       stream.ConsumeFloatingPoint<double>(), // vDPI\\n                       stream.ConsumeIntegral<int>(), // rotate\\n                       stream.ConsumeBool(), // useMediaBox\\n                       stream.ConsumeBool(), // Crop\\n                       stream.ConsumeBool(), // printing\\n                       stream.ConsumeIntegral<int>(), // sliceX\\n                       stream.ConsumeIntegral<int>(), // sliceY\\n                       stream.ConsumeIntegral<int>(), // sliceW\\n                       stream.ConsumeIntegral<int>(),// sliceH\\n                       nullptr, // abortCheckCbk\\n                       nullptr); // abortCheckCbkData\\n  \\n  splashOutputDev.copyFrameBuffer();\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}