{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n#include \"FoFiTrueType.h\"\\n#include \"FoFiType1C.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Initialize necessary parameters\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  CharCode code = stream.ConsumeIntegral<CharCode>();\\n  Unicode u = stream.ConsumeIntegral<Unicode>();\\n  int uLen = stream.ConsumeIntegral<int>();\\n  GBool hmtx = stream.ConsumeIntegral<GBool>();\\n  GBool vmtx = stream.ConsumeIntegral<GBool>();\\n  GBool is_type3 = stream.ConsumeIntegral<GBool>();\\n  GBool fill = stream.ConsumeIntegral<GBool>();\\n  GBool stroke = stream.ConsumeIntegral<GBool>();\\n  \\n  // Initialize GfxState object\\n  int rotate = 0;\\n  GBool upsideDown = gFalse;\\n  PDFRectangle *bbox = NULL;\\n  double *matrix = NULL;\\n  PDFDoc *doc = NULL;\\n  GfxState *state = new GfxState(72.0, 72.0, bbox, rotate, upsideDown);\\n\\n  // Initialize SplashOutputDev object\\n  SplashColor splashColor;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 4, gFalse, splashColor);\\n\\n  // Call drawChar method\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, uLen, &u, uLen, fill, stroke, is_type3);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.86",
        "coverage_diff": "0.005243283546191404",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Splash.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 10) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  CharCode code = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = stream.ConsumeIntegral<int>();\\n  Unicode u = stream.ConsumeIntegral<Unicode>();\\n  int uLen = stream.ConsumeIntegral<int>();\\n  GBool fill = stream.ConsumeBool();\\n  GBool stroke = stream.ConsumeBool();\\n  GBool clip = stream.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n\\n  // Create a SplashOutputDev object\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n\\n  // Call the drawChar function\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, &u, uLen, fill, stroke, clip);\\n\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}