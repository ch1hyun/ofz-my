{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  const std::string name = fuzzed_data.ConsumeRandomLengthString();\\n  const std::string mode = fuzzed_data.ConsumeRandomLengthString();\\n\\n  int dummy_fd = fuzzed_data.ConsumeIntegral<int>(); // dummy file descriptor\\n\\n  TIFF* tif = TIFFFdOpen(dummy_fd, name.c_str(), mode.c_str());\\n  if (tif) {\\n    TIFFClose(tif);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <sstream>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  std::string text_file_name = \"/tmp/temp.tiff\";\\n  \\n  FILE * temp_file;\\n  temp_file = fopen (text_file_name.c_str(), \"w+\");\\n  if (temp_file == NULL) exit(1); //  Failed to open a file.\\n\\n  // parse data as text and write it to a file.\\n  std::string s(data, data+size);\\n  fprintf(temp_file, \"%s\", s.c_str());\\n\\n  // Reopen the file in read mode for TIFFFdOpen\\n  fclose(temp_file);\\n  temp_file = fopen (text_file_name.c_str(), \"r\");\\n  \\n  TIFF* tiff = TIFFFdOpen(fileno(temp_file), text_file_name.c_str(), \"r\");\\n  if (!tiff) {\\n    fclose(temp_file);\\n    remove(text_file_name.c_str());\\n    return 0;\\n  }\\n  \\n  TIFFClose(tiff);\\n  fclose(temp_file);\\n  \\n  // Clean up created file\\n  remove(text_file_name.c_str());\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}