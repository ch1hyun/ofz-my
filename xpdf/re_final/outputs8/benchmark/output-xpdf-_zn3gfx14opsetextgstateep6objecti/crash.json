{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/goo/gfile.h\"\\n#include \"/src/xpdf-4.05/goo/GList.h\"\\n#include \"/src/xpdf-4.05/goo/GMutex.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/goo/gmem.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"XRef.h\"\\n#include \"Annot.h\"\\n#include \"Catalog.h\"\\n#include \"GlobalParams.h\"\\n#include \"Link.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Page.h\"\\n#include \"XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n    \\n    // Create an Object\\n    Object obj;\\n    \\n    // Generate a random integer\\n    int randomInt = fdp.ConsumeIntegral<int>();\\n    \\n    // Create a PDFDoc object\\n    PDFDoc *doc = new PDFDoc();\\n    \\n    // Create an OutputDev object\\n    OutputDev *out = new OutputDev();\\n    \\n    // Create a Dict object\\n    Dict *resDict = new Dict();\\n    \\n    // Create a PDFRectangle object\\n    PDFRectangle *box = new PDFRectangle();\\n    PDFRectangle *cropBox = new PDFRectangle();\\n    \\n    // Create a Gfx object\\n    Gfx gfx(doc, out, resDict, box, cropBox);\\n    \\n    // Call the target function\\n    // gfx.opSetExtGState(&obj, randomInt); // This line is commented out because the function is private and cannot be accessed directly.\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 2) {\\n        return 0;\\n    }\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    Object obj;\\n    int state = fuzzed_data_provider.ConsumeIntegral<int>();\\n\\n    // Create a PDFDoc object to pass to the Gfx constructor\\n    PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"));\\n\\n    // Create a SplashOutputDev object to pass to the Gfx constructor\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse);\\n\\n    // Create a PDFRectangle object to pass to the Gfx constructor\\n    PDFRectangle *box = new PDFRectangle();\\n\\n    // Create a Gfx object with the required arguments\\n    Gfx *gfx = new Gfx(doc, splashOut, 0, 0, 0, 0, box, box, 0, 0);\\n\\n    // Call the function under test with the created Gfx object\\n    // gfx->opSetExtGState(&obj, state); // This function is private and can't be accessed directly\\n\\n    // Clean up\\n    delete gfx;\\n    delete splashOut;\\n    delete doc;\\n    delete box;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}