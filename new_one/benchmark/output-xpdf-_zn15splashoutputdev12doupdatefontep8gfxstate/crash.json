{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n\\n// Include necessary headers for the types used in the code\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object\\n    GfxState *gfxState = new GfxState(0, 0, nullptr, 0, gFalse);\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(splashModeMono1, 0, gFalse, nullptr); // Fixed constructor arguments\\n\\n    // Utilize the function under test with non-null input\\n    // Since 'doUpdateFont' is a private member, we can directly call the private member function using the SplashOutputDev class\\n    splashOutputDev.SplashOutputDev::doUpdateFont(gfxState);\\n\\n    // Clean up\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <iostream>\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n#include \"Stream.h\"\\n#include \"SplashOutputDev.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeRGB8, 0, gFalse, nullptr, gFalse, gTrue);\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object\\n    GfxState gfxState(0, 0, nullptr, 0, gFalse);\\n\\n    // Call the function-under-test\\n    // Utilize a public method instead of a private one\\n    splashOutputDev.updateFont(&gfxState);\\n\\n    // Call the target function inside the fuzz target\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}