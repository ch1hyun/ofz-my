{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.54",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  size_t parsed_data = http_parser_execute(&parser, NULL, (char *)data, size);\\n\\n  // check the condition if parsed_data equal to size then only check http_should_keep_alive\\n  if (parsed_data == size){\\n      http_should_keep_alive(&parser);\\n  }  \\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "29.13",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nhttp_parser_settings settings = {\\n  .on_message_begin = 0,\\n  .on_header_field = 0,\\n  .on_header_value = 0,\\n  .on_url = 0,\\n  .on_status = 0,\\n  .on_body = 0,\\n  .on_headers_complete = 0,\\n  .on_message_complete = 0,\\n  .on_chunk_header = 0,\\n  .on_chunk_complete = 0\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Fuzz the http_parser_execute method\\n  http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  // Fuzz the http_should_keep_alive method\\n  http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}