{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <fstream>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n\\n// Define a callback function for abortCheckCbk\\nGBool abortCheckCbk(void *data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n    FuzzedDataProvider fdp(data, size);\\n    GString fileName(\"test.pdf\");\\n\\n    // Write the random data to a file\\n    std::ofstream file(fileName.getCString(), std::ios::binary);\\n    file.write(reinterpret_cast<const char*>(data), size);\\n    file.close();\\n\\n    PDFDoc doc(&fileName);\\n    class MyOutputDev : public OutputDev {\\n        virtual GBool upsideDown() { return gTrue; }\\n        virtual GBool useDrawChar() { return gTrue; }\\n        virtual GBool interpretType3Chars() { return gTrue; }\\n    };\\n    MyOutputDev output;\\n    int pg = fdp.ConsumeIntegral<int>();\\n    double hDPI = fdp.ConsumeFloatingPoint<double>();\\n    double vDPI = fdp.ConsumeFloatingPoint<double>();\\n    int rotate = fdp.ConsumeIntegral<int>();\\n    GBool useMediaBox = fdp.ConsumeBool();\\n    GBool crop = fdp.ConsumeBool();\\n    GBool printing = fdp.ConsumeBool();\\n    int sliceX = fdp.ConsumeIntegral<int>();\\n    int sliceY = fdp.ConsumeIntegral<int>();\\n    int sliceW = fdp.ConsumeIntegral<int>();\\n    int sliceH = fdp.ConsumeIntegral<int>();\\n    void* abortCheckCbkData = nullptr;\\n\\n    doc.displayPageSlice(&output, pg, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n// Include the necessary libraries for PDFDoc and OutputDev\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\n// Define the abortCheckCbk function\\nGBool abortCheckCbk(void *data) {\\n  return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  // Initialize necessary parameters for the displayPageSlice function\\n  OutputDev *output_dev = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse);\\n  int page = 1;\\n  double hDPI = 72.0;\\n  double vDPI = 72.0;\\n  int rotate = 0;\\n  GBool useMediaBox = gTrue;\\n  GBool crop = gTrue;\\n  GBool printing = gFalse;\\n  int sliceX = -1;\\n  int sliceY = -1;\\n  int sliceW = -1;\\n  int sliceH = -1;\\n  void *globalParams = nullptr;\\n\\n  // Create a PDFDoc instance\\n  GString *fileNameA = new GString(\"dummy.pdf\");\\n  PDFDoc pdf_doc(fileNameA);\\n\\n  // Call the target function\\n  pdf_doc.displayPageSlice(output_dev, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, globalParams);\\n\\n  delete fileNameA;\\n  delete output_dev;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}