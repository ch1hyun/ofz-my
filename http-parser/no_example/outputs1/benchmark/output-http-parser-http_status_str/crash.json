{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < 1)\\n    return 0;\\n\\n  // Since DW_TAG_enumeration_typehttp_status is enum, get byte from data and mod it with 39 (maximum enum value of http_parser.h + 1)\\n  unsigned int res = data[0] % 40; \\n  const char* status = http_errno_name((enum http_errno)res);\\n\\n  // Call the function http_status_str with the obtained enum value\\n  const char* status_str = http_status_str((enum http_status)res);\\n\\n  // Check if status is null or empty to increase code coverage\\n  if (status != NULL && strlen(status) > 0 && status_str != NULL && strlen(status_str) > 0) {\\n    return 0;\\n  } else {\\n    return 1;\\n  }\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (!size)\\n    return 0; // We need at least one byte\\n\\n  enum http_status status = (enum http_status)(*data % HTTP_STATUS_OK); // Ensure a valid enum value by using modulo.\\n  http_status_str(status);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}