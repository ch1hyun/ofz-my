{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  CharCode c = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = stream.ConsumeIntegral<int>();\\n  Unicode *u;\\n  int uLen = 0;\\n  if(stream.remaining_bytes() > 0) {\\n    uLen = stream.ConsumeIntegralInRange<int>(0, 10);\\n    std::vector<Unicode> unicodeItems(uLen);\\n    for(int i = 0; i < uLen; i++) {\\n      unicodeItems[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n    u = unicodeItems.data();\\n  } else {\\n    u = NULL;\\n  }\\n  GBool charIsInvisible = stream.ConsumeBool();\\n  GBool isType3Char = stream.ConsumeBool();\\n  GBool isHorizontal = stream.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(\"/usr/share/ghostscript/9.25/Resource/cidfmap\");\\n\\n  std::string ownerPassword = \"ownerPassword\";\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), new GString(ownerPassword.c_str()), NULL);\\n\\n  SplashColor splashColor;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, splashColor, gFalse, gFalse);\\n  if (splashOut == NULL) {\\n    delete doc;\\n    delete globalParams;\\n    return 0;\\n  }\\n  splashOut->startDoc(doc->getXRef());\\n\\n  GfxState *state = new GfxState(72.0, 72.0, doc->getCatalog()->getPage(1)->getCropBox(), doc->getPageRotate(1), gTrue);\\n  if (state == NULL) {\\n    delete splashOut;\\n    delete doc;\\n    delete globalParams;\\n    return 0;\\n  }\\n\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, c, nBytes, u, uLen, charIsInvisible, isType3Char, isHorizontal);\\n\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashBitmap.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 20) {  \\n    return 0;  \\n  }  \\n\\n  // Set up a FuzzedDataProvider object with the given input data.\\n  FuzzedDataProvider fdp(data, size);\\n\\n  // Check if there is enough data left to consume\\n  if (fdp.remaining_bytes() < sizeof(double) * 6 + sizeof(CharCode) + sizeof(int) * 3 + sizeof(GBool) * 3) {\\n    return 0;\\n  }\\n\\n  // Initialize basic parameters needed to call drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool).\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  int uLen  = fdp.ConsumeIntegral<int>();\\n  GBool abortCheckCbk = fdp.ConsumeIntegral<GBool>();\\n  GBool abortCheckCbkData = fdp.ConsumeIntegral<GBool>();\\n  GBool isDot = fdp.ConsumeIntegral<GBool>();\\n\\n  // Initialize necessary objects: PDFDoc, OutputDev and GfxState\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n  globalParams->setupBaseFonts(\"/usr/share/ghostscript/9.25/Resource/cidfmap\");\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  \\n  // Add missing lines to create PDFDoc, OutputDev and GfxState objects\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  SplashOutputDev *outputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse);\\n  outputDev->startDoc(doc->getXRef());\\n  GfxState *state = new GfxState(72, 72, doc->getCatalog()->getPage(1)->getCropBox(), 0, gFalse);\\n  \\n  // Call the function under test\\n  outputDev->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, &u, uLen, abortCheckCbk, abortCheckCbkData, isDot);\\n  \\n  // Clean up\\n  delete state;\\n  delete outputDev;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}