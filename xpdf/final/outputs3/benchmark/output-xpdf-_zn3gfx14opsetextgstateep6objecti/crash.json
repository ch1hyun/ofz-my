{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"BaseStream.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    virtual GBool upsideDown() { return gTrue; }\\n    virtual GBool useDrawChar() { return gTrue; }\\n    virtual GBool interpretType3Chars() { return gTrue; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    if (Size < sizeof(int))\\n        return 0;\\n\\n    // Create an instance of GString class\\n    GString fileName(\"dummy\");\\n\\n    // Create an instance of PDFDoc class\\n    PDFDoc doc(&fileName);\\n\\n    // Create an instance of MyOutputDev class\\n    MyOutputDev out;\\n\\n    // Create an instance of XRef class\\n    XRef xref;\\n\\n    // Create an instance of Dict class\\n    Dict resDict(&xref);\\n\\n    // Create an instance of Gfx class\\n    Gfx gfx(&doc, &out, &resDict, NULL, NULL);\\n\\n    // Create an instance of Object class\\n    Object obj;\\n\\n    // Convert the first 4 bytes of Data to an int\\n    int num = *(int*)Data;\\n\\n    // Call the function\\n    gfx.Gfx::opSetExtGState(&obj, num);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\n#ifndef gFalse\\n#define gFalse 0\\n#endif\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n  int numArgs = fdp.ConsumeIntegral<int>();\\n\\n  std::vector<Object> objects(numArgs);\\n  for (auto &obj : objects) {\\n    obj.initNull();\\n  }\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream = new MemStream((char*)data, 0, size, &obj); \\n  PDFDoc doc(stream);\\n\\n  OutputDev *output_dev = nullptr;\\n  GfxState state(72, 72, nullptr, 0, gFalse);\\n  \\n  // Fetch the catalog object and get the resource dictionary from it\\n  Object catObj;\\n  doc.getXRef()->getCatalog(&catObj);\\n  Dict *resourceDict = catObj.getDict()->lookup(\"Resources\")->getDict();\\n\\n  Gfx gfx(&doc, output_dev, resourceDict, nullptr, nullptr, -1);\\n\\n  // execOp is a private method. We need to use a public method that calls it.\\n  // Here, we use display, which displays a page or a range of pages.\\n  Object name;\\n  name.initName(\"SetExtGState\");\\n  gfx.display(&name, objects.data(), numArgs);\\n\\n  // Call opSetExtGState method\\n  gfx.opSetExtGState(objects.data(), numArgs);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}