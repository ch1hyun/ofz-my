{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.37",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/libraw/libraw/libraw.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nLibRaw raw_processor;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Set up the data provider for fuzzing\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  // If there is NOT enough data to proceed, return early\\n  if (fuzzed_data.remaining_bytes() < sizeof(libraw_processed_image_t))\\n    return 0;\\n\\n  // Consume data\\n  libraw_processed_image_t imgdata;\\n  fuzzed_data.ConsumeData(&imgdata, sizeof(imgdata));\\n  \\n  // Recycle the raw processor\\n  raw_processor.recycle();\\n\\n  // Open the buffer\\n  int ret = raw_processor.open_buffer(&imgdata, sizeof(imgdata));\\n  if (ret != LIBRAW_SUCCESS)\\n    return 0;\\n\\n  // Call the function under test\\n  int result = raw_processor.sraw_midpoint();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.86",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    \\n    LibRaw RawProcessor;\\n    libraw_processed_image_t *image = NULL;\\n\\n    // Create a datastream\\n    LibRaw_buffer_datastream ds((char *)data, size);\\n\\n    // Open the image file\\n    int ret = RawProcessor.open_datastream(&ds);\\n    if(ret != LIBRAW_SUCCESS) {\\n        // If file can't be opened, return early\\n        return 0;\\n    }\\n\\n    // Unpack the raw image\\n    ret = RawProcessor.unpack();\\n    if (ret != LIBRAW_SUCCESS) {\\n        // if unpacking failed, recycle RawProcessor and return early\\n        RawProcessor.recycle();\\n        return 0;\\n    }\\n\\n    // Call the function under test\\n    RawProcessor.sraw_midpoint();\\n\\n    // Recycle the RawProcessor\\n    RawProcessor.recycle();\\n    return 0;\\n}",
        "model": ""
    }

    ]
}