{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <limits>\\n#include \"/src/freetype/include/freetype/internal/ftobjs.h\"\\n#include \"/src/freetype/include/freetype/ftrender.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Ref.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Object.h\"\\n#include \"GfxState.h\"\\n#include \"/src/freetype/src/bdf/bdf.h\"\\n#include \"/src/freetype/src/pcf/pcf.h\"\\n#include \"/src/freetype/src/sdf/ftsdf.h\"\\n#include \"/src/freetype/src/psaux/psft.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  const double max_double = std::numeric_limits<double>::max();\\n  double dx = fdp.ConsumeFloatingPointInRange<double>(-max_double, max_double);\\n  double dy = fdp.ConsumeFloatingPointInRange<double>(-max_double, max_double);\\n  double originX = fdp.ConsumeFloatingPointInRange<double>(-max_double, max_double);\\n  double originY = fdp.ConsumeFloatingPointInRange<double>(-max_double, max_double);\\n  double tOriginX = fdp.ConsumeFloatingPointInRange<double>(-max_double, max_double);\\n  double tOriginY = fdp.ConsumeFloatingPointInRange<double>(-max_double, max_double);\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  \\n  unsigned int wchars = fdp.ConsumeIntegralInRange<unsigned int>(0, 10);\\n  Unicode* u = new Unicode[wchars];\\n  for (size_t i = 0; i < wchars; ++i) {\\n    u[i] = wchars;\\n  }\\n  int uLen = wchars;\\n  GBool altFont = fdp.ConsumeBool();\\n  GBool enableFreeType = fdp.ConsumeBool();\\n  GBool accented = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(nullptr);\\n  globalParams->setupBaseFonts(nullptr);\\n  \\n  double hDPIA = 72.0;\\n  double vDPIA = 72.0;\\n  PDFRectangle pageBox;\\n  int rotateA = 0;\\n  GBool upsideDown = gTrue;\\n  GfxState state(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n  \\n  SplashColorMode colorModeA = splashModeRGB8;\\n  int bitmapRowPadA = 4;\\n  GBool reverseVideoA = gFalse;\\n  SplashColorPtr paperColorA;\\n  SplashOutputDev out(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA);\\n  \\n  out.drawChar(&state, dx, dy, originX, originY, tOriginX, tOriginY,\\n                  code, nBytes, u, uLen, altFont, enableFreeType, accented); \\n  \\n  delete globalParams;\\n  delete[] u;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Lexer.h\"\\n#include \"/src/xpdf-4.05/xpdf/Parser.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"splash/SplashFontFileID.h\"\\n#include \"splash/SplashPath.h\"\\n#include \"splash/SplashPattern.h\"\\n#include \"splash/SplashScreen.h\"\\n#include \"splash/SplashTypes.h\"\\n#include \"splash/SplashXPath.h\"\\n#include \"splash/SplashXPathScanner.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n    \\n    SplashColor color;\\n    color[0] = stream.ConsumeIntegral<unsigned char>();\\n    color[1] = stream.ConsumeIntegral<unsigned char>();\\n    color[2] = stream.ConsumeIntegral<unsigned char>();\\n\\n    // Create a new SplashOutputDev object with bitmap size 200x200.\\n    SplashOutputDev splashOutputDev(splashModeRGB8, static_cast<unsigned int>(200), gFalse, color, gTrue, gFalse);\\n\\n    splashOutputDev.startDoc(nullptr);\\n\\n    long long i = static_cast<long long>(stream.ConsumeIntegral<int>());\\n    double d1 = stream.ConsumeFloatingPoint<double>();\\n    double d2 = stream.ConsumeFloatingPoint<double>();\\n    double d3 = stream.ConsumeFloatingPoint<double>();\\n    double d4 = stream.ConsumeFloatingPoint<double>();\\n    double d5 = stream.ConsumeFloatingPoint<double>();\\n    double d6 = stream.ConsumeFloatingPoint<double>();\\n\\n    GBool stroke_adjust_ = static_cast<GBool>(stream.ConsumeIntegral<int>());\\n    bool gouraud_shading_ = stream.ConsumeBool();\\n\\n    splashOutputDev.drawChar(nullptr, d1, d2, d3, d4, d5, d6, static_cast<CharCode>(i),\\n                    0/*wMode*/, nullptr/*charName*/, 0/*charLen*/,\\n                    gTrue/*fill*/, stroke_adjust_, gouraud_shading_);\\n    \\n    return 0;\\n}",
        "model": ""
    }

    ]
}