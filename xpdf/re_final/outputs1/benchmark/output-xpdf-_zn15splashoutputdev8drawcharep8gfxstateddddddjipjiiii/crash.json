{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"PDFRectangle.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    \\n    // Initialize the parameters for drawChar function\\n    double hDPIA = 72.0;\\n    double vDPIA = 72.0;\\n    PDFRectangle pageBox;\\n    int rotateA = 0;\\n    GBool upsideDown = gFalse;\\n    GfxState *state = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n    \\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n    CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n    int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n    Unicode *u = new Unicode[nBytes];\\n    int uLen = fuzzed_data.ConsumeIntegral<int>();\\n    GBool v = fuzzed_data.ConsumeBool();\\n    GBool clipping = fuzzed_data.ConsumeBool();\\n    GBool render = fuzzed_data.ConsumeBool();\\n\\n    // Call the target function\\n    SplashColorMode colorModeA = splashModeRGB8;\\n    int bitmapRowPadA = 4;\\n    GBool reverseVideoA = gFalse;\\n    SplashColorPtr paperColorA;\\n    SplashOutputDev outputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA);\\n    outputDev.drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, v, clipping, render);\\n    \\n    delete[] u;\\n    delete state;\\n    \\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFRectangle.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 10) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  double hDPIA = 72.0;\\n  double vDPIA = 72.0;\\n  PDFRectangle pageBox(0,0,1,1);\\n  int rotateA = 0;\\n  GBool upsideDown = gFalse;\\n  GfxState state(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n  double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n  Unicode *u = new Unicode[nBytes];\\n  int uLen = fuzzed_data.ConsumeIntegral<int>();\\n  GBool charExists = fuzzed_data.ConsumeBool();\\n  GBool charIsNonBase = fuzzed_data.ConsumeBool();\\n  GBool charIsVert = fuzzed_data.ConsumeBool();\\n\\n  SplashColorMode colorModeA = splashModeRGB8;\\n  int bitmapRowPadA = 4;\\n  GBool reverseVideoA = gFalse;\\n  SplashColorPtr paperColorA = nullptr;\\n  GBool bitmapTopDownA = gTrue;\\n  GBool allowAntialiasA = gTrue;\\n  SplashOutputDev splash(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n  splash.drawChar(&state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, charExists, charIsNonBase, charIsVert);\\n\\n  delete[] u;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}