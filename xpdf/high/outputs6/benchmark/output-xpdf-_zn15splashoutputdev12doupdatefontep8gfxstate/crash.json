{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Annot.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  if (size < 200) // 200 bytes selected randomly to avoid empty data/std::vector.\\n    return 0;\\n\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload(fdp.ConsumeRemainingBytes<char>());\\n  // Creating Object according to http://v1.tailbench.csail.mit.edu/library/pkghub/github.com.foopackage.foo/blob/HEAD:/ReadMe.txt\\n  Object obj;\\n  obj.initNull();\\n  MemStream memStream(payload.data(), 0, payload.size(), &obj);\\n\\n  // Initiate GlobalsParam variable\\n  globalParams = new GlobalParams(NULL);\\n  \\n  GString owner_password(\"\");\\n  GString user_password(\"\");\\n  PDFDoc doc(&memStream, &owner_password, &user_password);\\n\\n  SplashColor paperColor;\\n  for (int i = 0; i < 4; ++i)\\n    paperColor[i] = 0xff;\\n  SplashOutputDev splashOut(splashModeRGB8, 1, gFalse, paperColor);\\n\\n  PDFRectangle pageBox;\\n  GfxState* state = new GfxState(hdpi, vdpi, &pageBox, rotate, crop);\\n\\n  splashOut.startDoc(doc.getXRef());\\n  splashOut.doUpdateFont(state); // Call the correct function\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Initialize global parameters\\n  // Provide a dummy file name to the GlobalParams constructor\\n  globalParams = new GlobalParams(\"/dev/null\");\\n  globalParams->setupBaseFonts(nullptr);\\n\\n  // Splash color for SplashOutputDev\\n  SplashColor paperColor;\\n  paperColor[0] = stream.ConsumeIntegral<uint8_t>();\\n  paperColor[1] = stream.ConsumeIntegral<uint8_t>();\\n  paperColor[2] = stream.ConsumeIntegral<uint8_t>();\\n  paperColor[3] = stream.ConsumeIntegral<uint8_t>();\\n\\n  // Create a SplashOutputDev object\\n  // Use the correct splash mode\\n  SplashOutputDev splashOut(splashModeBGR8, 4, gFalse, paperColor);\\n\\n  // Create a GfxState object. In real scenario, GfxState is created with many parameters including a XRef object which itself is complex to create.\\n  // To fuzz the test function, we only need a non-null GfxState object.\\n  GfxState *state = (GfxState *)(new char[sizeof(GfxState)]);\\n  memset(state, 0, sizeof(GfxState));\\n\\n  // Use a public function to update the font\\n  splashOut.updateFont(state);\\n\\n  delete[] state;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}