{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cassert>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/splash/SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Lexer.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  SplashColorMode colorMode = stream.ConsumeEnum<SplashColorMode>();\\n  SplashColor bitPatternColor;\\n  const int bitmapRowPad = 4;\\n  const bool reverseVideo = false;\\n  bitPatternColor[0] = bitPatternColor[1] = bitPatternColor[2] = bitPatternColor[3] = 0;\\n  SplashOutputDev splashOut(colorMode, bitmapRowPad, reverseVideo, bitPatternColor);\\n  \\n  BaseStream *strA = new MemStream((char *)stream.ConsumeRemainingBytes<uint8_t>().data(), 0, size, nullptr);\\n  XRef xref(strA, gFalse);\\n  Dict fontDict(&xref);\\n  \\n  Object obj;\\n  PDFDoc pdfDoc(strA, nullptr, nullptr, nullptr);\\n  GfxFont *gfxFont = Gfx8BitFont::make8BitFont(&xref, new GString(\"Arial\"), pdfDoc.getCatalog()->getResDict(), &fontDict);\\n\\n  GfxFontState gfxFontState(12,    // font size\\n                            1,    // horizonal scaling\\n                            0,    // rotation\\n                            1,    // line width\\n                            gfxFont,  // font pointer is notowned by GfxFontState nor it should be freed\\n                            0,    // fill color space\\n                            nullptr,  // fill color\\n                            0,    // stroke color space\\n                            nullptr,  // stroke color\\n                            1); // line width\\n\\n  GfxState gfxState(72.0, 72.0, &gfxFontState, 1, gTrue, gTrue);\\n\\n  // Call the target function\\n  splashOut.doUpdateFont(&gfxState);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"aconf.h\"\\n#include <PDFDoc.h>\\n#include <SplashOutputDev.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include <GlobalParams.h>\\n#include <XRef.h>\\n#include <Object.h>\\n#include <PDFDoc.h>\\n#include <GfxState.h>\\nusing namespace std;\\n\\nGlobalParams *globalParams;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  // Initialize globalParams\\n  const string fileName = \"/usr/share/poppler/cMap\";\\n  globalParams = new GlobalParams(fileName.c_str());\\n\\n  // Set up SplashOutputDev and call doUpdateFont()\\n  SplashColor color;\\n  color[0] = 255;\\n  color[1] = 255;\\n  color[2] = 255;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, color);\\n  vector<char> arr = fdp.ConsumeRemainingBytes<char>();\\n  Object obj;\\n  BaseStream *str = new MemStream(arr.data(), 0, arr.size(), &obj);\\n  XRef xref(str, gFalse);\\n  Object objDict;\\n  objDict.initDict(&xref);\\n  PDFDoc *doc = new PDFDoc(new GString(fileName.c_str()), new GString(), new GString());\\n  \\n  // Fixed line: Replace 'doc->getPageMediaBox(1)' with 'doc->getPage(1)->getMediaBox()'\\n  GfxState *state = new GfxState(72.0, 72.0, doc->getPage(1)->getMediaBox(), 0, gTrue);\\n  splashOut->updateFont(state);\\n\\n  // Cleanup\\n  delete state;\\n  delete doc;\\n  delete splashOut;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}