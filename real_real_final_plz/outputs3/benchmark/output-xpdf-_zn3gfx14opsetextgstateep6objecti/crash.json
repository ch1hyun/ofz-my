{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\" // Corrected include path\\n#include \"/src/xpdf-4.05/xpdf/PDFCore.h\"\\n#include \"/src/xpdf-4.05/xpdf/BaseStream.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create dummy Object pointer and int value for opSetExtGState function\\n    Object obj;\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Create necessary objects for Gfx constructor\\n    GString fileName(\"dummy.pdf\");\\n    PDFDoc doc(&fileName);\\n    OutputDev out;\\n    Dict resDict(new XRef());\\n    PDFRectangle box, cropBox;\\n\\n    // Call the function-under-test\\n    Gfx gfx(&doc, &out, &resDict, &box, &cropBox);\\n    gfx.opSetExtGState(&obj, value);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create dummy Object pointer (assuming it is a struct)\\n    struct Object {\\n        int dummy_data;\\n    };\\n\\n    // Consume data for creating the Object pointer\\n    Object obj;\\n    stream.ConsumeData(&obj, sizeof(obj));\\n\\n    // Consume data for the int parameter\\n    int intValue = stream.ConsumeIntegral<int>();\\n\\n    // Call the function-under-test\\n    GString fileName(\"dummy.pdf\");\\n    PDFDoc doc(&fileName); // Creating a PDFDoc object with a dummy file name\\n    OutputDevNull out; // Using OutputDevNull instead of OutputDev to avoid abstract class issue\\n\\n    Gfx gfx(&doc, &out); // Creating a Gfx object with PDFDoc and OutputDevNull\\n\\n    gfx.opSetExtGState(&obj, intValue);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}