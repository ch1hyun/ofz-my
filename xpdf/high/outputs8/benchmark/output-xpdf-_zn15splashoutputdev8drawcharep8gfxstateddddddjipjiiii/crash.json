{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.09",
        "coverage_diff": "0.010911131598989859",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  int rotate = stream.ConsumeIntegral<int>();\\n  double x_radius = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double y_radius = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double angle1 = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double angle2 = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  CharCode c = stream.ConsumeIntegral<CharCode>();\\n  Unicode u = stream.ConsumeIntegral<Unicode>();\\n  GBool is_invisible = stream.ConsumeBool();\\n  GBool is_image = stream.ConsumeBool();\\n  GBool is_dot = stream.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n\\n  Unicode *u_array = new Unicode[1];\\n  u_array[0] = u;\\n\\n  splashOut->drawChar(state, x, y, x_radius, y_radius, angle1, angle2, c, 1, u_array, 1, is_invisible, is_image, is_dot);\\n  \\n  delete[] u_array;\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"fofi/FoFiTrueType.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 5) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode *u = NULL;\\n  int uLen;\\n  if (!fdp.ConsumeBool()) {\\n    uLen = fdp.ConsumeIntegral<int>();\\n    u = uLen > 0 ? new Unicode[uLen] : NULL;\\n    for (int index = 0; index < uLen; index++) {\\n      u[index] = fdp.ConsumeIntegral<Unicode>();\\n    }\\n  }\\n  GBool clip = fdp.ConsumeBool();\\n  GBool foFiReplace = fdp.ConsumeBool();\\n  GBool addToPath = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n  globalParams->setupBaseFonts(\"/usr/share/ghostscript/9.25/Resource/cidfmap\");\\n\\n  PDFRectangle mbox(0, 0, 612, 792);\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev splashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  GString *fileName = new GString(\"dummy\"); \\n  PDFDoc *pdfDoc = new PDFDoc(fileName, NULL, NULL); \\n  splashOutputDev.startDoc(pdfDoc->getXRef()); // Fixed line\\n  GfxState *state = new GfxState(72, 72, &mbox, 0, gFalse); \\n\\n  splashOutputDev.drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, clip, foFiReplace, addToPath);\\n\\n  delete state;\\n  delete globalParams;\\n  delete[] u;\\n  delete pdfDoc; \\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}