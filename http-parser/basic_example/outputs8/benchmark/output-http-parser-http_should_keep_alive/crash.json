{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.44",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <cstdint>\\n#include <cstdlib>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);  // initialize the parser\\n  http_parser_execute(&parser, NULL, reinterpret_cast<const char *>(data), size);  // execute the parser\\n\\n  http_should_keep_alive(&parser);  // call the function-under-test\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "23.99",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include \"http_parser.h\"\\n\\n// Empty http callbacks\\nstatic int on_message_begin(http_parser*_) {\\n  return 0;\\n}\\nstatic int on_url(http_parser *_, const char *at, size_t length) {\\n  return 0;\\n}\\nstatic int on_status(http_parser *_, const char *at, size_t length) {\\n  return 0;\\n}\\nstatic int on_header_field(http_parser *_, const char *at, size_t length) {\\n  return 0;\\n}\\nstatic int on_header_value(http_parser *_, const char *at, size_t length) {\\n  return 0;\\n}\\nstatic int on_headers_complete(http_parser*_) {\\n  return 0;\\n}\\nstatic int on_body(http_parser *_, const char *at, size_t length) {\\n  return 0;\\n}\\nstatic int on_message_complete(http_parser*_) {\\n  return 0;\\n}\\n// http settings\\nstatic const http_parser_settings settings =\\n{\\n  on_message_begin,\\n  on_url,\\n  on_status,\\n  on_header_field,\\n  on_header_value,\\n  on_headers_complete,\\n  on_body,\\n  on_message_complete\\n}; \\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  uint8_t *buf = (uint8_t *)malloc(size);\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  if(buf) {\\n    memcpy(buf, data, size);\\n    http_parser_execute(&parser, &settings, (char *)buf, size);\\n    http_should_keep_alive(&parser);\\n    free(buf);\\n  }\\n  return 0;\\n}",
        "model": ""
    }

    ]
}