{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "34.22",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  // Initialize HTTP Parser\\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_init(parser, HTTP_BOTH);\\n\\n  // Settings for HTTP parser\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  // Run the parser\\n  http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n  // Call the function-under-test\\n  http_should_keep_alive(parser);\\n\\n  // Cleanup\\n  free(parser);\\n  \\n  // We always return 0 to ensure that our fuzzer continues to search for bugs even if an input crashes this particular function.\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "21.82",
        "coverage_diff": "0.005660377358490566",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Declare and initialize http_parser_settings\\nhttp_parser_settings settings = {0};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_init(parser, HTTP_BOTH);\\n\\n  http_parser_execute(parser, &settings, (const char*)data, size);\\n\\n  int shouldKeepAlive = http_should_keep_alive(parser);\\n\\n  free(parser);\\n  \\n  return 0;\\n\\n}",
        "model": ""
    }

    ]
}