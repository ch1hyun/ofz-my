{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "33.92",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  static const http_parser_settings settings_null = { .on_message_begin = 0, .on_header_field = 0, .on_header_value = 0, .on_url = 0, .on_status = 0, .on_body = 0, .on_headers_complete = 0, .on_message_complete = 0, .on_chunk_header = 0, .on_chunk_complete = 0 };\\n  \\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  int pause = data[0] % 2;\\n  http_parser_pause(&parser, pause);\\n  \\n  http_parser_execute(&parser, &settings_null, (char *)(data + 1), size - 1);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.55",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"fuzzer/FuzzedDataProvider.h\"\\n#include \"http_parser.h\"\\n#include <cstdint>\\n#include <cstddef>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Loop over the input data, parsing it in chunks and intermittently pausing and resuming the parser.\\n  while (fuzzed_data.remaining_bytes() > 0) {\\n    // Pause the parser.\\n    http_parser_pause(&parser, 1);\\n\\n    // Resume the parser and parse a chunk.\\n    http_parser_pause(&parser, 0);\\n\\n    size_t chunk_size = fuzzed_data.ConsumeIntegralInRange<size_t>(0, 1024);\\n    std::string chunk = fuzzed_data.ConsumeBytesAsString(chunk_size);\\n\\n    http_parser_execute(&parser, NULL, chunk.c_str(), chunk.size());\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}