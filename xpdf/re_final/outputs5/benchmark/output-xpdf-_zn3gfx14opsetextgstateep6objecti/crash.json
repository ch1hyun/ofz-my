{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"GfxState.h\"\\n#include \"Gfx.h\" // Include the Gfx class\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2)\\n    return 0;\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  double hDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n  PDFRectangle pageBox;\\n  int rotateA = fuzzed_data.ConsumeIntegral<int>();\\n  GBool upsideDown = fuzzed_data.ConsumeBool();\\n  \\n  GfxState gfx(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n  Object obj;\\n  int i = fuzzed_data.ConsumeIntegral<int>();\\n  \\n  // Create a Gfx object to call the opSetExtGState function\\n  Gfx gfxObj(&gfx, false, -1, &obj, &obj, &obj, &obj, &obj, &obj, &obj, &obj);\\n\\n  gfxObj.opSetExtGState(&obj, i);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"Gfx.h\" \\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"XRef.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    if (Size < 1) {\\n        return 0;\\n    }\\n    FuzzedDataProvider FDP(Data, Size);\\n    GString fileNameA(\"test.pdf\");\\n    PDFDoc doc(&fileNameA);\\n    SplashColorMode colorMode = splashModeRGB8;\\n    SplashOutputDev splashOut(colorMode);\\n    XRef xrefA;\\n    Dict resDict(&xrefA);\\n    PDFRectangle box;\\n    PDFRectangle cropBox;\\n    Gfx gfx(&doc, &splashOut, &resDict, &box, &cropBox);\\n    Object obj;\\n    int num = FDP.ConsumeIntegral<int>();\\n    gfx.opSetExtGState(&obj, num); // Changed to public method\\n    return 0;\\n}",
        "model": ""
    }

    ]
}