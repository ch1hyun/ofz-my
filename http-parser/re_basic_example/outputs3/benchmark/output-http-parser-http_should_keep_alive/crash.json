{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.64",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\nextern \"C\" {\\n#include \"http_parser.h\"\\n}\\n\\nstatic const http_parser_settings settings_null = {\\n  .on_message_begin = 0,\\n  .on_header_field = 0,\\n  .on_header_value = 0,\\n  .on_url = 0,\\n  .on_status = 0,\\n  .on_body = 0,\\n  .on_headers_complete = 0,\\n  .on_message_complete = 0,\\n  .on_chunk_header = 0,\\n  .on_chunk_complete = 0\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser *parser = (http_parser *)malloc(sizeof(http_parser));\\n\\n  http_parser_init(parser, HTTP_BOTH);\\n  size_t parsed = http_parser_execute(parser, &settings_null,\\n                                      reinterpret_cast<const char *>(data), size);\\n  // Call the function under test.\\n  int keep_alive = http_should_keep_alive(parser);\\n\\n  if (parsed != size) {\\n      size_t offset = parser->nread;\\n      while (parsed != size && offset != size) {\\n          http_parser_init(parser, HTTP_BOTH);\\n          parsed += http_parser_execute(parser, &settings_null,\\n                                        reinterpret_cast<const char *>(data + offset),\\n                                        size - offset);\\n          offset = parser->nread;\\n      }\\n  }\\n  \\n  free(parser);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "24.39",
        "coverage_diff": "0.006918238993710692",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nstatic int on_message_begin(http_parser* _) { return 0; }\\nstatic int on_headers_complete(http_parser* _) { return 0; }\\nstatic int on_message_complete(http_parser* _) { return 0; }\\nstatic int on_chunk_header(http_parser* _) { return 0; }\\nstatic int on_chunk_complete(http_parser* _) { return 0; }\\nstatic int on_url(http_parser* _, const char* __, size_t ___) { return 0; }\\nstatic int on_status(http_parser* _, const char* __, size_t ___) { return 0; }\\nstatic int on_header_field(http_parser* _, const char* __, size_t ___) { return 0; }\\nstatic int on_header_value(http_parser* _, const char* __, size_t ___) { return 0; }\\nstatic int on_body(http_parser* _, const char* __, size_t ___) { return 0; }\\n\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n  const uint8_t type = stream.ConsumeIntegral<uint8_t>() % 4;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, http_parser_type(type));\\n\\n  http_parser_settings settings;\\n  settings.on_message_begin = on_message_begin;\\n  settings.on_headers_complete = on_headers_complete;\\n  settings.on_message_complete = on_message_complete;\\n  settings.on_chunk_header = on_chunk_header;\\n  settings.on_chunk_complete = on_chunk_complete;\\n  settings.on_url = on_url;\\n  settings.on_status = on_status;\\n  settings.on_header_field = on_header_field;\\n  settings.on_header_value = on_header_value;\\n  settings.on_body = on_body;\\n\\n  auto remaining = stream.ConsumeRemainingBytes<char>();\\n  http_parser_execute(&parser, &settings, remaining.data(), remaining.size());\\n\\n  http_should_keep_alive(&parser);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}