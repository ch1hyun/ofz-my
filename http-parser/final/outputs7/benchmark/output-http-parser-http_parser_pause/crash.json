{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "6.74",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nhttp_parser_settings settings = {0};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size == 0)\\n    {\\n        return 0;\\n    }\\n\\n    http_parser *parser = malloc(sizeof(http_parser));\\n    http_parser_init(parser, HTTP_REQUEST);\\n\\n    size_t parsed = http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n    // Removed the call to http_parser_pause\\n\\n    free(parser);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.54",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Initialize settings\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  if(size <= 1) {\\n    return 0;\\n  }\\n  \\n  int pause = data[0] & 1;  // 0 or 1\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)(data+1), size - 1);  // Feed data to parser\\n  \\n  // Run the function-under-test\\n  if(parsed > 0) { // Check if the parser has parsed any data before pausing it\\n    http_parser_pause(&parser, pause);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}