{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"OutputDev.h\" // Include the header file for OutputDev\\n#include \"PDFDoc.h\" // Include the header file for PDFDoc\\n\\n// Include necessary headers from xpdf library\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPageSlice\\n    OutputDev* outputDev = nullptr; // Initialize OutputDev object\\n    int intArg1 = stream.ConsumeIntegral<int>(); // Consume an integer argument\\n    double doubleArg1 = stream.ConsumeFloatingPoint<double>(); // Consume a double argument\\n    double doubleArg2 = stream.ConsumeFloatingPoint<double>(); // Consume a double argument\\n    int intArg2 = stream.ConsumeIntegral<int>(); // Consume an integer argument\\n    GBool gBoolArg1 = stream.ConsumeBool(); // Consume a boolean argument\\n    GBool gBoolArg2 = stream.ConsumeBool(); // Consume a boolean argument\\n    GBool gBoolArg3 = stream.ConsumeBool(); // Consume a boolean argument\\n    int intArg3 = stream.ConsumeIntegral<int>(); // Consume an integer argument\\n    int intArg4 = stream.ConsumeIntegral<int>(); // Consume an integer argument\\n    int intArg5 = stream.ConsumeIntegral<int>(); // Consume an integer argument\\n    int intArg6 = stream.ConsumeIntegral<int>(); // Consume an integer argument\\n    Object* objArg = new Object(); // Initialize Object pointer\\n    Dict* dictArg = nullptr; // Initialize Dict pointer\\n\\n    // Call the function-under-test\\n    if (intArg1 > 0 && intArg2 > 0 && doubleArg1 > 0 && doubleArg2 > 0) {\\n        outputDev = new OutputDev(); // Initialize OutputDev object\\n        dictArg = new Dict(nullptr); // Initialize Dict pointer with nullptr argument\\n        // Check if outputDev is not null before calling the function\\n        if (outputDev) {\\n            PDFDoc::displayPageSlice(outputDev, intArg1, doubleArg1, doubleArg2, intArg2, gBoolArg1, gBoolArg2, gBoolArg3, intArg3, intArg4, intArg5, intArg6, objArg, dictArg);\\n        }\\n    }\\n\\n    // Clean up allocated memory\\n    delete outputDev;\\n    delete objArg;\\n    delete dictArg;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\" // Include the header file for PDFDoc class\\n#include \"OutputDev.h\" // Include the header file for OutputDev class\\n#include \"XRef.h\" // Include the header file for XRef class\\n#include \"Dict.h\" // Include the header file for Dict class\\n#include \"Stream.h\" // Include the header file for Stream class\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\nclass DummyLoop {\\n    // Dummy class for DW_TAG_subroutine_typeInfinite loop\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function-under-test\\n    DummyOutputDev* outputDev = new DummyOutputDev();\\n    int page = stream.ConsumeIntegral<int>();\\n    double xMin = stream.ConsumeFloatingPoint<double>();\\n    double yMin = stream.ConsumeFloatingPoint<double>();\\n    int xMax = stream.ConsumeIntegral<int>();\\n    GBool horizontal = stream.ConsumeBool();\\n    GBool vertical = stream.ConsumeBool();\\n    GBool rightToLeft = stream.ConsumeBool();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    int scaleX = stream.ConsumeIntegral<int>();\\n    int scaleY = stream.ConsumeIntegral<int>();\\n    int clipXMin = stream.ConsumeIntegral<int>();\\n    int clipYMin = stream.ConsumeIntegral<int>();\\n    int clipXMax = stream.ConsumeIntegral<int>();\\n    int clipYMax = stream.ConsumeIntegral<int>();\\n    DummyLoop* loop = new DummyLoop();\\n    void* dataPtr = nullptr;\\n\\n    // Call the function-under-test\\n    BaseStream* baseStream = nullptr; // Create a BaseStream object\\n    XRef xref(baseStream, gTrue); // Initialize XRef object with BaseStream and repair flag\\n    PDFDoc pdfDoc; // Create an instance of PDFDoc class\\n    pdfDoc.displayPageSlice(outputDev, &xref, page, xMin, yMin, xMax, horizontal, vertical, rightToLeft, rotation, scaleX, scaleY, clipXMin, clipYMin, clipXMax, clipYMax, loop, dataPtr);\\n\\n    // Cleanup\\n    delete outputDev;\\n    delete loop;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}