{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <aconf.h>\\n#include <png.h>\\n#include <vector>\\n#include <string.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/splash/SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Parser.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Catalog.h\"\\n#include \"/src/xpdf-4.05/xpdf/CMap.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 20) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider provider(data, size);\\n\\n  // 0) Setup globalParams and SplashState.\\n  globalParams = new GlobalParams();\\n  auto state = std::make_unique<SplashState>(SplashColorMode::splashModeRGB8);\\n\\n  // 1) Initialize the GfxState.\\n  Matrix mat = {1.0, 0.0, 0.0, 1.0, 0.0, 0.0};\\n  GfxState gfxState(72.0, 72.0, &mat, gFalse);\\n  gfxState.setFont(nullptr, 1.0);\\n\\n  // 2) Initialize the SplashOutputDev.\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev output_dev(splashModeRGB8, 1, gFalse, paperColor);\\n\\n  // 3) Populate all of the arguments to drawChar.\\n  double x = provider.ConsumeFloatingPoint<double>();\\n  double y = provider.ConsumeFloatingPoint<double>();\\n  double dx = provider.ConsumeFloatingPoint<double>();\\n  double dy = provider.ConsumeFloatingPoint<double>();\\n  double originX = provider.ConsumeFloatingPoint<double>();\\n  double originY = provider.ConsumeFloatingPoint<double>();\\n  CharCode code = provider.ConsumeIntegral<CharCode>();\\n  int nBytes = provider.remaining_bytes() > 0\\n                   ? provider.ConsumeIntegralInRange<int>(0, provider.remaining_bytes())\\n                   : 0;\\n  Unicode *u = (Unicode *)malloc(nBytes * sizeof(Unicode));\\n  for (int i = 0; i < nBytes; ++i) {\\n    u[i] = provider.ConsumeIntegral<Unicode>();\\n  }\\n  GBool composing = provider.ConsumeIntegral<GBool>();\\n  GBool vertical = provider.ConsumeIntegral<GBool>();\\n  GBool fakeBold = provider.ConsumeIntegral<GBool>();\\n\\n  // 4) Test drawChar.\\n  output_dev.drawChar(&gfxState, x, y, dx, dy, originX, originY, code, nBytes,\\n                      u, 0 /* TODO */, composing, vertical, fakeBold);\\n\\n  // 5) Cleanup\\n  free(u);\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"GlobalParams.h\"\\n#include \"Splash.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"config.h\"\\n#include \"parseargs.h\"\\n#include \"GString.h\"\\n#include \"SplashFontEngine.h\"\\n#include \"GfxFont.h\" \\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  Guchar paperColorChar = 0xff;\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  CharCode code = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = stream.ConsumeIntegralInRange<int>(0, 4);\\n  Unicode u = stream.ConsumeIntegral<Unicode>();\\n  GBool vflip = stream.ConsumeBool();\\n  GBool hflip = stream.ConsumeBool();\\n  GBool rotate = stream.ConsumeBool();\\n  SplashFontEngine font_engine(globalParams->getEnableFreeType(),\\n                                globalParams->getAntialias(),\\n                                globalParams->getVectorAntialias());\\n  GString *text = new GString(\"Hello, Fuzzer World!\");\\n\\n  SplashCoord text_mat[6];\\n  GfxFont *font = nullptr;\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n  SplashColor paperColor = {paperColorChar, paperColorChar, paperColorChar};\\n  SplashOutputDev splashOut(splashModeRGB8, 1, gFalse, paperColor);\\n\\n  globalParams = new GlobalParams(\"/path/to/your/config\");\\n  splashOut.startDoc(state->getFont()->getDocument());\\n  splashOut.drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, &u, text->getLength(), vflip, hflip, rotate);\\n\\n  delete text;\\n  delete state;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}