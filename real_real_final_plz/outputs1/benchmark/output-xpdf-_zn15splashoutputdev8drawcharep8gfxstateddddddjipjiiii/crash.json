{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Object.h\" // Include Object.h to resolve Object type\\n#include \"Dict.h\" // Include Dict.h to resolve Dict type\\n#include \"Stream.h\" // Include Stream.h to resolve Stream type\\n#include \"Gfx.h\" // Include Gfx.h to resolve Gfx type\\n#include \"XRef.h\" // Include XRef.h to resolve Ref type\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for SplashOutputDev::drawChar function\\n    GfxState state(0, 0, nullptr, 0, gFalse); // Create an instance of GfxState with default values\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *unicode = reinterpret_cast<Unicode*>(1); // Initialize with a non-NULL value as per instructions\\n    int len = stream.ConsumeIntegral<int>();\\n    GBool rotated = stream.ConsumeBool();\\n    GBool scaled = stream.ConsumeBool();\\n    GBool showText = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 0, gFalse, nullptr, nullptr, 0, 0);\\n    splashOutputDev.drawChar(&state, x, y, dx, dy, ox, oy, charCode, nBytes, unicode, len, rotated, scaled, showText);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n#include \"Gfx.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" // Added include for SplashOutputDev.h\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    GfxState gfxState(72, 72, nullptr, 0, gFalse); // Providing necessary arguments for GfxState constructor\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *u = nullptr; // Initialize with non-NULL value\\n    int uLen = stream.ConsumeIntegral<int>();\\n    GBool rotate = stream.ConsumeBool();\\n    GBool shift = stream.ConsumeBool();\\n    GBool invert = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 0, gTrue, nullptr, gTrue, gTrue); // Using a valid constructor for SplashOutputDev\\n    splashOutputDev.drawChar(&gfxState, x, y, dx, dy, ox, oy, code, nBytes, u, uLen, rotate, shift, invert);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}