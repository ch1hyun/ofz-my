{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // The data received is fuzzed input, but we need to convert it to http_errno enum type\\n    // so just taking data[0] and casting it to http_errno type. Enum ranges from 0 to 29.\\n    if (size > 0) {\\n        http_errno err = static_cast<http_errno>(data[0] % 30); // There are total 30 error types in http_errno enum in http_parser.h\\n        const char * err_name = http_errno_description(err);\\n        const char * err_name_from_function = http_errno_name(err); // Call the function as required by the error message\\n        if (err_name != NULL && err_name_from_function != NULL) {\\n            // Add some code to use err_name and err_name_from_function to increase code coverage\\n            printf(\"Error name: %s\\\n\", err_name);\\n            printf(\"Error name from function: %s\\\n\", err_name_from_function);\\n            return 0;\\n        }\\n    }\\n\\n    return 0; // Change the return value to 0 to indicate success even if there is no error message\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno)) {\\n    return 0;\\n  }\\n\\n  enum http_errno err = *(enum http_errno *)data;\\n  const char *error_name = http_errno_name(err);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}