{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size<sizeof(int))\\n        return 0;\\n\\n  int status_raw;\\n  memcpy(&status_raw, data, sizeof(int));\\n\\n  if(status_raw < 100 || status_raw > 599) // The range of HTTP status codes\\n    return 0;\\n\\n  enum http_status status = (enum http_status)(status_raw);\\n\\n  // Call the http_status_str function with our test input\\n  const char * status_str = http_status_str(status);\\n  \\n  // Always return 0 as fuzzing does not check for correctness\\n  return 0; \\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern const char *http_status_str(enum http_status);\\n\\nconst int max_valid_http_status = 599; // As defined in RFC 7231\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  if (size != sizeof(int)) {\\n    return 0;\\n  }\\n\\n  int http_status = *((int*)data);\\n\\n  if (http_status >= 100 && http_status <= max_valid_http_status) {\\n    const char * status_str = http_status_str((enum http_status)http_status);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}