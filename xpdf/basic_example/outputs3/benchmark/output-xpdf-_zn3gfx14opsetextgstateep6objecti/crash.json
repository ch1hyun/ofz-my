{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <stdint.h>\\n#include <cstdlib>\\n#include <vector>\\n\\n#include \"PDFDoc.h\"\\n#include \"XRef.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  const std::vector<uint8_t> buffer(data, data + size);\\n  Object objNull;\\n  MemStream* stream = new MemStream((char*)buffer.data(), 0, buffer.size(), &objNull);\\n  \\n  if (!stream) {\\n    return 0;\\n  }\\n\\n  PDFDoc doc(stream);\\n\\n  int length = doc.getNumPages(); \\n  if(length > 0)\\n  {\\n    Object obj;\\n    doc.getDocInfo(&obj);\\n    Dict *dict = obj.getDict();\\n    if(dict) {\\n      Page* page = dict->getPage(1);\\n      if(page) {\\n        OutputDev *outA = nullptr;\\n        Dict *resDict = page->getResourceDict();\\n        PDFRectangle box, cropBox;\\n        Gfx gfx(&doc, outA, 1, resDict, 72.0, 72.0, &box, &cropBox, 0, nullptr, nullptr);\\n        FuzzedDataProvider provider(data, size);\\n        Object obj;\\n        if(provider.ConsumeBool()) {\\n            obj.initBool(true);\\n        } else if(provider.ConsumeBool()) {\\n            obj.initInt(1);\\n        } else {\\n            obj.initReal(1.0);\\n        }\\n        int num_args = provider.ConsumeIntegralInRange<int>(0, 10);\\n        Object args[num_args];\\n        // gfx.opSetExtGState(&obj, num_args); // This function is private, so it can't be called directly.\\n      }\\n    }\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <memory>\\n#include <mutex>\\n\\n#include \"Dict.h\"\\n#include \"Error.h\"\\n#include \"Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"Function.h\"\\n\\nstd::unique_ptr<GlobalParams> globalParams;\\nstd::once_flag flag;\\nFunction* function;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  std::call_once(\\n      flag,\\n      []() { globalParams = std::make_unique<GlobalParams>(nullptr); });\\n\\n  Object obj;\\n  GString* gstring = new GString(stream.ConsumeBytesAsString(1).c_str());\\n  obj.initString(gstring);\\n  const Object objArr[] = {obj};\\n  const int numArgs = sizeof(objArr) / sizeof(objArr[0]);  \\n  if (numArgs < 1) {\\n    return 0;\\n  }\\n\\n  std::string fileName = stream.ConsumeRemainingBytesAsString();\\n  GString* gFileName = new GString(fileName.c_str());\\n  FILE* file = fopen(fileName.c_str(), \"rb\");\\n  BaseStream* docStream = new FileStream(file, 0, false, 0, false);\\n  PDFDoc doc(docStream, nullptr, nullptr, nullptr);\\n                    \\n  Object object;\\n  object.initName(\"test\");\\n  OutputDev* outputDev = nullptr;\\n  auto gfx = std::unique_ptr<Gfx>(new Gfx(&doc, outputDev, nullptr, &objArr, numArgs, nullptr, nullptr));\\n  gfx->opSetExtGState(&object, numArgs);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}