{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <cstdint>\\n#include <cstddef>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if(Size == 0) {\\n    return 0;\\n  }\\n\\n  uint8_t statusCode = (uint8_t)Data[0];\\n  if (statusCode > 53) {   \\n    // Enum http_status enum ends at 53, anything more will result in a seg fault\\n    statusCode = statusCode % 54;  \\n  }\\n  http_status status = static_cast<http_status>(statusCode);\\n  // Calls the function-under-test\\n  const char * statusString = http_status_str(status);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.07",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_status)) {\\n    return 0;\\n  }\\n\\n  enum http_status status;\\n  memcpy(&status, data, sizeof(enum http_status));\\n\\n  const char * status_str = http_status_str(status);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}