{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GfxFont.h\"\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"SplashOutputDev.h\" // Include the library that contains the SplashOutputDev class\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  int num_args = provider.ConsumeIntegralInRange<int>(1, 2);\\n  std::vector<char> pdf = provider.ConsumeRemainingBytes<char>();\\n\\n  GlobalParams *globalParams = new GlobalParams(\"\");\\n  globalParams->setupBaseFonts(nullptr);\\n\\n  Ref ref;\\n  ref.num = 1;\\n  ref.gen = 0;\\n  \\n  Object obj;\\n  obj.initNull();\\n  \\n  MemStream *mem_stream = new MemStream(pdf.data(), 0, pdf.size(), &obj);\\n\\n  PDFDoc *pdfDoc = nullptr;\\n  try {\\n    pdfDoc = new PDFDoc(new GString((const char *) pdf.data()), NULL);\\n    if (pdfDoc->isOk()) {\\n      Dict *dict = new Dict(pdfDoc->getXRef());\\n      GfxFontDict *gfxFontDict = new GfxFontDict(pdfDoc->getXRef(), &ref, dict); \\n      GfxResources *res = new GfxResources(pdfDoc->getXRef(), dict, NULL);\\n\\n      // Create an OutputDev object\\n      SplashOutputDev *out = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse); // Use a concrete class that inherits from OutputDev\\n      \\n      Gfx *gfx = new Gfx(pdfDoc, out, 0, res, nullptr, nullptr, 0, nullptr, nullptr);\\n\\n      Object args[num_args];\\n\\n      // Call the function opSetExtGState\\n      gfx->opSetExtGState(args, num_args);\\n\\n      delete gfx;\\n      delete res;\\n      delete gfxFontDict;\\n      delete out;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete pdfDoc;\\n  delete globalParams;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "40.52",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  if (size < 3) {\\n    return 0;\\n  }\\n\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1, 3);\\n\\n  Object dict;\\n  dict.initNull();\\n\\n  std::string name = fdp.ConsumeRandomLengthString();\\n  int64_t refNum = fdp.ConsumeIntegral<int64_t>();\\n  int64_t refGen = fdp.ConsumeIntegral<int64_t>();\\n  \\n  std::vector<Object> args(numArgs);\\n  args[0].initNull();\\n  if(numArgs > 1) {\\n    args[1].initName(name.c_str());\\n  }\\n  if(numArgs > 2) {\\n    args[2].initRef(refNum, refGen);\\n  }\\n\\n  // In order for opSetExtGState to work, the args array should contain Ref type objects that can be found in the PDFDoc catalog.\\n  // In this context it's not possible because the PDFDoc instance cannot be controlled and hence we can't add objects in it's `xref` atrribute.\\n  // Also it's not possible to create a dummy `PDFDoc` because it's constructor is private.\\n\\n  //Sample API requires `pdf_doc` that will not be created with default\\n  return 0;\\n}",
        "model": ""
    }

    ]
}