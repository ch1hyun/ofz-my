{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"PDFRectangle.h\" // Include missing library\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double xh1 = fdp.ConsumeFloatingPoint<double>();\\n  double xy1 = fdp.ConsumeFloatingPoint<double>();\\n  double yx1 = fdp.ConsumeFloatingPoint<double>();\\n  double yh1 = fdp.ConsumeFloatingPoint<double>();\\n  double x1 = fdp.ConsumeFloatingPoint<double>();\\n  double y1 = fdp.ConsumeFloatingPoint<double>();\\n  bool font_change = fdp.ConsumeBool();\\n\\n  PDFRectangle pageBox(xh1, xy1, yx1, yh1);\\n  GfxState *state1 = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n  state1->setFont(NULL, 0.0);\\n  \\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n  if(font_change) {\\n    splashOut->updateFont(state1);\\n  }\\n  // Call the function updateFont instead of doUpdateFont\\n  splashOut->updateFont(state1);\\n\\n  delete splashOut;\\n  delete state1;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  Object info, xfa;\\n  Object *acroForm;\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = NULL;\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(stream);\\n    if (doc->isOk() == gTrue) {\\n      doc->getNumPages();\\n      doc->getOutline();\\n      doc->getStructTreeRoot();\\n      doc->getXRef();\\n      doc->okToPrint(gTrue);\\n      doc->okToCopy(gTrue);\\n      doc->okToChange(gTrue);\\n      doc->okToAddNotes(gTrue);\\n      doc->isLinearized();\\n      doc->getPDFVersion();\\n\\n      splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      splashOut->setNoComposite(gTrue);\\n      splashOut->startDoc(doc->getXRef());\\n      \\n      PDFRectangle pageBox;\\n      GfxState *state = new GfxState(hdpi, vdpi, &pageBox, useMediaBox, crop); \\n      splashOut->updateFont(state); // fix: call the public function\\n    }\\n  } catch (...) {\\n    delete doc;\\n    delete globalParams;\\n    delete splashOut;\\n    return 0;\\n  }\\n  delete doc;\\n  delete globalParams;\\n  delete splashOut;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}