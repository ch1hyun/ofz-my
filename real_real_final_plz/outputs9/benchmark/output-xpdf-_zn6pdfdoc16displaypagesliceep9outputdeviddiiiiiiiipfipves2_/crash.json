{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Corrected include path for the function-under-test\\n\\n// Include necessary xpdf headers\\n#include \"OutputDev.h\"\\n\\n// Include necessary xpdf headers\\n#include \"GString.h\"\\n#include \"BaseStream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function-under-test\\n    OutputDev* dev = nullptr; // Initialize with a non-NULL value\\n    int page = stream.ConsumeIntegral<int>();\\n    double xMin = stream.ConsumeFloatingPoint<double>();\\n    double yMin = stream.ConsumeFloatingPoint<double>();\\n    int xMax = stream.ConsumeIntegral<int>();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n    GBool annots = stream.ConsumeBool();\\n    int rotate = stream.ConsumeIntegral<int>();\\n    int scale = stream.ConsumeIntegral<int>();\\n    int hDPI = stream.ConsumeIntegral<int>();\\n    int vDPI = stream.ConsumeIntegral<int>();\\n    GBool abort = stream.ConsumeBool(); // Change the type to match the function signature\\n    void* abortData = nullptr; // Initialize with a non-NULL value\\n\\n    // Define the abortCheck function outside of LLVMFuzzerTestOneInput\\n    GBool abortCheck(void* data) {\\n        return abort;\\n    }\\n\\n    // Call the function-under-test\\n    PDFDoc doc(nullptr); // Passing nullptr to use the default constructor\\n    doc.displayPageSlice(dev, page, xMin, yMin, xMax, crop, printing, annots, rotate, scale, hDPI, vDPI, abortCheck, abortData);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n\\n// Include necessary headers for the types used in the code\\n#include \"/src/xpdf-4.05/xpdf/GooString.h\"\\n#include \"/src/xpdf-4.05/xpdf/TextString.h\" // Added TextString.h as a possible alternative\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function-under-test\\n    OutputDev* outputDev = nullptr;\\n    int param1 = stream.ConsumeIntegral<int>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    int param4 = stream.ConsumeIntegral<int>();\\n    GBool param5 = stream.ConsumeBool();\\n    GBool param6 = stream.ConsumeBool();\\n    GBool param7 = stream.ConsumeBool();\\n    int param8 = stream.ConsumeIntegral<int>();\\n    int param9 = stream.ConsumeIntegral<int>();\\n    int param10 = stream.ConsumeIntegral<int>();\\n    int param11 = stream.ConsumeIntegral<int>();\\n    GooString* param12 = new GooString(\"test\"); // Initialize with a non-NULL value\\n    GfxState* param13 = new GfxState(); // Initialize with a non-NULL value\\n\\n    // Call the function-under-test\\n    PDFDoc::displayPageSlice(outputDev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);\\n\\n    // Clean up allocated memory\\n    delete param12;\\n    delete param13;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}