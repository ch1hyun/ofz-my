{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Ref.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Lexer.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"parseargs.h\"\\n#include \"splash/SplashFontFile.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n\\n    double dx = fdp.ConsumeFloatingPoint<double>();\\n    double dy = fdp.ConsumeFloatingPoint<double>();\\n    double originX = fdp.ConsumeFloatingPoint<double>();\\n    double originY = fdp.ConsumeFloatingPoint<double>();\\n    double tOriginX = fdp.ConsumeFloatingPoint<double>();\\n    double tOriginY = fdp.ConsumeFloatingPoint<double>();\\n\\n    int code = fdp.ConsumeIntegralInRange(0, 255);\\n    int nBytes = fdp.ConsumeIntegralInRange(0, INT_MAX);\\n    GBool isUnicode = fdp.ConsumeBool();\\n    GBool appending = fdp.ConsumeBool();\\n    \\n    GooString *ownerPassword = new GooString();\\n    GooString *userPassword = new GooString();\\n\\n    int resolution = 300;\\n    double hDPI = resolution;\\n    double vDPI = resolution;\\n\\n    SplashColor paperColor = {0xFF, 0xFF, 0xFF};\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 3, gFalse, paperColor);\\n    GfxState *state = new GfxState(hDPI, vDPI, NULL, 0, gTrue);\\n    \\n    if (fdp.remaining_bytes() > 0) {\\n        const char *us = reinterpret_cast<const char *>(fdp.ConsumeRemainingBytes<unsigned char>().data());\\n        Unicode * u = (Unicode *)us;\\n        splashOut->drawChar(state, dx, dy, originX, originY, tOriginX, tOriginY, code, nBytes, u, nBytes, isUnicode, isUnicode, appending);\\n    }\\n\\n    delete splashOut;\\n    delete state;\\n    delete ownerPassword;\\n    delete userPassword;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "I'm sorry, but without the original code, I can't provide a solution. Could you please provide the original code that needs to be fixed?",
        "model": ""
    }

    ]
}