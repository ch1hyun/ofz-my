{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <stdio.h>\\n#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <string> // added this line\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  std::string mode = fuzzed_data.ConsumeBytesAsString(1);\\n  std::string file_name = fuzzed_data.ConsumeRemainingBytesAsString();\\n\\n  // Create a temporary file\\n  FILE *fp = tmpfile();\\n  if (!fp)\\n    return 0;\\n  fwrite(file_name.data(), 1, file_name.size(), fp);\\n  fflush(fp);\\n  rewind(fp);\\n\\n  // Get the file descriptor of the temporary file\\n  int fd = fileno(fp);\\n  if (fd == -1)\\n    return 0;\\n\\n  // Convert the file descriptor to a file name\\n  char file_name_buf[L_tmpnam];\\n  if (tmpnam(file_name_buf) == NULL)\\n    return 0;\\n\\n  // Call the target function\\n  TIFF *tiff = TIFFOpen(file_name_buf, mode.c_str());\\n\\n  if (tiff)\\n    TIFFClose(tiff);\\n\\n  fclose(fp);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    TIFF* tif = TIFFOpen(\"/dev/null\", \"w\");\\n    if (!tif) return 0;\\n    TIFFWriteEncodedStrip(tif, 0, (tdata_t)Data, Size);\\n    TIFFClose(tif);\\n    return 0;\\n}",
        "model": ""
    }

    ]
}