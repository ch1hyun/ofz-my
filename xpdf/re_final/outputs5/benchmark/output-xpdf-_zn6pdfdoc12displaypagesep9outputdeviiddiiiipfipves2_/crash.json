{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"  // Include the SplashOutputDev header\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(double) * 2 + sizeof(int) * 3 + sizeof(GBool) * 3) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  int firstPage = fuzzed_data.ConsumeIntegral<int>();\\n  int lastPage = fuzzed_data.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data.ConsumeBool();\\n  GBool crop = fuzzed_data.ConsumeBool();\\n  GBool printing = fuzzed_data.ConsumeBool();\\n\\n  // Create a dummy PDFDoc and OutputDev object\\n  GString fileNameA(\"dummy.pdf\");\\n  PDFDoc doc(&fileNameA);  // Initialize with a dummy filename\\n  \\n  // Initialize SplashOutputDev with default parameters\\n  SplashColorMode colorModeA = splashModeRGB8;\\n  int bitmapRowPadA = 4;\\n  GBool reverseVideoA = gFalse;\\n  SplashColorPtr paperColorA = nullptr;\\n  GBool bitmapTopDownA = gTrue;\\n  GBool allowAntialiasA = gTrue;\\n\\n  // Initialize the globalParams\\n  globalParams = new GlobalParams();\\n\\n  SplashOutputDev outputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);  \\n\\n  // Call the target function\\n  doc.displayPages(&outputDev, firstPage, lastPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, nullptr, nullptr);\\n\\n  // Clean up\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <fstream>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    virtual GBool upsideDown() { return gFalse; }\\n    virtual GBool useDrawChar() { return gTrue; }\\n    virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  // Create a temporary file with the fuzzed data.\\n  std::ofstream temp_file(\"fuzzed.pdf\");\\n  temp_file.write(reinterpret_cast<const char*>(data), size);\\n  temp_file.close();\\n\\n  // Initialize GlobalParams object.\\n  const char* cfgFileName = \"fuzzed.pdf\";\\n  globalParams = new GlobalParams(cfgFileName);\\n\\n  // Initialize PDFDoc object.\\n  GString fileName(\"fuzzed.pdf\");\\n  PDFDoc doc(&fileName);\\n  \\n  // Initialize OutputDev object.\\n  MyOutputDev output;\\n\\n  // Call the target function.\\n  doc.displayPages(&output, 1, 1, 1.0, 1.0, 0, gTrue, gTrue, gTrue, nullptr, nullptr);\\n\\n  // Clean up the GlobalParams object.\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}