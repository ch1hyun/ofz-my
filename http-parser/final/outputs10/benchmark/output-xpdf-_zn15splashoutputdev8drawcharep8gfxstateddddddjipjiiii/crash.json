{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharTypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\" // replaced GBool.h with GlobalParams.h\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\" // replaced Unicode.h with UnicodeMap.h\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size < sizeof(double) * 6 + sizeof(int) * 3 + sizeof(GBool) *3)\\n        return 0;\\n\\n    const double *vals = (double*)data;\\n    double x = vals[0];\\n    double y = vals[1];\\n    double dx = vals[2];\\n    double dy = vals[3];\\n    double originX = vals[4];\\n    double originY = vals[5];\\n\\n    const char* cdata = (const char*)data + sizeof(double) * 6;\\n    CharCode code = *(CharCode*)cdata;\\n    int nBytes = *(int*)(cdata + sizeof(CharCode));\\n    GBool composing = *(GBool*)(cdata + sizeof(CharCode) + sizeof(int));\\n    GBool vertical = *(GBool*)(cdata + sizeof(CharCode) + sizeof(int) + sizeof(GBool));\\n    GBool updateCTM = *(GBool*)(cdata + sizeof(CharCode) + sizeof(int) + sizeof(GBool) * 2);\\n\\n    Unicode *u = (Unicode*)0;\\n\\n    SplashColor color;\\n    for(int i=0; i < splashMaxColorComps; ++i)\\n        color[i] = 0;\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, color);\\n    splashOut->startDoc(NULL);\\n\\n    GfxState *state = new GfxState(72.0, 72.0, NULL, 0, gTrue);\\n    splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, 0, composing, vertical, updateCTM);\\n    \\n    delete state;\\n    delete splashOut;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Ref.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"splash/SplashFont.h\"\\n#include \"splash/SplashPath.h\"\\n#include \"splash/SplashPattern.h\"\\n#include \"splash/SplashState.h\"\\n#include \"splash/SplashClip.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashFontEngine.h\"\\n#include \"splash/SplashFontFile.h\"\\n#include \"splash/SplashFontFileID.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  int mod = 100;\\n  if (size < mod)\\n    return 0;\\n\\n  double x = static_cast<double>(data[0]);\\n  double y = static_cast<double>(data[1]);\\n  double dx = static_cast<double>(data[2]);\\n  double dy = static_cast<double>(data[3]);\\n\\n  SplashState state(x, y, dx, dy, gFalse, gFalse);\\n  SplashBitmap bitmap(255, 255, 256, splashModeRGB8, false);\\n  Splash splash(&bitmap, gFalse, &state);\\n  \\n  CharCode code = data[4] | (data[5] << 8) | (data[6] << 16) | (data[7] << 24);\\n\\n  Unicode * ustr = (Unicode *)calloc(16, sizeof(Unicode));\\n  for (int i = 0; i < 16; i++) {\\n    ustr[i] = data[8 + i] | (data[8+1 + i] << 8);\\n  }\\n\\n  int n = dy * dx;\\n  GBool gdi = data[9] % 2;\\n\\n  splash.drawChar(state, x, y, dx, dy, 0, 0, code, n, ustr, n, gdi, gdi, gdi);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}