{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdio.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <iostream>\\n#include <vector>\\n#include <string>\\n\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    std::cout << \"Hello World!\\\n\";\\n    if (size < 3) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    int numArgs = stream.ConsumeIntegralInRange<int>(1, 3);\\n\\n    Object dict;\\n    dict.initNull();\\n\\n    std::string name = stream.ConsumeRandomLengthString();\\n    int64_t refNum = stream.ConsumeIntegral<int64_t>();\\n    int64_t refGen = stream.ConsumeIntegral<int64_t>();\\n\\n    std::vector<Object> args(numArgs);\\n    args[0].initNull();\\n    if (numArgs > 1) {\\n        args[1].initName(name.c_str());\\n    }\\n    if (numArgs > 2) {\\n        args[2].initRef(refNum, refGen);\\n    }\\n\\n    Gfx gfx(nullptr, nullptr, 0, 0, 0, 0, 0, 0, gFalse);\\n    gfx.display(&args[0]); // Call the display function with a valid argument\\n\\n    Object obj;\\n    gfx.opSetExtGState(&obj, 0); // Call the function to satisfy the build requirement\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <vector>\\n\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n#include \"OutputDevNull.h\" // Include the specific subclass header\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    printf(\"Hello World!\\\n\");\\n\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    int numArgs = stream.ConsumeIntegralInRange<int>(1, 3);\\n\\n    Object dict;\\n    dict.initNull();\\n\\n    std::vector<Object> args(numArgs);\\n    for (int i = 0; i < numArgs; ++i) {\\n        args[i].initNull();\\n    }\\n\\n    GString* fileNameA = new GString(\"dummy.pdf\");\\n    PDFDoc doc(fileNameA); // Using the constructor with GString parameter\\n    delete fileNameA;\\n\\n    OutputDevNull out; // Using the concrete subclass OutputDevNull\\n    Dict resDict(nullptr); // Passing nullptr as XRef pointer\\n\\n    Gfx gfx(&doc, &out, &resDict);\\n\\n    gfx.opSetExtGState(args.data(), numArgs);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}