{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include \"PDFDoc.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    GString fileName(\"fuzzed.pdf\");\\n    PDFDoc doc(&fileName);\\n    SplashColor paperColor;\\n    paperColor[0] = paperColor[1] = paperColor[2] = 0xff;\\n    SplashOutputDev *output_dev = new SplashOutputDev(splashModeXBGR8, 4, gFalse, paperColor);\\n    output_dev->startDoc(doc.getXRef());\\n    int pageNo = fuzzed_data.ConsumeIntegral<int>();\\n    double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int rotate = fuzzed_data.ConsumeIntegral<int>();\\n    GBool useMediaBox = fuzzed_data.ConsumeBool();\\n    GBool crop = fuzzed_data.ConsumeBool();\\n    GBool printing = fuzzed_data.ConsumeBool();\\n    int sliceX = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceY = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceW = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceH = fuzzed_data.ConsumeIntegral<int>();\\n    GBool (*abortCheckCbk)(void *data) = nullptr;\\n    void *slice = nullptr;\\n\\n    doc.displayPageSlice(output_dev, pageNo, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, slice);\\n\\n    delete output_dev;\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <fstream>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  virtual GBool upsideDown() { return gFalse; }\\n  virtual GBool useDrawChar() { return gTrue; }\\n  virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fdp(data, size);\\n  \\n  // Create a temporary file with the fuzzing data\\n  std::ofstream tempFile(\"temp.pdf\");\\n  tempFile.write(reinterpret_cast<const char*>(data), size);\\n  tempFile.close();\\n  \\n  GString fileName(\"temp.pdf\");\\n  PDFDoc pdfdoc(&fileName, nullptr, nullptr, nullptr);\\n  if (!pdfdoc.isOk()) {\\n    return 0;\\n  }\\n  \\n  MyOutputDev outputdev;\\n  \\n  int numPages = pdfdoc.getNumPages();\\n  if (numPages == 0) {\\n    return 0;\\n  }\\n  \\n  int page = fdp.ConsumeIntegralInRange<int>(1, numPages);\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n  \\n  pdfdoc.displayPageSlice(&outputdev, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}