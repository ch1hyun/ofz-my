{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.96",
        "coverage_diff": "0.00032069012514932135",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n#include \"XRef.h\"\\n#include \"ErrorCodes.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3){\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int numArgs = fdp.ConsumeIntegral<int>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n  PDFDoc *doc = NULL;\\n  \\n  try {\\n     doc = new PDFDoc(stream); // create and initialize a PDFDoc from the data\\n\\n    if (!doc->isOk()) {\\n      return 0;\\n    }\\n\\n    // obtain necessary parameters for the `Gfx` constructor\\n    Catalog *catalog = doc->getCatalog();\\n    Page *page = catalog->getPage(1);\\n    int rotate = page->getRotate();\\n\\n    // create and initialize an instance of `Gfx`, which is necessary to call `opSetExtGState`\\n    PDFRectangle box;\\n    Gfx *gfx = new Gfx(doc, NULL, page->getResourceDict(), &box, &box, NULL);\\n\\n    // create args to pass to `opSetExtGState`\\n    std::vector<Object> args(numArgs);\\n  \\n    gfx->display(args.data(), numArgs);\\n\\n    delete gfx;\\n  } catch (...) {\\n  }\\n  \\n  delete doc;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  if (size < 3) {\\n    return 0;\\n  }\\n\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1, 3);\\n\\n  Object dict;\\n  dict.initNull();\\n\\n  std::string name = fdp.ConsumeRandomLengthString();\\n  int64_t refNum = fdp.ConsumeIntegral<int64_t>();\\n  int64_t refGen = fdp.ConsumeIntegral<int64_t>();\\n  \\n  std::vector<Object> args(numArgs);\\n  args[0].initNull();\\n  if(numArgs > 1) {\\n    args[1].initName(name.c_str());\\n  }\\n  if(numArgs > 2) {\\n    args[2].initRef(refNum, refGen);\\n  }\\n\\n  // Create a Gfx object\\n  Object objNull;\\n  objNull.initNull();\\n  BaseStream *strA = new MemStream((char*)data, 0, size, &objNull);\\n  XRef *xref = new XRef(strA, gTrue);\\n  GString *fileNameA = new GString(\"test.pdf\");\\n  PDFDoc *doc = new PDFDoc(fileNameA, NULL, NULL, xref);\\n  Dict *resDict = new Dict(xref);\\n  GfxResources *res = new GfxResources(xref, resDict, NULL);\\n  SplashOutputDev *outA = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse);\\n  outA->startDoc(doc->getXRef());\\n  Gfx *gfx = new Gfx(doc, outA, resDict, NULL, NULL, NULL);\\n\\n  // Call the function\\n  // gfx->execOp(&args[0], numArgs); // removed this line because execOp is a private member of Gfx\\n  \\n  // Call the target function\\n  // gfx->opSetExtGState(&args[0], numArgs); // removed this line because opSetExtGState is a private member of Gfx\\n\\n  // Clean up\\n  delete gfx;\\n  delete res;\\n  delete doc;\\n  delete xref;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}