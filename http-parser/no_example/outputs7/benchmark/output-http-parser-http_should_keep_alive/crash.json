{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "21.88",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nhttp_parser_settings settings;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Initialize http_parser.url for http_parser_execute\\n  parser.data = (void*)data;\\n\\n  // Add the missing function call to http_parser_execute\\n  http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  http_should_keep_alive(&parser);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.21",
        "coverage_diff": "0.0037735849056603774",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  // Use the data from the fuzzer as a C string to parse HTTP.\\n  http_parser_execute(&parser, NULL, (const char*)data, size);\\n  \\n  // Call the function-under-test\\n  int should_keep_alive = http_should_keep_alive(&parser);\\n\\n  // The return value doesn't matter in this context.\\n  return 0;\\n} ",
        "model": ""
    }

    ]
}