{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"Object.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Annot.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"GfxResources.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Annot.h\"\\n\\n#define ARRAY_SIZE 6\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  char *argv[ARRAY_SIZE];\\n  for (int k = 0; k < ARRAY_SIZE - 2; k++) {\\n    argv[k] = (char *)\"a\";\\n  }\\n  argv[ARRAY_SIZE - 1] = NULL;\\n  argv[ARRAY_SIZE - 2] = (char *)fdp.ConsumeRandomLengthString().data();\\n\\n  AnnotColor *annotColor = new AnnotColor(AnnotColor::colorTransparent);\\n  Object obj1, obj2;\\n\\n  std::string pdfDocbuf = fdp.ConsumeRemainingBytesAsString();\\n  PDFDoc *pdfDoc = new PDFDoc(NULL, NULL, NULL);\\n  pdfDoc->getCatalog()->getPage(1);\\n  GfxResources *gfxResources = new GfxResources(pdfDoc->getXRef(),\\n          pdfDoc->getCatalog()->getResDict(), NULL);\\n  GfxState *gfxState = new GfxState(72.0, 72.0,\\n          pdfDoc->getCatalog()->getPage(1)->getMediaBox(), 0,\\n          false);\\n  SplashColor splashColor;\\n  for (int i=0; i<4; i++) {\\n    splashColor[i] = 0;\\n  }\\n  SplashOutputDev splashOutputDev(splashColor, 4, false, false);\\n  double x = 0.0, y = 0.0, dx = 0.0, dy = 0.0, originX = 0.0, originY = 0.0;\\n  CharCode code = 0;\\n  int nBytes = 0;\\n  Unicode *u = NULL;\\n  int uLen = 0;\\n  splashOutputDev.drawChar(gfxState, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, false, false, false);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"GString.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  int uni = fdp.ConsumeIntegral<Unicode>();\\n  GBool accent = fdp.ConsumeBool();\\n  GBool wordSpace = fdp.ConsumeBool();\\n  GBool adjustWordSpace = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *fileName = new GString(\"dummy.pdf\");\\n  GString *ownerPW = new GString(\"ownerPassword\");\\n  GString *userPW = new GString(\"userPassword\");\\n  PDFDoc *doc = new PDFDoc(fileName, ownerPW, userPW);\\n\\n  if (doc->isOk()) {\\n    PDFRectangle box;\\n    int rotate = 0;\\n    GfxState *state = new GfxState(72.0, 72.0, &box, rotate, gFalse);\\n    SplashColor paperColor;\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1,\\n                                                    1,\\n                                                    gFalse,\\n                                                    paperColor,\\n                                                    gTrue,\\n                                                    SplashOutputDev::splashThinLineMode); // Corrected line\\n    Unicode *u = new Unicode[1];\\n    u[0] = uni;\\n    splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, 1, accent, wordSpace, adjustWordSpace);\\n    delete[] u;\\n  }\\n  return 0;\\n}",
        "model": ""
    }

    ]
}