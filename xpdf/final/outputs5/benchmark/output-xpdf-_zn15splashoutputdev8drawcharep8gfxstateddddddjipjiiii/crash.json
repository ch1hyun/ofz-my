{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.86",
        "coverage_diff": "0.005243283546191404",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  int uLen = fdp.ConsumeIntegral<int>();\\n  GBool is_invisible = fdp.ConsumeBool();\\n  GBool is_image = fdp.ConsumeBool();\\n  GBool is_dot = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  \\n  // call the target function\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, &u, uLen, is_invisible, is_image, is_dot);\\n\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_OOM",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double xRadius = fdp.ConsumeFloatingPoint<double>();\\n  double yRadius = fdp.ConsumeFloatingPoint<double>();\\n  double xpos = fdp.ConsumeFloatingPoint<double>();\\n  double ypos = fdp.ConsumeFloatingPoint<double>();\\n  double angle1 = fdp.ConsumeFloatingPoint<double>();\\n  double angle2 = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int n = fdp.ConsumeIntegral<int>();\\n  Unicode *u = new Unicode[n];\\n  for (int i = 0; i < n; i++)\\n    u[i] = fdp.ConsumeIntegral<Unicode>();\\n  GBool is_invisible = fdp.ConsumeBool();\\n  GBool is_image = fdp.ConsumeBool();\\n  GBool is_dot = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  PDFDoc *doc = NULL;\\n  GString *password = new GString(\"\");\\n  GString *ownerPassword = new GString(\"\");\\n  try {\\n    doc = new PDFDoc(new GString(\"\"), password, ownerPassword);\\n    PDFRectangle pageBox;\\n\\n    GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n\\n    SplashColor paperColor = {0xff, 0xff, 0xff, 0xff};\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n    splashOut->startDoc(doc->getXRef());\\n    splashOut->drawChar(state, xpos, ypos, xRadius, yRadius, angle1, angle2, code, n, u, n, is_invisible, is_image, is_dot);\\n\\n    delete state; // Add this line to delete the state object\\n    delete splashOut; // Add this line to delete the splashOut object\\n\\n  } catch (...) {\\n    delete doc;\\n    delete password;\\n    delete ownerPassword;\\n    delete[] u; \\n    return 0;\\n  }\\n  delete doc;\\n  delete password;\\n  delete ownerPassword;\\n  delete[] u; \\n  return 0;\\n}",
        "model": ""
    }

    ]
}