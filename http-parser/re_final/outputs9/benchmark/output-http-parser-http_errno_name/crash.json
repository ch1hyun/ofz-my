{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nextern const char * http_errno_name(enum http_errno);\\n\\n// the maximum valid http_errno value\\nconst int max_valid_http_errno = HPE_PAUSED;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size != sizeof(int)) {\\n    return 0;\\n  }\\n\\n  int http_error = *((int*)data);\\n  if (http_error >= 0 && http_error <= max_valid_http_errno) {\\n    const char* name = http_errno_name(http_error);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\n#define MAX_ERRORNO HPE_PAUSED /**< Equals to the maximum http_errno */\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size < sizeof(int)) {\\n        return 0;\\n    }\\n    int error_no = ((int *)data)[0] % (MAX_ERRORNO + 1);\\n    enum http_errno error_type = (enum http_errno) error_no;\\n    const char * errno_name = http_errno_name(error_type);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}