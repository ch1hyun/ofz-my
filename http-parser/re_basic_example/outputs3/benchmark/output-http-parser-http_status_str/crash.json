{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.07",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_status)) {\\n    return 0;\\n  }\\n\\n  // Read an http_status value from the data.\\n  enum http_status status;\\n  memcpy(&status, data, sizeof(status));\\n\\n  // Call http_status_str with the fuzzing input.\\n  const char *str = http_status_str(status);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n#include <stdint.h>\\n#include <stdio.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  // Enum http_status (as DW_TAG_enumeration_typehttp_status) ranges from 0 to 49.\\n  uint8_t status = data[0] % 50;\\n  \\n  // Ensure the function is called with non-null input\\n  const char *result = http_status_str(static_cast<enum http_status>(status));\\n  if (result != nullptr) {\\n    // Add a line to make use of the result, to increase code coverage.\\n    printf(\"%s\\\n\", result);\\n    return 0;\\n  } else {\\n    return 1;\\n  }\\n}",
        "model": ""
    }

    ]
}