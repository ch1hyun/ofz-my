{
    "samples": [

    {
        "benchmark": "output-tremor-ov_pcm_seek",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "8.58",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"ivorbisfile.h\"\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <string.h>\\n\\n#define INPUT_LIMIT 16384\\n\\nstruct vorbis_data {\\n  const uint8_t *current;\\n  const uint8_t *data;\\n  size_t size;\\n};\\n\\nsize_t read_func(void *ptr, size_t size1, size_t size2, void *datasource) {\\n  vorbis_data *vd = (vorbis_data *)(datasource);\\n  size_t len = size1 * size2;\\n  if (vd->current + len > vd->data + vd->size) {\\n    len = vd->data + vd->size - vd->current;\\n  }\\n  memcpy(ptr, vd->current, len);\\n  vd->current += len;\\n  return len;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  ov_callbacks memory_callbacks = {0};\\n  memory_callbacks.read_func = read_func;\\n  vorbis_data data_st;\\n  data_st.size = Size > INPUT_LIMIT ? INPUT_LIMIT : Size;\\n  data_st.current = Data;\\n  data_st.data = Data;\\n  OggVorbis_File vf;\\n  int result = ov_open_callbacks(&data_st, &vf, NULL, 0, memory_callbacks);\\n  \\n  if (result < 0) {\\n    return 0;\\n  }\\n  \\n  ogg_int64_t pcm_offset = static_cast<ogg_int64_t>(result);\\n  int seek_result = ov_pcm_seek(&vf, pcm_offset);\\n  \\n  ov_clear(&vf);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-tremor-ov_pcm_seek",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "8.53",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"ivorbisfile.h\"\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#define INPUT_LIMIT 16384\\n\\nstruct vorbis_data {\\n  const uint8_t *current;\\n  const uint8_t *data;\\n  size_t size;\\n};\\n\\nsize_t read_func(void *ptr, size_t size1, size_t size2, void *datasource) {\\n  vorbis_data *vd = (vorbis_data *)(datasource);\\n  size_t len = size1 * size2;\\n  if (vd->current + len > vd->data + vd->size) {\\n    len = vd->data + vd->size - vd->current;\\n  }\\n  memcpy(ptr, vd->current, len);\\n  vd->current += len;\\n  return len;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  ov_callbacks memory_callbacks = {0};\\n  memory_callbacks.read_func = read_func;\\n  vorbis_data data_st;\\n  data_st.size = size > INPUT_LIMIT ? INPUT_LIMIT : size;\\n  data_st.current = data;\\n  data_st.data = data;\\n  OggVorbis_File vf;\\n  int result = ov_open_callbacks(&data_st, &vf, nullptr, 0, memory_callbacks);\\n  if (result < 0) {\\n    return 0;\\n  }\\n\\n  ogg_int64_t offset = stream.ConsumeIntegral<uint32_t>(); \\n  result = ov_pcm_seek(&vf, offset);\\n  if (result < 0) {\\n    ov_clear(&vf);\\n    return 0;\\n  }\\n\\n  ov_clear(&vf);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}