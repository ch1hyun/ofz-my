{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <tiffio.h>\\n\\n#define FILENAME \"/tmp/libtiff-fuzzed.tif\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // We need at least one byte for 'mode' parameter\\n  if (size < 1) return 0;\\n\\n  // Write data to file\\n  FILE *fp = fopen(FILENAME, \"wb\");\\n  if (!fp)\\n    return 0;\\n  fwrite(data, size, 1, fp);\\n  fclose(fp);\\n\\n  // Open the file with libtiff\\n  const char open_mode[] = {static_cast<char>(data[0] % 3 + 'r'), '\\0'};\\n  TIFF* tif = TIFFOpen(FILENAME, open_mode);\\n\\n  // Calling the target function\\n  if (tif) {\\n    TIFFClose(tif);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  const std::string filename = stream.ConsumeRandomLengthString();\\n  const std::string mode = stream.ConsumeBytesAsString(1); // Modes are single characters ('r', 'w', etc)\\n\\n  TIFF *image = TIFFOpen(filename.c_str(), mode.c_str());\\n  if (image != NULL) {\\n    TIFFClose(image);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}