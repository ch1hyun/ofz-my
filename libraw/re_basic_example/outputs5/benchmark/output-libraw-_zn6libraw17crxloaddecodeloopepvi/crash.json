{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n\\n#include \"libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n  \\n  // Create a instance of MyLibRaw\\n  MyLibRaw handler;\\n\\n  std::vector<uint8_t> buffer = provider.ConsumeRemainingBytes<uint8_t>();\\n\\n  // Use public methods of LibRaw to process the data\\n  handler.open_buffer(buffer.data(), buffer.size());\\n  handler.unpack();\\n\\n  // Call the function crxLoadDecodeLoop\\n  if(!buffer.empty()){\\n    // Ensure that the buffer is not empty before calling crxLoadDecodeLoop\\n    handler.crxLoadDecodeLoop(buffer.data(), buffer.size());\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.19",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < sizeof(int32_t)) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  const int num = stream.ConsumeIntegral<int32_t>();\\n\\n  LibRaw rawProcessor;\\n  // rawProcessor.crxLoadDecodeLoop((void *) stream.data(), num); // this method is protected and cannot be accessed directly\\n  // also, FuzzedDataProvider doesn't have a method called data()\\n  // instead, we can use ConsumeBytes to get a std::vector<uint8_t>, convert it to void* and pass it to the function\\n  std::vector<uint8_t> rawData = stream.ConsumeBytes<uint8_t>(num);\\n  rawProcessor.open_buffer(rawData.data(), rawData.size());\\n  return 0;\\n}",
        "model": ""
    }

    ]
}