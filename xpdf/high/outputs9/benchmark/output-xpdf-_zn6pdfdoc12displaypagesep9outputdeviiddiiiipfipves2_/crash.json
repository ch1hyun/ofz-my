{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.12",
        "coverage_diff": "0.00032067984126347857",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3)\\n    return 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeBool();\\n  GBool crop = stream.ConsumeBool();\\n  GBool printing = stream.ConsumeBool();\\n  std::vector<char> buf = stream.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(buf.data(), 0, buf.size(), &obj);\\n\\n  // PDFDoc constructor can throw an error, so don't let it terminate the process\\n  try {\\n    PDFDoc doc(str);\\n    if (doc.isOk()) {\\n      doc.displayPages(NULL, 1, 1, hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL, NULL);\\n    }\\n  } catch (...) {\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cassert>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <iostream>\\n#include <string>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\" // Include the Stream header file\\n#include \"PDFDoc.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  std::string cfg = stream.ConsumeBytesAsString(size);\\n  if (cfg.empty())\\n    return 0;\\n  std::string fileName = std::tmpnam(nullptr);\\n  FILE *tmp = std::fopen(fileName.c_str(), \"wb\");\\n  if (!tmp)\\n    return 0;\\n  std::fwrite(cfg.data(), sizeof(std::uint8_t), cfg.size(), tmp);\\n  std::fclose(tmp);\\n\\n  globalParams = new GlobalParams(NULL);\\n  GString path(fileName.c_str());\\n  PDFDoc doc(&path);\\n\\n  SplashColor paperColor;\\n  paperColor[0] = 255;\\n  paperColor[1] = 255;\\n  paperColor[2] = 255;\\n\\n  SplashOutputDev splash(SplashColorMode::splashModeRGB8, 4, false, paperColor);\\n  splash.startDoc(doc.getXRef());\\n\\n  doc.displayPages(&splash, 10, 20, 72, 1, 1, 1, (GBool)1, (GBool)1);\\n\\n  delete globalParams;\\n\\n  std::remove(fileName.c_str());\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}