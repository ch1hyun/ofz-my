{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.57",
        "coverage_diff": "0.0010743119192502264",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"png.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n  const double hDPI = provider.ConsumeFloatingPoint<double>();\\n  const double vDPI = provider.ConsumeFloatingPoint<double>();\\n  const std::string fileName = provider.ConsumeRemainingBytesAsString();\\n\\n  const int rotate = 0;\\n  const GBool useMediaBox = false;\\n  const GBool crop = true;\\n  const GBool printing = false;\\n  const int sliceX = 0, sliceY = 0, sliceW = 500, sliceH = 500;\\n  const int pageNo = 1;\\n  void* context = nullptr;\\n  \\n  char zero = 0;\\n  globalParams = new GlobalParams(&zero);\\n  globalParams->setErrQuiet(gTrue);\\n\\n  if(fileName.empty()){\\n      delete globalParams;\\n      return 0;\\n  }\\n\\n  PDFDoc doc(new GString(fileName.c_str()), nullptr, nullptr);\\n  \\n  if(!doc.isOk()){\\n      delete globalParams;\\n      return 0;\\n  }\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev splash(SplashColorMode::splashModeRGB8, 1, gFalse, paperColor);\\n  \\n  doc.displayPageSlice(&splash, pageNo, hDPI, vDPI, rotate, useMediaBox, crop,\\n                       printing, sliceX, sliceY, sliceW, sliceH, nullptr, context);\\n  \\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.01",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  const int rotate = fdp.ConsumeIntegral<int>();\\n  const double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  const double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  const int pageNum = fdp.ConsumeIntegralInRange<int>(1, 10);\\n  \\n  const GBool useMediaBox = fdp.ConsumeBool();\\n  const GBool crop = fdp.ConsumeBool();\\n  const GBool printing = fdp.ConsumeBool();\\n  const int sliceX = fdp.ConsumeIntegral<int>();\\n  const int sliceY = fdp.ConsumeIntegral<int>();\\n  const int sliceW = fdp.ConsumeIntegral<int>();\\n  const int sliceH = fdp.ConsumeIntegral<int>();\\n\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  Object info, xfa;\\n  Object *acroForm;\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  SplashColor paperColor;\\n  \\n  PDFDoc *doc = NULL;\\n  try {\\n    PDFDoc document(stream);\\n    if (document.isOk() == gTrue) {\\n      delete doc;\\n      doc = &document;\\n      SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, paperColor);\\n      splashOut.startDoc(document.getXRef());\\n      doc->displayPageSlice(&splashOut, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}