{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.66",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  http_parser parser;\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  if (size > 2) { // size should be more than 2 to ensure data+1 is valid\\n    int pause = data[0]&1; \\n    http_parser_init(&parser, HTTP_BOTH);\\n    http_parser_execute(&parser, &settings, (const char*)data+1, size-1); \\n\\n    if (pause) { // only call http_parser_pause when pause is not zero\\n      http_parser_pause(&parser, pause);\\n    }\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "29.17",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\n// Declare the settings variable\\nhttp_parser_settings settings;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size==0) return 0;\\n  \\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Let's use the first byte of our data to decide whether to pause or not\\n  int pause = data[0] > 127 ? 1 : 0;\\n  \\n  http_parser_pause(&parser, pause);\\n\\n  // Add the following code to effectively invoke the function under test\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data+1, size-1);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}