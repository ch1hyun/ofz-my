{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  std::vector<char> buf = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(buf.data(), 0, buf.size(), &obj);\\n\\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL, NULL);\\n\\n  if (doc->isOk()) {\\n    PDFRectangle pageBox(0, 0, size, size);\\n    GfxState *state = new GfxState(hdpi, vdpi, &pageBox, rotate, gFalse);\\n\\n    SplashColor paperColor = {0xff, 0xff, 0xff};\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n    splashOut->startDoc(doc->getXRef());\\n\\n    CharCode charCode = fdp.ConsumeIntegral<CharCode>();\\n    Unicode unicode = fdp.ConsumeIntegral<Unicode>();\\n\\n    splashOut->drawChar(state, 0, 0, 0, 0, 0, 0, charCode, 1, &unicode, 1, gTrue, gTrue, gFalse);\\n\\n    delete splashOut;\\n    delete state;\\n  }\\n\\n  delete doc;\\n  delete str;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.84",
        "coverage_diff": "0.005211047420531527",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"GfxState.h\"\\n#include \"GString.h\"\\n#include \"OutputDev.h\"\\n#include \"config.h\"\\n#include \"SplashOutputDev.h\" // Added this line\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  double tOriginX = stream.ConsumeFloatingPoint<double>();\\n  double tOriginY = stream.ConsumeFloatingPoint<double>();\\n  CharCode c = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = 1;\\n  Unicode u = stream.ConsumeIntegral<Unicode>();\\n  int uLen = 1;\\n  GBool abort = stream.ConsumeIntegral<GBool>();\\n  GBool adjustingRise = stream.ConsumeIntegral<GBool>();\\n  GBool wordSpace = stream.ConsumeIntegral<GBool>();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n  splashOut->drawChar(state, dx, dy, originX, originY, tOriginX, tOriginY, c, nBytes, &u, uLen, abort, adjustingRise, wordSpace);\\n\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}