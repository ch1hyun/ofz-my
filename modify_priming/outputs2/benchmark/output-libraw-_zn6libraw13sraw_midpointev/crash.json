{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.82",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <libraw/libraw.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  const std::string data_str = stream.ConsumeRemainingBytesAsString();\\n\\n  // Initialize the library\\n  LibRaw raw_processor;\\n  raw_processor.recycle();\\n  \\n  // Open memory buffer that contains the image file\\n  if(int result = raw_processor.open_buffer((void*)data_str.c_str(), data_str.size())) {\\n    return 0;\\n  }\\n\\n  // Unpack the previously opened image\\n  if(int result = raw_processor.unpack()) {\\n    return 0;\\n  }\\n\\n  raw_processor.sraw_midpoint();\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.58",
        "coverage_diff": "0.00048731624116739314",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n#define HANDLE_MEMERR(ret, ret_value)                                             \\\\n  if(ret)                                                                         \\\\n  {                                                                               \\\\n    fprintf(stderr, \"%s: ret = %d, func = %s, ret_value is %d\\\n\",                 \\\\n            __FUNCTION__, ret, libraw_strerror(ret), ret_value);                  \\\\n    if(LIBRAW_FATAL_ERROR(ret))                                                  \\\\n      return -1;                                                                  \\\\n  }\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  std::vector<uint8_t> buffer(data, data + size);\\n  int ret = 0;\\n  LibRaw processor;\\n\\n  ret = processor.open_buffer(buffer.data(), buffer.size());\\n  HANDLE_MEMERR(ret, ret);\\n\\n  ret = processor.unpack();\\n  HANDLE_MEMERR(ret, ret);\\n\\n  processor.sraw_midpoint();\\n\\n  processor.recycle();\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}