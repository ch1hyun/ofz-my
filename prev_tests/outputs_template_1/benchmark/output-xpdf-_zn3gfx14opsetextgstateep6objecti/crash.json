{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Object.h>\\n#include <GfxState.h>\\n#include <Gfx.h>\\n#include <PDFRectangle.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    Object pObj;\\n    int pState = stream.ConsumeIntegral<int>();\\n\\n    double hDPIA = stream.ConsumeFloatingPoint<double>();\\n    double vDPIA = stream.ConsumeFloatingPoint<double>();\\n    PDFRectangle pageBox;\\n    int rotateA = stream.ConsumeIntegral<int>();\\n    GBool upsideDown = stream.ConsumeBool();\\n\\n    GfxState *gfxState = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n    PDFDoc *docA = new PDFDoc();\\n    OutputDev *outA = new OutputDev();\\n    Dict *resDict = new Dict();\\n    PDFRectangle *cropBox = new PDFRectangle();\\n    Gfx gfx(docA, outA, resDict, &pageBox, cropBox);\\n    gfx.display(&pObj, pState);\\n    delete gfxState;\\n    delete docA;\\n    delete outA;\\n    delete resDict;\\n    delete cropBox;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n\\n// Create a class that inherits from OutputDev and implement the pure virtual methods\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  GBool upsideDown() { return gFalse; }\\n  GBool useDrawChar() { return gTrue; }\\n  GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  Object obj = {};\\n  int state = fuzzed_data.ConsumeIntegral<int>();\\n  \\n  // Create Gfx instance\\n  GString *fileNameA = new GString(\"dummy\");\\n  PDFDoc *docA = new PDFDoc(fileNameA);\\n  MyOutputDev *outA = new MyOutputDev();\\n  BaseStream *strA = docA->getBaseStream();\\n  XRef *xrefA = new XRef(strA, gFalse);\\n  Dict *resDict = new Dict(xrefA);\\n  PDFRectangle *box = new PDFRectangle();\\n  PDFRectangle *cropBox = new PDFRectangle();\\n  GBool (*abortCheckCbkA)(void *data) = NULL;\\n  void *abortCheckCbkDataA = NULL;\\n\\n  Gfx gfx = Gfx(docA, outA, resDict, box, cropBox, abortCheckCbkA, abortCheckCbkDataA);\\n\\n  // Check if the Gfx instance is null\\n  if(gfx.isOk()) {\\n    // gfx.opSetExtGState(&obj, state); // This function is private and can't be used directly\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}