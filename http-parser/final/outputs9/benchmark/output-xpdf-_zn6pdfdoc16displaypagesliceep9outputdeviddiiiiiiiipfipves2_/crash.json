{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.96",
        "coverage_diff": "0.00032069012514932135",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  GlobalParams *globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[4] = \"yes\";\\n  globalParams->setEnableFreeType(yes);\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc doc(stream);\\n\\n  if (doc.isOk() == gTrue) {\\n    GString *metadata;\\n    if ((metadata = doc.readMetadata())) {\\n      (void)metadata->getCString();\\n    }\\n    delete metadata;\\n\\n    // Creating splash output device\\n    SplashColor paperColor = {0xff, 0xff, 0xff};\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n    splashOut->setNoComposite(gTrue);\\n    splashOut->startDoc(doc.getXRef());\\n\\n    // Define values to call displayPageSlice\\n    int sliceX = 0;\\n    int sliceY = 0;\\n    int sliceW = 0;\\n    int sliceH = 0;\\n\\n    // Getting pages\\n    for (size_t i = 1; i <= doc.getNumPages(); ++i) {\\n      doc.displayPageSlice(splashOut, i, hdpi, vdpi, rotate, useMediaBox, crop, printing,\\n                           sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n      }\\n\\n    delete splashOut;\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.30",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"OutputDev.h\"\\n#include <cstddef>\\n#include <cstdint>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(uint8_t *data, size_t size) {\\n    if ( size == 0 )\\n        return 0;\\n\\n    Object obj;\\n    MemStream *memStream = new MemStream((char*)data, 0, size, &obj);\\n    GString *fileName = new GString(\"dummy\");\\n    PDFDoc *doc = new PDFDoc(fileName, NULL, NULL);\\n\\n    if (doc->isOk()) {\\n        FuzzedDataProvider fdp(data, size);\\n\\n        int pageNum = fdp.ConsumeIntegralInRange<int>(1, doc->getNumPages());\\n        double hDPI = fdp.ConsumeFloatingPoint<double>();\\n        double vDPI = fdp.ConsumeFloatingPoint<double>();\\n        int rotate = fdp.ConsumeIntegral<int>();\\n        GBool useMediaBox = fdp.ConsumeBool();\\n        GBool crop = fdp.ConsumeBool();\\n        GBool printing = fdp.ConsumeBool();\\n        GBool doLinks = fdp.ConsumeBool();\\n        int sliceX = fdp.ConsumeIntegral<int>();\\n        int sliceY = fdp.ConsumeIntegral<int>();\\n        int sliceW = fdp.ConsumeIntegral<int>();\\n        int sliceH = fdp.ConsumeIntegral<int>();\\n        void *profileData = 0;\\n        GBool (*abortCheckCbk)(void *data) = NULL;\\n\\n        doc->displayPageSlice(nullptr, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, profileData);\\n    }\\n\\n    delete doc;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}