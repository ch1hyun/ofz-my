{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdint>\\n#include <cstring>\\n#include <array>\\n#include <fcntl.h> \\n#include <unistd.h>\\n#include <sys/stat.h>\\n#include <memory>\\n\\nstruct WrapClose {\\n  template <typename T>\\n  void operator()(T* t) const {\\n    if (t) {\\n        TIFFClose(t);\\n    }\\n  }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 6) {\\n      return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Prepare parameters\\n  std::string mode_str = stream.ConsumeBytesAsString(3);\\n  std::array<char, 3> modes;\\n  strncpy(modes.data(), mode_str.c_str(), 3);\\n  std::string name = stream.ConsumeBytesAsString(3);\\n  int handle = open(name.c_str(), O_CREAT | O_RDWR | O_TRUNC, S_IRUSR | S_IWUSR);\\n\\n  // Prepare and Launch harness\\n  TIFFOpenOptions options = {0}; // initialize options as needed\\n  std::unique_ptr<TIFF, WrapClose> tif(TIFFFdOpenExt(handle, name.c_str(), modes.data(), &options));\\n  if (!tif.get()) {\\n      return 0;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <tiffio.h> // Include the TIFF library\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Create some dummy values for the arguments\\n    int fd = 0;\\n    const char *name = \"dummy\";\\n    const char *mode = \"r\";\\n\\n    // Call the target function\\n    TIFF *tiff = TIFFFdOpen(fd, name, mode); // Use the correct function\\n\\n    // Do something with the result\\n    if (tiff) {\\n        // Do something\\n        TIFFClose(tiff);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}