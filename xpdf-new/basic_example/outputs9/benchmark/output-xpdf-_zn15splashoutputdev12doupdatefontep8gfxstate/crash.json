{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "// you may not use this file except in compliance with the License.\\n//\\n//\\n// distributed under the License is distributed on an \"AS IS\" BASIS,\\n// See the License for specific language governing permissions and\\n//\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <memory>\\n\\n#include \"PDFDoc.h\"\\n#include \"Page.h\"\\n#include \"GfxState.h\"\\n#include \"GfxFont.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashTypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/MemStream.h\"\\n\\nnamespace {\\nvoid process(PDFDoc* doc, FuzzedDataProvider* data_provider) {\\n  if (!doc->okToPrint()) {\\n    return;\\n  }\\n  const int pages = doc->getNumPages();\\n  for (int p = 1; p <= pages; ++p) {\\n    Catalog* catalog = doc->getCatalog();\\n    Page* page = catalog->getPage(p);\\n    if(!page) {\\n      continue;\\n    }\\n    Object obj;\\n    page->getContents(&obj);\\n    try {\\n      auto *gfx_state = new GfxState(72, 72, page->getCropBox(), 0, gFalse);\\n      gfx_state->setFont(GfxFont::makeFont(doc->getXRef(), \"Helvetica\",\\n          obj.getRef(), NULL));\\n      \\n      SplashColor paperColor;\\n      paperColor[0] = paperColor[1] = paperColor[2] = 255; // white\\n      \\n      std::unique_ptr<SplashOutputDev> splash_output_dev = std::make_unique<\\n              SplashOutputDev>(splashModeRGB8, 4, gFalse, paperColor);\\n      \\n      splash_output_dev->startPage(0, gfx_state);\\n      delete gfx_state;\\n    } catch(...) {\\n    }\\n  }\\n}\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if(size < 4) {\\n    return 0;\\n  }\\n  FuzzedDataProvider data_provider(data, size);\\n  const std::string filename = data_provider.ConsumeRemainingBytesAsString();\\n  std::unique_ptr<Stream> mem_stream = std::make_unique<MemStream>(\\n          const_cast<char *>(filename.c_str()), 0, filename.length(), Object());\\n      \\n  std::unique_ptr<PDFDoc> doc = std::make_unique<PDFDoc>(\\n          new GString(filename.c_str()), nullptr, nullptr, nullptr);\\n  \\n  process(doc.get(), &data_provider);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  Object info, xfa;\\n  Object *acroForm;\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes);\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    PDFDoc doc(stream);\\n    if (doc.isOk() == gTrue) {\\n      doc.getNumPages();\\n      doc.getOutline();\\n      doc.getStructTreeRoot();\\n      doc.getXRef();\\n      doc.okToPrint(gTrue);\\n      doc.okToCopy(gTrue);\\n      doc.okToChange(gTrue);\\n      doc.okToAddNotes(gTrue);\\n      doc.isLinearized();\\n      doc.getPDFVersion();\\n\\n      GString *metadata;\\n      if ((metadata = doc.readMetadata())) {\\n        (void)metadata->getCString();\\n      }\\n      delete metadata;\\n\\n      Object info;\\n      doc.getDocInfo(&info);\\n      if (info.isDict()) {\\n        info.getDict();\\n      }\\n      info.free();\\n\\n      if ((acroForm = doc.getCatalog()->getAcroForm())->isDict()) {\\n        acroForm->dictLookup(\"XFA\", &xfa);\\n        xfa.free();\\n      }\\n\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      splashOut->setNoComposite(gTrue);\\n      splashOut->startDoc(doc.getXRef());\\n      for (size_t i = 1; i <= doc.getNumPages(); ++i) {\\n        doc.displayPage(splashOut, i, hdpi, vdpi, rotate, useMediaBox, crop, printing);\\n        \\n        // Call updateFont here\\n        PDFRectangle pageBox;\\n        GfxState *state = new GfxState(hdpi, vdpi, &pageBox, rotate, gTrue);\\n        splashOut->updateFont(state);\\n        // Call doUpdateFont here\\n        splashOut->doUpdateFont(state);\\n        delete state;\\n      }\\n      (void)splashOut->getBitmap();\\n\\n      delete splashOut;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}