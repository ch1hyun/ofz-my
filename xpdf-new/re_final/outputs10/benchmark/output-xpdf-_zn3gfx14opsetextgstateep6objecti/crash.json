{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data(data, size);\\n  Object *obj = new Object();\\n  int i = fuzzed_data.ConsumeIntegral<int>();\\n  \\n  // Create GfxState object and call the opSetExtGState method\\n  // Assuming that we have a valid GfxState object 'state' and GBool 'copyPath'\\n  GfxState *state = new GfxState();\\n  GBool copyPath = gTrue;\\n  GfxState gfxState(state, copyPath);\\n  // Assuming that we have a method 'setExtGState' in GfxState class\\n  gfxState.setExtGState(i);\\n\\n  delete obj;\\n  delete state;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Initialize the required objects\\n  Object obj;\\n  \\n  // Initialize required parameters for Gfx constructor\\n  GString *fileNameA = new GString(\"dummy.pdf\");\\n  PDFDoc *docA = new PDFDoc(fileNameA);\\n  SplashOutputDev *outA = new SplashOutputDev(splashModeRGB8, 4, gFalse, gRGBWhite);\\n  Dict *resDict = new Dict(nullptr);\\n  PDFRectangle *box = new PDFRectangle();\\n  PDFRectangle *cropBox = new PDFRectangle();\\n  GBool (*abortCheckCbkA)(void *data) = nullptr;\\n  void *abortCheckCbkDataA = nullptr;\\n\\n  // Initialize Gfx object\\n  Gfx gfx(docA, outA, resDict, box, cropBox, abortCheckCbkA, abortCheckCbkDataA);\\n  \\n  // Get the integer value from the fuzzed data\\n  int intVal = stream.ConsumeIntegral<int>();\\n\\n  // Call the target function\\n  // gfx.opSetExtGState(&obj, intVal); // This function is private and cannot be accessed directly\\n\\n  // Clean up\\n  delete fileNameA;\\n  delete docA;\\n  delete outA;\\n  delete resDict;\\n  delete box;\\n  delete cropBox;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}