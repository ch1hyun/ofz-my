{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\" // Include Object header file\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include PDFDoc header file\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include OutputDev header file\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gTrue; }\\n    GBool useDrawChar() override { return gTrue; }\\n    GBool interpretType3Chars() override { return gTrue; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy Object pointer\\n    Object obj;\\n    Object *obj_ptr = &obj;\\n\\n    // Create necessary objects for Gfx constructor\\n    PDFDoc pdfDoc((char*)\"dummy.pdf\"); // Provide a dummy file name for PDFDoc\\n    DummyOutputDev outputDev; // Use a dummy implementation of OutputDev\\n    Dict resDict(nullptr); // Pass nullptr for Dict constructor\\n\\n    // Consume an integer for the second argument\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Call the function-under-test\\n    Gfx gfx(&pdfDoc, &outputDev, &resDict, nullptr, nullptr); // Create an instance of Gfx with required objects\\n\\n    // Create an Object array to pass as argument\\n    Object args[1];\\n    args[0] = obj;\\n\\n    // Call the function with the Object array\\n    gfx.opSetExtGState(args, 1); // Call the function with an object instance and arguments\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\" // Include the header file where the function-under-test is declared\\n#include \"Object.h\" // Include the header file where the Object class is declared\\n\\n// Define a dummy Object class for testing purposes\\nclass Object {\\n    // Dummy implementation\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create dummy Object pointer and int value for the function call\\n    Object obj;\\n    Object* obj_ptr = &obj; // Fix to use a pointer to the object\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Call the function-under-test\\n    Gfx gfx(nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr); // Passing nullptr for constructor arguments\\n    gfx.opSetExtGState(&obj, value); // Fix to pass the object and the fuzzed value\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}