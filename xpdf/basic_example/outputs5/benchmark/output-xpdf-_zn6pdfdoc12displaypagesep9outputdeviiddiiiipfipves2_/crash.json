{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.67",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = static_cast<GBool>(fdp.ConsumeIntegral<uint8_t>() & 1);\\n  GBool crop = static_cast<GBool>(fdp.ConsumeIntegral<uint8_t>() & 1);\\n  GBool printing = static_cast<GBool>(fdp.ConsumeIntegral<uint8_t>() & 1);\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n  \\n  const int firstPage = fdp.ConsumeIntegralInRange<int>(0, payload.size());\\n  const int lastPage = fdp.ConsumeIntegralInRange<int>(firstPage, payload.size());\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes);\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  doc = new PDFDoc(stream);\\n\\n  if (doc->isOk() == gTrue) {\\n    SplashColor paperColor = {0xff, 0xff, 0xff};\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n    splashOut->setNoComposite(gTrue);\\n    splashOut->startDoc(doc->getXRef());\\n\\n    doc->displayPages(splashOut, firstPage, lastPage, hdpi, vdpi, rotate, useMediaBox, crop, printing, NULL, NULL);\\n\\n    delete splashOut;\\n  }\\n\\n  delete doc;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.74",
        "coverage_diff": "0.00032069012514932135",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  auto payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  const char *cfgFileName = \"\"; // empty config file name\\n  globalParams = new GlobalParams(cfgFileName);\\n  PDFDoc *pdf_doc = new PDFDoc(stream);\\n\\n  if (!pdf_doc->isOk()) {\\n    delete pdf_doc;\\n    return 0;\\n  }\\n\\n  int num_pages = pdf_doc->getNumPages();\\n  int starting_page = fdp.ConsumeIntegralInRange<int>(1, num_pages);\\n  int page_count = fdp.ConsumeIntegralInRange<int>(1, num_pages - starting_page + 1);\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n  splashOut->setNoComposite(gTrue);\\n  splashOut->startDoc(pdf_doc->getXRef());\\n\\n  pdf_doc->displayPages(splashOut, starting_page, page_count, hdpi, vdpi, rotate, useMediaBox, crop, printing, NULL, NULL);\\n\\n  delete splashOut;\\n  delete pdf_doc;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}