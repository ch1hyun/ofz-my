{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size<sizeof(int)){\\n        return 0;\\n    }\\n\\n    int input = (*(int*)data) % ((int)HTTP_STATUS_SWITCHING_PROTOCOLS + 1); // Cast the data to int and modulate it to an enum value\\n    http_status_str((enum http_status)input); // Cast to enum and pass it\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\n// Chose the range for a valid enumeration http_status values\\n// Selected values are for general HTTP responses\\n#define HTTP_STATUS_MIN 100\\n#define HTTP_STATUS_MAX 599\\n\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n// Function to be fuzzed\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  // Cast to make sure we accept the input as is\\n  int http_status_raw = *(const int*)(data);\\n\\n  if (http_status_raw < HTTP_STATUS_MIN || http_status_raw > HTTP_STATUS_MAX) {\\n    return 0;\\n  }\\n\\n  enum http_status status = static_cast<enum http_status>(http_status_raw);\\n\\n  // Call the function\\n  const char * str = http_status_str(status);\\n\\n  return 0;\\n}\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}