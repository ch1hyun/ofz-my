{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.31",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    int MyCrxDecodePlane(void *p, uint32_t s) {\\n        if(s > sizeof(p)) {\\n            return -1;\\n        }\\n        return crxDecodePlane(p, s);\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Ensure that split is never zero\\n  const size_t split = stream.ConsumeIntegralInRange<size_t>(1, stream.remaining_bytes());\\n  \\n  std::vector<uint8_t> first_part = stream.ConsumeBytes<uint8_t>(split);\\n  std::vector<uint8_t> second_part = stream.ConsumeRemainingBytes<uint8_t>();\\n  \\n  if (first_part.empty() || second_part.empty()) {\\n    return 0;\\n  }\\n\\n  void *inputData = static_cast<void *>(first_part.data());\\n\\n  MyLibRaw libraw;\\n  int result = libraw.MyCrxDecodePlane(inputData, second_part.size());\\n\\n  if(result == -1) {\\n    return 0;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <cstddef>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 4)\\n    return 0; \\n\\n  FuzzedDataProvider stream(data, size);\\n  \\n  auto remaining_size = stream.remaining_bytes();\\n  const uint32_t uint32_var = stream.ConsumeIntegral<uint32_t>();\\n\\n  void *void_var = malloc(remaining_size);\\n  if (void_var == NULL)\\n    return 0;\\n  \\n  size_t bytes_to_copy = stream.remaining_bytes() < remaining_size ? stream.remaining_bytes() : remaining_size;\\n  memcpy(void_var, stream.ConsumeRemainingBytes<uint8_t>().data(), bytes_to_copy);\\n\\n  MyLibRaw RawProcessor;\\n  if (void_var != NULL && uint32_var != 0) {\\n    RawProcessor.crxDecodePlane(void_var, uint32_var);\\n  }\\n  \\n  free(void_var);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}