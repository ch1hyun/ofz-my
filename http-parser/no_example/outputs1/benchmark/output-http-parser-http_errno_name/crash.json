{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size==0) \\n    return 0;\\n\\n  // Since http_errno is an enum, we get a valid http_errno from data\\n  enum http_errno error = (enum http_errno)(data[0] % HTTP_ERRNO_MAX);\\n\\n  // Call the target function\\n  const char* result = http_errno_name(error);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  if (size == 0) return 0;\\n\\n  // As the fuzzer generates a lot of tests, it will eventually generate ones for all the enum values.\\n  // We decrease data[0] modulo the number of enum items to make sure it fits into our enum.\\n  enum http_errno err = (enum http_errno) (data[0] % HTTP_ERRNO_MAX);\\n  \\n  const char * errName = http_errno_name(err);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}