{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "27.48",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size == 0)\\n  {\\n      return 0;\\n  }\\n\\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_init(parser, HTTP_REQUEST);\\n\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  size_t nparsed = http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n  // Check if parsing was successful\\n  if (nparsed != size) {\\n    const char * errno_description = http_errno_description(parser->http_errno);\\n  }\\n\\n  free(parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {  \\n  if (size < sizeof(int)) {\\n    // Insufficient data to represent an error.\\n    return 0;\\n  }\\n\\n  // Take the input data, treat it as an enumerative error 'enum http_errno'.\\n  enum http_errno error;\\n  memcpy(&error, data, sizeof(error));\\n  \\n  // There is an upper limit to the number of enum http_errno types\\n  if (error >= 0 && error < _HTTP_ERRNO_H) {\\n    // Call the function-under-test\\n    http_errno_description(error);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}