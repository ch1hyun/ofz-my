{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.12",
        "coverage_diff": "0.010927165591053032",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode c = fdp.ConsumeIntegral<CharCode>();\\n  GBool is_invisible = fdp.ConsumeBool();\\n  GBool is_image = fdp.ConsumeBool();\\n  GBool is_dot = fdp.ConsumeBool();\\n  Unicode text = fdp.ConsumeIntegral<Unicode>();\\n  int n = 1;\\n\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n  globalParams->setupBaseFonts(\"/usr/share/ghostscript/9.25/Resource/cidfmap\");\\n\\n  GfxState *state = new GfxState(72, 72, new PDFRectangle(0, 0, 512, 512), 0, gFalse);\\n  SplashColor color = {255, 255, 255}; // White\\n  SplashOutputDev *dev = new SplashOutputDev(splashModeBGR8, 4, gFalse, color);\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"));\\n  dev->startDoc(doc->getXRef());\\n  dev->drawChar(state, x, y, dx, dy, originX, originY, c, n, &text, n, is_invisible, is_image, is_dot);\\n\\n  delete dev;\\n  delete state;\\n  delete globalParams;\\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.50",
        "coverage_diff": "0.0043612458411833085",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode c = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  int uLen = fdp.ConsumeIntegral<int>();\\n  GBool force = fdp.ConsumeIntegral<GBool>();\\n  GBool charCount = fdp.ConsumeIntegral<GBool>();\\n  GBool render = fdp.ConsumeIntegral<GBool>();\\n  \\n  setlocale(LC_ALL, \"C\");\\n  globalParams = new GlobalParams(\"\");\\n  globalParams->setErrQuiet(1);\\n  \\n  PDFDoc doc(new GString(\"dummy.pdf\"), NULL, NULL, NULL);\\n  Object info, xfa;\\n  Object *acroForm;\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = NULL;\\n  try {\\n    doc.getNumPages();\\n    doc.getOutline();\\n    doc.getStructTreeRoot();\\n    doc.getXRef();\\n    // Removed the line with getNeedAppearances() as it's not a member of 'Object'\\n    \\n    // Create a GfxState instance\\n    // Fixed the GfxState constructor to match the viable one\\n    PDFRectangle pageBox;\\n    GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n    \\n    // Create a SplashOutputDev instance\\n    splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n    \\n    // Call the drawChar function\\n    splashOut->drawChar(state, x, y, dx, dy, originX, originY, c, nBytes, &u, uLen, force, charCount, render);\\n  } catch (...) {\\n    return 0;\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}