{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.41",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  LibRaw RawProcessor;\\n\\n  if (RawProcessor.open_buffer(data, size) != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n\\n  RawProcessor.unpack();\\n  RawProcessor.dcraw_process();\\n  \\n  // Call the required function\\n  RawProcessor.sraw_midpoint();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.79",
        "coverage_diff": "0.0020846305872160706",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    LibRaw libraw;\\n\\n    libraw.imgdata.params.use_camera_wb = fuzzed_data_provider.ConsumeBool();\\n    libraw.imgdata.params.use_auto_wb = fuzzed_data_provider.ConsumeBool();\\n    libraw.imgdata.params.adjust_maximum_thr = fuzzed_data_provider.ConsumeFloatingPoint<float>();\\n\\n    if (libraw.open_buffer((void*)data, size) != LIBRAW_SUCCESS) {\\n        return 0;\\n    }\\n\\n    libraw.unpack();\\n    libraw.dcraw_process();\\n\\n    // Call the function that was not previously used\\n    libraw.sraw_midpoint();\\n\\n    libraw.dcraw_ppm_tiff_writer(\"fuzzed_output.ppm\");\\n\\n    libraw.recycle();\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}