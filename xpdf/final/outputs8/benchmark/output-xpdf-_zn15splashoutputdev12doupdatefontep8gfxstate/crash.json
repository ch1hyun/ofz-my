{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"XRef.h\"\\n#include \"Gfx.h\"\\n#include \"GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  BaseStream *stream = new MemStream(payload.data(),  0, payload.size(), &obj);\\n  PDFDoc doc(stream);\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff, 0xff};\\n  globalParams = new GlobalParams(); // Initialize GlobalParams to avoid crash\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor, gTrue);\\n  \\n  if (doc.isOk()) {\\n    doc.displayPage(splashOut, 1, 72, 72, 0, true, true, true);\\n    GfxState *state = new GfxState(72.0, 72.0, NULL, 0, gTrue);\\n    splashOut->doUpdateFont(state); // Call the function doUpdateFont as required\\n    delete state;\\n  }\\n    \\n  delete splashOut;\\n  delete globalParams; // Clean up GlobalParams after use\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  PDFRectangle pageBox;\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool isCurrent = fdp.ConsumeBool();\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, isCurrent);\\n\\n  // Update the constructor of GlobalParams to match the required argument\\n  globalParams = new GlobalParams(nullptr);\\n  SplashColor paperColor;\\n  paperColor[0] = fdp.ConsumeIntegral<unsigned char>();\\n  paperColor[1] = fdp.ConsumeIntegral<unsigned char>();\\n  paperColor[2] = fdp.ConsumeIntegral<unsigned char>();\\n  paperColor[3] = 0; // alpha\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n\\n  // Replace state->getDoc() with a function that is publicly accessible\\n  // Create a GString object to initialize PDFDoc\\n  GString *fileName = new GString(\"dummy.pdf\");\\n  PDFDoc *doc = new PDFDoc(fileName);\\n\\n  // startDoc requires an XRef object, get it from PDFDoc\\n  splashOut->startDoc(doc->getXRef());\\n\\n  // doUpdateFont is a private function. Replace it with a public function that can be called\\n  splashOut->updateFont(state);\\n\\n  delete splashOut;\\n  delete globalParams;\\n  delete state;\\n  \\n  // Delete the doc before deleting the fileName to avoid heap-use-after-free error\\n  delete doc;\\n  delete fileName;\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}