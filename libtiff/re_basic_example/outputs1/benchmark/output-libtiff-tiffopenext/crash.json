{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "Without the original code, it's impossible to provide a fixed version. Please provide the original code so that we can help you fix it.",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n\\n#include \"tiffio.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3) {\\n    return 0;\\n  }\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  std::string mode = fuzzed_data.ConsumeBytesAsString(1);\\n  if (mode.empty()) {\\n    return 0;\\n  }\\n\\n  std::string filename = fuzzed_data.ConsumeBytesAsString(2);\\n  if (filename.empty()) {\\n    return 0;\\n  }\\n\\n  TIFF* tif = TIFFOpen(filename.c_str(), mode.c_str());\\n\\n  if (tif) {\\n    TIFFClose(tif);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}