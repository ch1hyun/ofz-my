{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.98",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    http_parser parser;\\n\\n    if (size < 3) {\\n        return 0;\\n    }\\n    \\n    // Initialize the http_parser based on first byte of data\\n    http_parser_init(&parser, (enum http_parser_type)(data[0] % 3));\\n\\n    // Pause the parser based on the second byte (0 or 1)\\n    http_parser_pause(&parser, data[1] % 2);\\n\\n    // Execute the parser with the rest of the data\\n    http_parser_execute(&parser, NULL, (const char *)data+2, size-2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "20.55",
        "coverage_diff": "0.006918238993710692",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Declare settings\\nhttp_parser_settings settings;\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser_settings_init(&settings);\\n\\n  // Initialize the data\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  if(size > 0) {\\n    int pause = data[0] % 2;\\n    http_parser_pause(&parser, pause);\\n    http_parser_execute(&parser, &settings, (const char *)data, size);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}