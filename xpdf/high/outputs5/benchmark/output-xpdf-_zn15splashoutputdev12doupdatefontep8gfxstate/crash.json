{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  const char *fileName = \"/usr/local/etc/xpdfrc\";\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  // Create a PDFDoc object\\n  PDFDoc *doc = new PDFDoc(stream);\\n\\n  // Create globalParams\\n  globalParams = new GlobalParams(fileName);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  if (globalParams->getEnableFreeType()) {\\n    SplashColor paperColor = {0xff, 0xff, 0xff};\\n    // Create SplashOutputDev\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n    splashOut->setNoComposite(gTrue);\\n    splashOut->startDoc(doc->getXRef());\\n\\n    // Create GfxState and call doUpdateFont\\n    GfxState *state = new GfxState(72, 72, doc->getCatalog()->getPage(1)->getMediaBox(), rotate, gFalse);\\n    splashOut->updateFont(state);\\n  }\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  int rotate = stream.ConsumeIntegral<int>();\\n  double x1 = stream.ConsumeFloatingPoint<double>();\\n  double y1 = stream.ConsumeFloatingPoint<double>();\\n  double x2 = stream.ConsumeFloatingPoint<double>();\\n  double y2 = stream.ConsumeFloatingPoint<double>();\\n  SplashColor color = {0xff, 0xff, 0xff, 0xff};\\n\\n  // Initialize GlobalParams with a non-null argument\\n  const char *cfgFileName = \"config.cfg\";\\n  globalParams = new GlobalParams(cfgFileName);\\n  \\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, color);\\n  PDFRectangle box(x1, y1, x2, y2);\\n  GfxState *state = new GfxState(72.0, 72.0, &box, rotate, gFalse);\\n\\n  // Use public method to update font\\n  splashOut->updateFont(state);\\n\\n  delete state;\\n  delete splashOut;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}