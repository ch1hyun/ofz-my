{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\n  public:\\n    virtual GBool upsideDown() { return gFalse; }\\n    virtual GBool useDrawChar() { return gTrue; }\\n    virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nGBool abortCheckCbk(void *data) {\\n  // Implement the function logic here.\\n  // For now, we just return gFalse.\\n  return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  // Create an instance of PDFDoc and OutputDev\\n  GString* fileName = new GString(\"dummy\");\\n  PDFDoc* pdf_doc = new PDFDoc(fileName);\\n  MyOutputDev output_dev;\\n\\n  // Get the required parameters from the fuzzed_data_provider\\n  int first_page = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int last_page = fuzzed_data_provider.ConsumeIntegral<int>();\\n  double h_dpi = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double v_dpi = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data_provider.ConsumeBool();\\n  GBool crop = fuzzed_data_provider.ConsumeBool();\\n  GBool printing = fuzzed_data_provider.ConsumeBool();\\n  void *callback_data = nullptr;\\n\\n  // Call the function with the fuzzed parameters\\n  pdf_doc->displayPages(&output_dev, first_page, last_page, h_dpi, v_dpi, rotate, useMediaBox, crop, printing, abortCheckCbk, callback_data);\\n\\n  // Delete the pdf_doc and fileName objects\\n  delete pdf_doc;\\n  delete fileName;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  \\n  // Create a GString object for filename\\n  std::string filename = fuzzed_data_provider.ConsumeRandomLengthString();\\n  GString* fileNameA = new GString(filename.c_str()); // Use dynamic allocation to avoid deletion of local object\\n  PDFDoc doc(fileNameA);\\n\\n  // Create a subclass of OutputDev to implement the pure virtual methods\\n  class MyOutputDev : public OutputDev {\\n    public:\\n      GBool upsideDown() { return gFalse; }\\n      GBool useDrawChar() { return gTrue; }\\n      GBool interpretType3Chars() { return gFalse; }\\n  };\\n  MyOutputDev output_dev;\\n\\n  int first_page = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int last_page = fuzzed_data_provider.ConsumeIntegral<int>();\\n  double h_dpi = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double v_dpi = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data_provider.ConsumeBool();\\n  GBool crop = fuzzed_data_provider.ConsumeBool();\\n  GBool printing = fuzzed_data_provider.ConsumeBool();\\n  GBool (*abortCheckCbk)(void *data) = nullptr; // Fixed the type of abortCheckCbk to match the expected type\\n  void *stream = nullptr;\\n  \\n  // Check if the document is okay before displaying pages\\n  if (doc.isOk()) {\\n    doc.displayPages(&output_dev, first_page, last_page, h_dpi, v_dpi, rotate, useMediaBox, crop, printing, abortCheckCbk, stream);\\n  }\\n\\n  delete fileNameA; // Delete the dynamically allocated object to avoid memory leak\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}