{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n#include \"/src/xpdf-4.05/xpdf/GBool.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(double) * 6 + sizeof(CharCode) + sizeof(int) + sizeof(Unicode) + sizeof(int) + sizeof(GBool) * 3) {\\n    return 0;\\n  }\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double angle = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double charWidth = fuzzed_data.ConsumeFloatingPoint<double>();\\n  CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n  Unicode *u = new Unicode[nBytes];\\n  for (int i = 0; i < nBytes; ++i) {\\n    u[i] = fuzzed_data.ConsumeIntegral<Unicode>();\\n  }\\n  int uLen = fuzzed_data.ConsumeIntegral<int>();\\n  GBool fill = fuzzed_data.ConsumeBool();\\n  GBool stroke = fuzzed_data.ConsumeBool();\\n  GBool clip = fuzzed_data.ConsumeBool();\\n  \\n  GfxState state(72, 72, nullptr, 0, gTrue);\\n  SplashOutputDev splash;\\n  splash.drawChar(&state, dx, dy, originX, originY, angle, charWidth, code, nBytes, u, uLen, fill, stroke, clip);\\n\\n  delete[] u;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  // Initialize the FuzzedDataProvider using the data provided by the fuzzer\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  // Create an instance of SplashOutputDev\\n  SplashColorMode colorMode = splashModeRGB8;\\n  int bitmapRowPad = 4;\\n  GBool reverseVideo = gFalse;\\n  SplashColor paperColor;\\n  SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor);\\n\\n  // Create an instance of GfxState\\n  PDFRectangle pageBox;\\n  GfxState gfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n\\n  // Get the data for the parameters of the drawChar function\\n  double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double tOriginX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double tOriginY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n  Unicode u = fuzzed_data.ConsumeIntegral<Unicode>();\\n  int uLen = fuzzed_data.ConsumeIntegral<int>();\\n  GBool v = fuzzed_data.ConsumeIntegral<GBool>();\\n  GBool clipping = fuzzed_data.ConsumeIntegral<GBool>();\\n  GBool render = fuzzed_data.ConsumeIntegral<GBool>();\\n\\n  // Call the drawChar function\\n  splashOutputDev.drawChar(&gfxState, dx, dy, originX, originY, tOriginX, tOriginY, code, nBytes, &u, uLen, v, clipping, render);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}