{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Define the maximum valid http_errno value, based on defined types in http_parser.h\\nconst int max_valid_http_errno = HPE_PAUSED;\\n\\n// Define http_parser settings\\nhttp_parser_settings settings;\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  if (size == 0)\\n    return 0;\\n\\n  // Create a new http_parser object\\n  http_parser *parser = malloc(sizeof(http_parser));\\n\\n  // Initialize the parser with the HTTP_REQUEST type\\n  http_parser_init(parser, HTTP_REQUEST);\\n\\n  // Initialize the settings\\n  http_parser_settings_init(&settings);\\n\\n  // Parse the input data\\n  size_t parsed = http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n  // Check if there was an error during parsing\\n  if (parser->http_errno != HPE_OK) {\\n    unsigned int http_error = parser->http_errno % (max_valid_http_errno + 1);\\n\\n    // Call the function-under-test\\n    const char * errno_name = http_errno_name((enum http_errno) http_error);\\n  }\\n\\n  // Free the parser object\\n  free(parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  if (size != sizeof(int))\\n    return 0;\\n\\n  int err = *((int*)data);\\n\\n  if (err >= 0 && err < HTTP_ERRNO_MAX) {\\n    const char* err_name = http_errno_name((enum http_errno) err);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}