{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"OutputDev.h\" // Include the header file for OutputDev class\\n#include \"PDFDoc.h\" // Include the header file for PDFDoc class\\n#include \"GfxState.h\" // Include the header file for GfxState class\\n#include \"Gfx.h\" // Include the header file for Gfx class\\n#include \"Stream.h\" // Include the header file for Stream class\\n#include \"Dict.h\" // Include the header file for Dict class\\n#include \"Object.h\" // Include the header file for Object class\\n\\n// Define Ref type to fix the unknown type name error\\ntypedef int Ref;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages function\\n    OutputDev* outputDev = new OutputDev(); // Assuming OutputDev class exists\\n    int param1 = stream.ConsumeIntegral<int>();\\n    int param2 = stream.ConsumeIntegral<int>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    double param4 = stream.ConsumeFloatingPoint<double>();\\n    int param5 = stream.ConsumeIntegral<int>();\\n    GBool param6 = static_cast<GBool>(stream.ConsumeBool());\\n    GBool param7 = static_cast<GBool>(stream.ConsumeBool());\\n    GBool param8 = static_cast<GBool>(stream.ConsumeBool());\\n    void* param10 = nullptr; // Initialize to nullptr\\n\\n    // Call the function-under-test\\n    GfxState* state = new GfxState(1.0, 1.0, nullptr, 0, gTrue);\\n    Gfx* gfx = new Gfx(nullptr, nullptr, nullptr, nullptr, nullptr, nullptr); // Pass nullptr arguments to Gfx constructor\\n    Object* strRef = new Object();\\n    Dict* resDict = new Dict();\\n    PDFDoc::displayPages(outputDev, param1, param2, param3, param4, param5, param6, param7, param8, resDict, param10);\\n\\n    // Clean up allocated memory\\n    delete outputDev;\\n    delete state;\\n    delete gfx;\\n    delete strRef;\\n    delete resDict;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include the header file for PDFDoc\\n#include \"OutputDev.h\" // Include the header file for OutputDev\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gTrue; }\\n    GBool useDrawChar() override { return gTrue; }\\n    GBool interpretType3Chars() override { return gTrue; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    MyOutputDev* outputDev = new MyOutputDev(); // Initialize MyOutputDev object\\n    int page = stream.ConsumeIntegral<int>(); // Consume an integer for page parameter\\n    int numPages = stream.ConsumeIntegral<int>(); // Consume an integer for numPages parameter\\n    double scaleX = stream.ConsumeFloatingPoint<double>(); // Consume a double for scaleX parameter\\n    double scaleY = stream.ConsumeFloatingPoint<double>(); // Consume a double for scaleY parameter\\n    int rotation = stream.ConsumeIntegral<int>(); // Consume an integer for rotation parameter\\n    GBool useMediaBox = stream.ConsumeBool(); // Consume a boolean for useMediaBox parameter\\n    GBool crop = stream.ConsumeBool(); // Consume a boolean for crop parameter\\n    GBool printing = stream.ConsumeBool(); // Consume a boolean for printing parameter\\n    void* abort = nullptr; // Initialize abort parameter with nullptr\\n    void* abortData = nullptr; // Initialize abortData parameter with nullptr\\n\\n    // Call the function-under-test\\n    GooString fileName(\"dummy.pdf\"); // Create a GooString object for file name\\n    GooString ext(\"pdf\"); // Create a GooString object for extension\\n    PDFDoc pdfDoc(nullptr); // Create an instance of PDFDoc with a dummy argument\\n    pdfDoc.displayPages(outputDev, page, numPages, scaleX, scaleY, rotation, useMediaBox, crop, printing, nullptr, nullptr);\\n\\n    // Clean up\\n    delete outputDev;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}