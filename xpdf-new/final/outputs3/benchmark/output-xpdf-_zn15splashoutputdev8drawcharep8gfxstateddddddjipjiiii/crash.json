{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1C.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int rotate = fdp.ConsumeIntegralInRange<int>(0, 360);\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double origin_x = fdp.ConsumeFloatingPoint<double>();\\n  double origin_y = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  Unicode *u = (Unicode *)calloc(1, sizeof(Unicode));\\n  u[0] = fdp.ConsumeIntegral<Unicode>();\\n  GBool is_invisible = fdp.ConsumeIntegral<GBool>();\\n  GBool is_image = fdp.ConsumeIntegral<GBool>();\\n  GBool is_div = fdp.ConsumeIntegral<GBool>();\\n  std::string file_path = \"/usr/local/etc/xpdfrc\";\\n\\n  globalParams = new GlobalParams(file_path.c_str());\\n\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n\\n  SplashColor splash_color = {0xff, 0xff, 0xff, 0xff};\\n  SplashOutputDev output_device(splashModeRGB8, 4, gFalse, splash_color);\\n\\n  GBool fill = fdp.ConsumeIntegral<GBool>();\\n  output_device.drawChar(state, x, y, dx, dy, origin_x, origin_y, code, 1, u, 1, fill, is_invisible, is_image);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.85",
        "coverage_diff": "0.005235266293062671",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"GfxState.h\"\\n#include \"OutputDev.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 25) {\\n    return 0;\\n  }\\n  FuzzedDataProvider fdp(data, size);\\n\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n  globalParams->setupBaseFonts(\"/usr/share/ghostscript/9.25/Resource/cidfmap\");\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  \\n  CharCode code = fdp.ConsumeIntegralInRange<CharCode>(0, 255);\\n  int nBytes = fdp.ConsumeIntegralInRange<int>(1,255);\\n\\n  Unicode u = fdp.ConsumeIntegralInRange<Unicode >(0, 255);\\n  int uLen = u?1:0;\\n\\n  GBool render = fdp.ConsumeBool();\\n  GBool overprint = fdp.ConsumeBool();\\n  GBool is_pattern = fdp.ConsumeBool();\\n\\n  GString *fileName = new GString(\"fileName\");\\n  PDFDoc *doc = new PDFDoc(fileName, NULL, NULL, NULL);\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n\\n  // Create a GfxState object\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n\\n  // Use the drawChar function\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, &u, uLen, render, overprint, is_pattern);\\n\\n  delete state;\\n  delete splashOut;\\n  delete doc;\\n  // delete fileName; // Remove this line to prevent heap-use-after-free error\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}