{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stddef.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // If there's no data, we can't proceed\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  // Cast the first byte to http_errno, the type expected by http_errno_description\\n  enum http_errno errno_val = (enum http_errno)data[0];\\n\\n  // Check if errno_val is a valid http_errno value\\n  if (errno_val < 0 || errno_val >= _HTTP_ERRNO_H) {\\n    return 0;\\n  }\\n\\n  // Call the function-under-test, storing the result.\\n  // We don't actually need to do anything with the result for fuzzing.\\n  const char * description = http_errno_description(errno_val);\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  // As http_errno_description input type is enumeration, it's reasonable to treat fuzzing input as uint8_t.\\n  uint8_t http_errno = data[0];\\n  if (http_errno < HPE_UNKNOWN) {\\n    http_errno_description((enum http_errno)http_errno);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}