{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include <cstdint> // Include for uint8_t and size_t\\n\\nclass GfxFuzz : public Gfx {\\npublic:\\n    using Gfx::opSetExtGState; // Make opSetExtGState accessible for fuzzing\\n    GfxFuzz() : Gfx() {} // Define a default constructor to initialize the base class\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Consume data for the parameters of opSetExtGState\\n    Object obj;\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Call the function-under-test\\n    GfxFuzz *gfx = new GfxFuzz(); // Using pointer to avoid constructor issues\\n    gfx->opSetExtGState(&obj, value);\\n\\n    delete gfx; // Clean up allocated memory\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include <cstdint>\\n#include \"Object.h\"\\n\\n// Include the header file where Gfx class is declared and make opSetExtGState public\\nclass Gfx {\\npublic:\\n    void opSetExtGState(Object args[], int numArgs);\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for opSetExtGState\\n    Object obj;\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Call the function-under-test\\n    Gfx gfx(nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr);\\n    gfx.opSetExtGState(&obj, value);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}