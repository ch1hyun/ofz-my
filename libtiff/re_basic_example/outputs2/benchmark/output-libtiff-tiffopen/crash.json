{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.74",
        "coverage_diff": "0.0026970996115371457",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  const std::string action = stream.ConsumeBytesAsString(1);\\n  const std::string filename = stream.ConsumeRemainingBytesAsString();\\n\\n  TIFF *tiff = TIFFOpen(filename.c_str(), action.c_str());\\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.65",
        "coverage_diff": "0.0026165891753718576",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  std::string mode = stream.ConsumeBytesAsString(1);\\n\\n  // Initialize the TIFF handle\\n  TIFF* tiff_handle = TIFFOpen(\"/dev/null\", mode.c_str());\\n  if (!tiff_handle) {\\n    return 0;\\n  }\\n\\n  // Calls the function-under-test\\n  TIFFClose(tiff_handle);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}