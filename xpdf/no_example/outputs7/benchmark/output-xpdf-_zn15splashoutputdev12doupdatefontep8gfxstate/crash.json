{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <memory>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"XRef.h\"\\n#include \"GfxState.h\"\\n\\n#include \"SplashOutputDev.h\"\\n#include \"Gfx.h\"\\n#include \"gfile.h\"\\n#include \"GlobalParams.h\"\\n\\n// Prepare for font loading\\nGlobalParams *globalParams = nullptr;\\nSplashColor paperColor = {0xff, 0xff, 0xff, 0xff};\\nSplashOutputDev splashOut(splashModeRGB8, 1, gFalse, paperColor, gTrue);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // globalParams must be initiated before being used.\\n    if (!globalParams) {\\n        globalParams = new GlobalParams(\"\");\\n    }\\n\\n    FuzzedDataProvider fdp(data, size);\\n\\n    // Initialize necessary objects for 'doUpdateFont'\\n    // BaseStream is an abstract class and cannot be instantiated. \\n    // We need to use a derived class. For example, MemStream.\\n    Object obj = Object(objNull);\\n    MemStream *strA = new MemStream((char*)data, 0, size, &obj);\\n    XRef *xref = new XRef(strA, gFalse);\\n    GfxResources *res = new GfxResources(xref, new Dict(xref), nullptr);\\n\\n    // Correct the GfxState initialization\\n    PDFRectangle pdfRect;\\n    GfxState *state = new GfxState(72.0, 72.0, &pdfRect, res, 0, gTrue);\\n\\n    // Call the fuzzing target\\n    splashOut.updateFont(state);\\n\\n    delete state;\\n    delete res;\\n    delete xref;\\n    delete strA;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"Page.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc doc(stream);\\n  if (doc.isOk()) {\\n    SplashColor paperColor = {0xff, 0xff, 0xff};\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n    splashOut->setNoComposite(gTrue);\\n    splashOut->startDoc(doc.getXRef());\\n    for (size_t i = 1; i <= doc.getNumPages(); ++i) {\\n      doc.displayPage(splashOut, i, hdpi, vdpi, rotate, useMediaBox, crop, printing);\\n\\n      GfxState *state = new GfxState(72.0, 72.0, doc.getCatalog()->getPage(i)->getMediaBox(), rotate, gFalse);\\n      splashOut->updateFont(state);\\n      splashOut->doUpdateFont(state); // Added this line to fix the error\\n    }\\n    (void)splashOut->getBitmap();\\n    delete splashOut;\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}