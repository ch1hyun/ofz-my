{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  LibRaw MyImageData;\\n  auto inout = fuzzed_data_provider.ConsumeBytes<short>(size);\\n\\n  if (inout.empty()) {\\n    return 0;\\n  }\\n\\n  MyImageData.open_buffer(inout.data(), inout.size());\\n\\n  // Fix: Call the function parseCR3\\n  if (inout.size() > 0) {\\n    MyImageData.parseCR3(inout.data(), inout.size());\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.76",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  LibRaw cr3_decoder;\\n  // Consume all the data from the stream\\n  auto cr3_value = stream.ConsumeRemainingBytes<char>();\\n\\n  // Call function to fuzz\\n  // Fix: replace the non-existent function 'parseCR3_CTMD' with an existing function from LibRaw\\n  // Assume 'open_buffer' is the correct function to call for fuzzing\\n  cr3_decoder.open_buffer(cr3_value.data(), cr3_value.size());\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}