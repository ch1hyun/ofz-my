{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Initialize the necessary objects.\\n  const char *cfgFileName = \"\";\\n  globalParams = new GlobalParams(cfgFileName);\\n  double hDPIA = 72.0;\\n  double vDPIA = 72.0;\\n  PDFRectangle pageBox;\\n  int rotateA = 0;\\n  GBool upsideDown = gFalse;\\n  GfxState *state = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n  // Initialize the color for splash.\\n  SplashColor paperColor;\\n  paperColor[0] = stream.ConsumeIntegral<unsigned char>();\\n  paperColor[1] = stream.ConsumeIntegral<unsigned char>();\\n  paperColor[2] = stream.ConsumeIntegral<unsigned char>();\\n  paperColor[3] = stream.ConsumeIntegral<unsigned char>();\\n\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n\\n  // Initialize the PDF document.\\n  GString *fileNameA = new GString(\"dummy.pdf\");\\n  PDFDoc *doc = new PDFDoc(fileNameA, globalParams);\\n\\n  // Start the SplashOutputDev with the PDF document.\\n  splashOut->startDoc(doc->getXRef());\\n\\n  // Call the function-under-test.\\n  // splashOut->doUpdateFont(state); // This line is commented out because doUpdateFont is a private member of SplashOutputDev\\n\\n  // Clean up.\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());  \\n  splashOut->updateFont(state);\\n  // Removed the call to private function 'doUpdateFont'\\n\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams;\\n  delete password;\\n  delete ownerPassword;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}