{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  LibRaw RawProcessor;\\n  libraw_processed_image_t *image;\\n\\n  if (size < 4) {\\n    return 0;  // Not enough data for `open_bayer`\\n  }\\n\\n  int ret = RawProcessor.open_bayer(data, size, 0, 0, 0, 0, 0, 0);\\n  if (ret != 0) {\\n    return 0;  // `open_bayer` failed\\n  }\\n\\n  image = RawProcessor.dcraw_make_mem_image(&ret);\\n  if (image == nullptr) {\\n    return 0;  // `dcraw_make_mem_image` failed\\n  }\\n\\n  // Call the target function\\n  RawProcessor.sraw_midpoint();\\n\\n  // Cleanup\\n  LibRaw::dcraw_clear_mem(image);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.26",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  LibRaw RawProcessor;\\n  RawProcessor.imgdata.sizes.raw_width = 0;\\n  RawProcessor.imgdata.sizes.raw_height = 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  if (stream.remaining_bytes() >= 4) {\\n    RawProcessor.imgdata.sizes.raw_width = stream.ConsumeIntegral<unsigned>();\\n    RawProcessor.imgdata.sizes.raw_height = stream.ConsumeIntegral<unsigned>();\\n  }\\n\\n  RawProcessor.sraw_midpoint();\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}