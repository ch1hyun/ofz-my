{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n#include <memory>\\n\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"goo/gtypes.h\"\\n#include \"Object.h\"\\n#include \"XRef.h\"\\n#include \"Dict.h\"\\n#include \"Annot.h\"\\n#include \"Array.h\"\\n#include \"GfxFont.h\"\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Create the required resources\\n    globalParams = new GlobalParams(\"\");\\n    BaseStream *strA = nullptr;\\n    GBool repair = gFalse;\\n    XRef xref(strA, repair);\\n    AnnotColor _col(AnnotColor::colorTransparent);\\n    std::unique_ptr<GfxFontLoc> fontLoc(new GfxFontLoc());\\n    fontLoc->locType = gfxFontLocEmbedded;\\n    fontLoc->fontType = fontType3;\\n    fontLoc->path = nullptr;\\n    Object fontObj;\\n    fontObj.initNull();\\n    Gfx8BitFont font(xref, \"Helvetica\", fontObj, false, fontLoc.get());\\n    PDFRectangle pageBox;\\n    GfxState state(72.0, 72.0, &pageBox, 0, gFalse);\\n\\n    if (size) {\\n        // Call the target function\\n        splashOutputDev.updateFont(&state);\\n    }\\n\\n    // Clean up\\n    delete globalParams;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"PSTokenizer.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    Object obj1;\\n    obj1.initNull();\\n    MemStream *mStr = new MemStream((char *)data, 0, size, &obj1);\\n    GString *reqDataStr = mStr->toGString();\\n    if (reqDataStr->cmp(\"!PS\") == 0) {\\n        printf(\"file has !PS signature\\\n\");\\n    }\\n    delete reqDataStr;\\n    delete mStr;\\n\\n    if (size < 32) {\\n        return 0;\\n    }\\n\\n    Object obj;\\n    obj.initNull();\\n    GString srcName(\"memory\");\\n    GString dstName(\"memory\");\\n    MemStream *str = new MemStream((char *)data, 0, size, &obj);\\n    PSTokenizer *pst = new PSTokenizer(str->makePSFilter(), str);\\n\\n    // setup\\n    SplashColor color;\\n    color[0] = color[1] = color[2] = 0xff;\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 4, gFalse, color);\\n\\n    globalParams = new GlobalParams(\"/path/to/cfg\");\\n\\n    BaseStream *stream = new MemStream((char *)data, 0, size, &obj);\\n    GString *empty = new GString(\"\");\\n    PDFDoc *doc = new PDFDoc(stream, empty, empty, NULL);\\n\\n    Page *page = doc->getCatalog()->getPage(1);\\n    GfxState *gfxState = new GfxState(72.0, 72.0, page->getCropBox(), page->getRotate(), gTrue);\\n\\n    splashOutputDev.updateFont(gfxState);\\n    splashOutputDev.doUpdateFont(gfxState);\\n\\n    delete doc;\\n    delete globalParams;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}