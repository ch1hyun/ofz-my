{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  SplashColor paperColor;\\n  paperColor[0] = paperColor[1] = paperColor[2] = paperColor[3] = 0xff;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 3, gFalse, paperColor, gFalse, gFalse);\\n\\n  PDFDoc *pdfDoc = new PDFDoc(stream);\\n  if (pdfDoc->isOk()) {\\n    // Replace 'getPageCropBox' with 'getPageBox' as 'getPageCropBox' is not a member of 'PDFDoc'\\n    GfxState *state = new GfxState(72.0, 72.0, pdfDoc->getPageBox(1), pdfDoc->getPageRotate(1), gTrue);\\n    // 'doUpdateFont' is a private member of 'SplashOutputDev', replace it with public member 'updateFont'\\n    splashOut->updateFont(state);\\n  }\\n\\n  delete pdfDoc;\\n  delete splashOut;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.02",
        "coverage_diff": "0.010815274470660862",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3)\\n    return 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  double hdpi = stream.ConsumeFloatingPoint<double>();\\n  double vdpi = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeIntegral<GBool>();\\n  GBool crop = stream.ConsumeIntegral<GBool>();\\n  GBool printing = stream.ConsumeIntegral<GBool>();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  \\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword, NULL);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n  \\n  SplashColor paperColor = {0xff, 0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n  std::vector<double> matrix(6);\\n  splashOut->getSplash()->setMatrix(matrix.data());\\n  \\n  if(splashOut) {\\n    // Fixed the error by providing the required arguments to getFont function\\n    GString *fontName = new GString(\"Arial\");\\n    SplashCoord textMatA[6] = {1.0, 0.0, 0.0, 1.0, 0.0, 0.0};\\n    splashOut->getFont(fontName, textMatA);\\n    // Removed the call to doUpdateFont as it is a private function and cannot be accessed here\\n  }\\n\\n  delete splashOut;\\n  delete doc;\\n  delete password;\\n  delete ownerPassword;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}