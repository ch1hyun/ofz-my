{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size > 0) {\\n    std::string filename = \"/dev/shm/fuzzed_file.tiff\";\\n    std::string operation = \"w\";\\n\\n    TIFF* tif = TIFFOpen(filename.c_str(), operation.c_str());\\n    if (tif) {\\n      TIFFClose(tif);\\n    } \\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <string>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(Data, Size);\\n  \\n  const std::string fileName = stream.ConsumeRandomLengthString();\\n  const std::string mode = stream.PickValueInArray({\"r\", \"w\", \"a\", \"r+\", \"w+\", \"a+\"});\\n  \\n  TIFFOpenOptions options;\\n  options.flags = stream.ConsumeIntegral<uint32_t>();\\n  \\n  TIFF *tif = TIFFOpenExt(fileName.c_str(), mode.c_str(), &options);\\n\\n  if (!tif) {\\n    return 0;\\n  }\\n\\n  // Close the opened tif file\\n  TIFFClose(tif);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}