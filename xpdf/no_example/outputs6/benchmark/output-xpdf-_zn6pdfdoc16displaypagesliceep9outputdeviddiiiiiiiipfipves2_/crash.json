{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/JPXStream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  std::vector<char> pageSliceData = stream.ConsumeBytes<char>(stream.remaining_bytes());\\n  \\n  // Check if pageSliceData is empty\\n  if (pageSliceData.empty()) {\\n    return 0;\\n  }\\n\\n  Object obj;\\n  obj.initNull();\\n  BaseStream *baseStream = new MemStream(pageSliceData.data(), 0, pageSliceData.size(), &obj);\\n\\n  globalParams = new GlobalParams(\"\");\\n  globalParams->setupBaseFonts(NULL);\\n  PDFDoc doc(baseStream);\\n\\n  SplashColorMode colorModeA = splashModeRGB8;\\n  int bitmapRowPadA = 4;\\n  bool reverseVideoA = false;\\n  SplashColor paperColorA;\\n  paperColorA[0] = paperColorA[1] = paperColorA[2] = 0x00;\\n  bool bitmapTopDownA = true;\\n  bool allowAntialiasA = true;\\n\\n  SplashOutputDev *outputDevObj = new SplashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n\\n  doc.displayPageSlice(outputDevObj, stream.ConsumeIntegral<int>(),\\n                       stream.ConsumeFloatingPoint<double>(), stream.ConsumeFloatingPoint<double>(),\\n                       stream.ConsumeIntegral<int>(), stream.ConsumeBool(), stream.ConsumeBool(),\\n                       stream.ConsumeBool(), stream.ConsumeIntegral<int>(), stream.ConsumeIntegral<int>(),\\n                       stream.ConsumeIntegral<int>(), stream.ConsumeIntegral<int>(), NULL, NULL);\\n\\n  delete globalParams;\\n  delete outputDevObj;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "The provided information does not specify any C++ code to be fixed. Therefore, without knowing the specific code, it's impossible to provide a solution or fixed code. \\n\\nPlease provide the specific C++ code to get a proper solution.",
        "model": ""
    }

    ]
}