{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "33.55",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  // Create and initialize a new http_parser object\\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_init(parser, HTTP_BOTH);\\n\\n  // Create and initialize http_parser_settings\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  // Execute the parser\\n  http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n  // Check if the parser is in a pauseable state before calling http_parser_pause\\n  if (parser->http_errno == HPE_PAUSED) {\\n    // Call http_parser_pause either with 0 or 1 depending on the first byte of input data\\n    http_parser_pause(parser, data[0] % 2);\\n  }\\n\\n  // Clean up\\n  free(parser);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.98",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#include \"http_parser.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2)\\n        return 0;\\n\\n  int pause = data[0] % 2; // Taking first byte to decide for pause.\\n  \\n  // Setting HTTP parser settings\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_RESPONSE);\\n\\n  size_t nparsed = http_parser_execute(&parser, &settings, (const char *)data+1, size-1);\\n\\n  if (nparsed > 0 && nparsed < size-1) {\\n    http_parser_pause(&parser, pause);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}