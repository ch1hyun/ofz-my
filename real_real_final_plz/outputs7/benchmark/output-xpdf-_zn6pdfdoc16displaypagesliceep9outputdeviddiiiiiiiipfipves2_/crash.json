{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\n// Include the necessary header files\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    OutputDev *outputDev = nullptr;\\n    int page = stream.ConsumeIntegral<int>();\\n    double startX = stream.ConsumeFloatingPoint<double>();\\n    double startY = stream.ConsumeFloatingPoint<double>();\\n    int sizeX = stream.ConsumeIntegral<int>();\\n    GBool drawAnnotations = stream.ConsumeBool();\\n    GBool displayMode = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    int resolution = stream.ConsumeIntegral<int>();\\n    int sliceX = stream.ConsumeIntegral<int>();\\n    int sliceY = stream.ConsumeIntegral<int>();\\n    int sliceW = stream.ConsumeIntegral<int>();\\n    int sliceH = stream.ConsumeIntegral<int>();\\n\\n    void *loop = nullptr;\\n    void *customData = nullptr;\\n\\n    GString dummyFileName(\"\");\\n    PDFDoc pdfDoc(&dummyFileName);\\n\\n    // Call the function-under-test using the instance\\n    pdfDoc.displayPageSlice(outputDev, page, startX, startY, sizeX, drawAnnotations, displayMode, printing, rotation, resolution, sliceX, sliceY, sliceW, sliceH);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gTrue; }\\n    GBool useDrawChar() override { return gTrue; }\\n    GBool interpretType3Chars() override { return gTrue; }\\n};\\n\\n// Define a dummy callback function to satisfy the function signature\\nGBool dummyAbortCheckCbk(void* data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPageSlice function\\n    MyOutputDev outputDev; // Creating an instance of MyOutputDev\\n    int param1 = stream.ConsumeIntegral<int>();\\n    double param2 = stream.ConsumeFloatingPoint<double>();\\n    double param3 = stream.ConsumeFloatingPoint<double>();\\n    int param4 = stream.ConsumeIntegral<int>();\\n    GBool param5 = static_cast<GBool>(stream.ConsumeBool());\\n    GBool param6 = static_cast<GBool>(stream.ConsumeBool());\\n    GBool param7 = static_cast<GBool>(stream.ConsumeBool());\\n    int param8 = stream.ConsumeIntegral<int>();\\n    int param9 = stream.ConsumeIntegral<int>();\\n    int param10 = stream.ConsumeIntegral<int>();\\n    int param11 = stream.ConsumeIntegral<int>();\\n    void* param12 = reinterpret_cast<void*>(0x87654321); // Example address, not NULL\\n    void* param13 = reinterpret_cast<void*>(0xabcdef01); // Example address, not NULL\\n\\n    // Call the function-under-test\\n    PDFDoc pdfDoc(nullptr, nullptr); // Passing nullptr to use default constructor and nullptr for ownerPassword\\n    pdfDoc.displayPageSlice(&outputDev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, dummyAbortCheckCbk, param12, param13);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}