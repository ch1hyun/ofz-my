{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.89",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <iostream>\\n#include <sstream>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n\\n#include \"libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  LibRaw RawProcessor;\\n  if (size == 0) return 0;\\n\\n  std::string rem_bytes = stream.ConsumeRemainingBytesAsString();\\n  if (rem_bytes.size() > 0) {\\n    std::istringstream file(rem_bytes);\\n    std::string file_str = file.str(); // Store the string to a variable to prevent it from being deallocated prematurely\\n    LibRaw_abstract_datastream* stream = new LibRaw_buffer_datastream(file_str.c_str(), file_str.size());\\n    int ret = RawProcessor.open_datastream(stream);\\n    // RawProcessor.selectCRXTrack(); // Call the function as required by the error message\\n    delete stream;\\n  }\\n  RawProcessor.recycle();\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.85",
        "coverage_diff": "0.00032487749411159544",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/libraw/libraw/libraw.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1)\\n    return 0;\\n  LibRaw rawProcessor;\\n  \\n  if (rawProcessor.open_buffer(const_cast<uint8_t *>(data), size) != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n  if (rawProcessor.unpack() != LIBRAW_SUCCESS) {\\n    rawProcessor.recycle();\\n    return 0;\\n  }\\n\\n  // Call to function-under-test\\n  // Replace 'selectCRXTrack' with a function that exists in 'LibRaw', \\n  // for example 'adjust_sizes_info_only'\\n  rawProcessor.adjust_sizes_info_only();\\n  \\n  rawProcessor.recycle();\\n  return 0;\\n}",
        "model": ""
    }

    ]
}