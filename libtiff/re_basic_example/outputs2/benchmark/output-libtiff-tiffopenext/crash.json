{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <tiffio.h>\\n#include <cstring> // Include this library to fix the 'memcpy' error\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    TIFF *tiff;\\n    char mode[] = \"r\";\\n\\n    // Create a buffer to hold the data and null terminator\\n    char *buffer = new char[size + 1];\\n    memcpy(buffer, data, size);\\n    buffer[size] = '\\0'; // Null-terminate the buffer\\n\\n    // Create a TIFFOpenOptions structure\\n    // TIFFOpenOptions is a forward declaration in the tiffio.h and it's not defined, so we can't use it\\n    // Instead, we'll use TIFFClientOpen which allows us to provide our own read, write and seek methods\\n    tiff = TIFFClientOpen(\"name\", mode, (thandle_t)buffer, \\n                          _tiffReadProc, _tiffWriteProc, _tiffSeekProc, \\n                          _tiffCloseProc, _tiffSizeProc, \\n                          _tiffMapFileProc, _tiffUnmapFileProc);\\n    if (tiff) {\\n        TIFFClose(tiff);\\n    }\\n\\n    delete[] buffer;\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <sstream>\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n\\nextern \"C\" void handle_error(const char *unused, const char *unused2, va_list unused3) { return; }\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  TIFFSetErrorHandler(handle_error);\\n  TIFFSetWarningHandler(handle_error);\\n\\n  std::ostringstream s;\\n  s.write(reinterpret_cast<const char*>(data), size);\\n\\n  // The TIFFOpenOptions type is forward declared but not defined in the included headers.\\n  // Since the TIFFOpen function does not actually require this argument, we can just pass NULL.\\n  // TIFFOpenOptions options;\\n  // memset(&options, 0, sizeof(options));\\n  // TIFF* tiff = TIFFOpenExt(\"dummy\", \"r\", &options);\\n  TIFF* tiff = TIFFOpen(\"dummy\", \"r\");\\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}