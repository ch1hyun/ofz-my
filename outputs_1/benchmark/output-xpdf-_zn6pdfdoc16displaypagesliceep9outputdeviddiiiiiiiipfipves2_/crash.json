{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <vector>\\n#include <fuzzing/data/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Zoox.h\"\\n\\nclass MyOutputDev : public OutputDev {\\n public:\\n  GBool upsideDown() override { return gFalse; }\\n  GBool useDrawChar() override { return gFalse; }\\n  GBool interpretType3Chars() override { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fd_provider(data, size);\\n\\n  MyOutputDev output_dev_object;\\n  OutputDev *output_dev = &output_dev_object;\\n\\n  int pg = fd_provider.ConsumeIntegral<int>();\\n\\n  double h_dpi = fd_provider.ConsumeFloatingPoint<double>();\\n  double v_dpi = fd_provider.ConsumeFloatingPoint<double>();\\n\\n  int rotate = fd_provider.ConsumeIntegral<int>();\\n\\n  GBool useMediaBox = fd_provider.ConsumeBool();\\n  GBool crop = fd_provider.ConsumeBool();\\n  GBool printing = fd_provider.ConsumeBool();\\n\\n  int sliceX = fd_provider.ConsumeIntegral<int>();\\n  int sliceY = fd_provider.ConsumeIntegral<int>();\\n  int sliceW = fd_provider.ConsumeIntegral<int>();\\n  int sliceH = fd_provider.ConsumeIntegral<int>();\\n\\n  if (fd_provider.remaining_bytes() < 1)\\n    return 0;\\n\\n  std::vector<uint8_t> remaining_bytes = fd_provider.ConsumeRemainingBytes<uint8_t>();\\n  void *void_data = static_cast<void*>(remaining_bytes.data());\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  GString fileName(\"dummy.pdf\");\\n  PDFDoc pd(&fileName);\\n\\n  SplashColorMode colorMode = splashModeRGB8;\\n  int bitmapRowPad = 4;\\n  GBool reverseVideo = gFalse;\\n  SplashColor paperColor;\\n  paperColor[0] = paperColor[1] = paperColor[2] = 0x00; // white\\n  GBool bitmapTopDown = gTrue;\\n  GBool allowAntialias = gTrue;\\n\\n  SplashOutputDev od(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n\\n  int pg = stream.ConsumeIntegral<int>();\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeBool();\\n  GBool crop = stream.ConsumeBool();\\n  GBool printing = stream.ConsumeBool();\\n  int sliceX = stream.ConsumeIntegral<int>();\\n  int sliceY = stream.ConsumeIntegral<int>();\\n  int sliceW = stream.ConsumeIntegral<int>();\\n  int sliceH = stream.ConsumeIntegral<int>();\\n  \\n  auto infLoop = nullptr;\\n  \\n  char buffer[10];\\n  void *p = buffer;\\n\\n  pd.displayPageSlice(&od, pg, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, infLoop, p);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}