{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint message_begin_cb(http_parser* _) { return 0; }\\nint header_field_cb(http_parser* _, const char* __, size_t ___) { return 0; }\\nint header_value_cb(http_parser* _, const char* __, size_t ___) { return 0; }\\nint url_cb(http_parser* _, const char* __, size_t ___) { return 0; }\\nint status_cb(http_parser* _, const char* __, size_t ___) { return 0; }\\nint body_cb(http_parser* _, const char* __, size_t ___) { return 0; }\\nint headers_complete_cb(http_parser* _) { return 0; }\\nint message_complete_cb(http_parser* _) { return 0; }\\nint chunk_header_cb(http_parser* _) { return 0; }\\nint chunk_complete_cb(http_parser* _) { return 0; }\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0; // we need to extract at least one byte for the pause parameter\\n  }\\n\\n  // Set up a dummy HTTP parser\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Extract the pause parameter\\n  int pause = data[0] % 2;  // Convert to boolean\\n  const char *buffer = (const char*)(data) + 1;\\n  size_t len = size - 1;\\n\\n  // Create a settings object\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  // Define the necessary callbacks\\n  settings.on_message_begin = message_begin_cb;\\n  settings.on_header_field = header_field_cb;\\n  settings.on_header_value = header_value_cb;\\n  settings.on_url = url_cb;\\n  settings.on_status = status_cb;\\n  settings.on_body = body_cb;\\n  settings.on_headers_complete = headers_complete_cb;\\n  settings.on_message_complete = message_complete_cb;\\n  settings.on_chunk_header = chunk_header_cb;\\n  settings.on_chunk_complete = chunk_complete_cb;\\n\\n  // Call http_parser_execute with the settings object\\n  http_parser_execute(&parser, &settings, buffer, len);\\n\\n  //Check if the parser is in a state that allows pausing\\n  if(parser.state != s_start_req && parser.state != s_start_res){\\n    //Call http_parser_pause\\n    http_parser_pause(&parser, pause);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "20.42",
        "coverage_diff": "0.006918238993710692",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Define settings\\nhttp_parser_settings settings;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1)\\n    return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  const int pause_value = data[0] & 1;\\n  http_parser_pause(&parser, pause_value);\\n\\n  // Initialize settings\\n  http_parser_settings_init(&settings);\\n\\n  // Add this block to utilize the function under test\\n  if (size > 1) {\\n    size_t parsed = http_parser_execute(&parser, &settings, (const char*)data+1, size-1);\\n    if (parsed != size-1) {\\n      return 0;\\n    }\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}