{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "21.10",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  static const http_parser_settings settings_null = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  http_parser_execute(&parser, &settings_null, (const char *)data, size);\\n\\n  // While maximum size of HTTP request is far beyond the size limit of fuzzer generated data (several kilobytes),\\n  // since we test http_should_keep_alive in an undefined state, the check will terminate if size is too large for buffer.\\n  if (size < 1024*1024) {\\n    http_should_keep_alive(&parser);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "23.62",
        "coverage_diff": "0.005660377358490566",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"http_parser.h\"\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  // Initialize a new HTTP parser\\n  http_parser parser;\\n  http_parser_settings settings;\\n  \\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Setting HTTP parser\\n  std::string http_method = stream.ConsumeRandomLengthString();\\n  switch (http_method.c_str()[0]) {\\n    case 'G':\\n      http_parser_init(&parser, HTTP_REQUEST);\\n      break;\\n    case 'P':\\n      http_parser_init(&parser, HTTP_RESPONSE);\\n      break;\\n    default:\\n      http_parser_init(&parser, HTTP_BOTH);\\n      break;\\n  }\\n\\n  // Setting HTTP parser callbacks\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Using stream and http_method to replicate an HTTP request\\n  http_parser_execute(&parser, &settings, http_method.c_str(), http_method.size());\\n\\n  // Calls the function-under-test\\n  int result = http_should_keep_alive(&parser);\\n  (void) result;  // Ignores the result. It is OK in a fuzzing harness.\\n\\n   return 0;\\n}",
        "model": ""
    }

    ]
}