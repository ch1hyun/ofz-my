{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.76",
        "coverage_diff": "0.00021658499607439695",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    LibRaw RawProcessor;\\n    RawProcessor.open_buffer(data, size);\\n    RawProcessor.unpack();\\n    RawProcessor.sraw_midpoint(); // Call the function under test\\n    RawProcessor.recycle();\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;  // Not enough data to proceed.\\n  }\\n\\n  LibRaw libraw;\\n\\n  ushort *raw_image = (ushort *)malloc(size);\\n  memcpy(raw_image, data, size);\\n  libraw.imgdata.rawdata.raw_image = raw_image;\\n\\n  char *raw_alloc = (char *)malloc(size - 1);\\n  memcpy(raw_alloc, data + 1, size - 1);\\n  libraw.imgdata.rawdata.raw_alloc = raw_alloc;\\n\\n  // Check if the midpoint is zero\\n  if (libraw.sraw_midpoint() == 0) {\\n    // Do not call recycle since it attempts to free memory not allocated with malloc\\n    // libraw.recycle();\\n  }\\n\\n  // Do not manually free memory, let the destructor handle it\\n  // free(raw_image);\\n  // free(raw_alloc);\\n\\n  return 0;\\n}\\n\\n// Note: We don't call LibRaw::open_buffer as we don't want to parse the file\\n// (it might be very slow). However, without calling open_buffer, internal\\n// buffers are not allocated and we must avoid freeing unallocated buffers\\n// in recycle.",
        "model": ""
    }

    ]
}