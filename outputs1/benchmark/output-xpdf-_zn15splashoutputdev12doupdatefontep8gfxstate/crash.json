{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "45.21",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n\\n// Assuming GfxState is a defined class in the codebase\\nclass GfxState {\\npublic:\\n    // Example members for GfxState, modify as per actual definition\\n    int some_integer;\\n    float some_float;\\n    char some_string[32]; // Fixed size for demonstration\\n};\\n\\nnamespace SplashOutputDev {\\n    void doUpdateFont(GfxState *gfxState) {\\n        // Function implementation (not provided)\\n    }\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState object\\n    GfxState gfxState;\\n\\n    // Consume data for GfxState members\\n    gfxState.some_integer = stream.ConsumeIntegral<int>();\\n    gfxState.some_float = stream.ConsumeFloatingPoint<float>();\\n\\n    // Consume a string for demonstration purposes\\n    std::string str = stream.ConsumeBytesAsString(sizeof(gfxState.some_string) - 1);\\n    std::strncpy(gfxState.some_string, str.c_str(), sizeof(gfxState.some_string) - 1);\\n    gfxState.some_string[sizeof(gfxState.some_string) - 1] = '\\0'; // Ensure null termination\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    SplashOutputDev::doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "-",
        "coverage": "31.01",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n\\n// Assuming GfxState is defined somewhere in the project\\nclass GfxState {\\npublic:\\n    // Example members, adjust according to actual GfxState definition\\n    int fontSize;\\n    std::vector<uint8_t> fontData;\\n\\n    GfxState() : fontSize(0) {}\\n};\\n\\n// Assuming SplashOutputDev is defined somewhere in the project\\nclass SplashOutputDev {\\npublic:\\n    void doUpdateFont(GfxState *state) {\\n        // Function implementation\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    // Create a FuzzedDataProvider instance\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize GfxState\\n    GfxState gfxState;\\n\\n    // Consume an integer for font size\\n    gfxState.fontSize = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume a vector of bytes for font data\\n    size_t fontDataSize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 1024); // Ensure at least 1 byte\\n    gfxState.fontData = fuzzed_data.ConsumeBytes<uint8_t>(fontDataSize);\\n\\n    // Create an instance of SplashOutputDev\\n    SplashOutputDev splashOutputDev;\\n\\n    // Call the function under test\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    splashOutputDev.doUpdateFont(&gfxState);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}