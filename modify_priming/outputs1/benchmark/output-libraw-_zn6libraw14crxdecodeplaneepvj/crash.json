{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n\\nclass FuzzRawProcessor : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    uint32_t size_crx = stream.ConsumeIntegral<uint32_t>();\\n    std::vector<uint8_t> crxData = stream.ConsumeBytes<uint8_t>(size_crx);\\n    if(crxData.empty()) {\\n        return 0;\\n    }\\n    void* crx = static_cast<void*>(crxData.data());\\n\\n    FuzzRawProcessor RawProcessor;\\n    if (crx && size_crx > 0) {\\n        try {\\n            RawProcessor.crxDecodePlane(crx, size_crx);\\n        } catch (...) {\\n            return 0;\\n        }\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.22",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"fuzzer/FuzzedDataProvider.h\"\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nusing namespace std;\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(uint32_t)) {\\n    return 0;  // Not enough data for 'numPixels', let alone the pixel data\\n  }\\n  FuzzedDataProvider stream(data, size);\\n  MyLibRaw rawDataProcessor;\\n  \\n  const uint32_t numPixels = stream.ConsumeIntegral<uint32_t>();\\n  if (numPixels > size - sizeof(uint32_t)) {\\n    return 0;  // Not enough data for 'pixelData'\\n  }\\n  uint16_t *pixelData = new uint16_t[numPixels];\\n\\n  rawDataProcessor.crxDecodePlane((void *)pixelData, numPixels);\\n\\n  delete[] pixelData;\\n  return 0;\\n}",
        "model": ""
    }

    ]
}