{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int))\\n        return 0;\\n\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n    Object arg1;\\n    auto arg2 = fuzzedDataProvider.ConsumeIntegral<int>();\\n\\n    if (fuzzedDataProvider.remaining_bytes() > 0) {\\n        const std::vector<char> stringBytes = fuzzedDataProvider.ConsumeRemainingBytes<char>();\\n        arg1.initString(new GString(stringBytes.data(), stringBytes.size()));\\n    } else {\\n        arg1.initNull();\\n    }\\n\\n    XRef *xref = new XRef();\\n    Dict *resDict = new Dict(xref);\\n    GfxResources *res = new GfxResources(xref, resDict, nullptr);\\n    PDFRectangle *pageBox = new PDFRectangle();\\n    GfxState *state = new GfxState(72.0, 72.0, pageBox, 0, gTrue);\\n    PDFDoc *doc = new PDFDoc();\\n    Gfx *gfx = new Gfx(doc, nullptr, 1, resDict, pageBox, pageBox);\\n\\n    gfx->opSetExtGState(&arg1, arg2);\\n\\n    delete gfx;\\n    delete state;\\n    delete res;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"PreScanOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"TextOutputDev.h\"\\n#include \"UnicodeMap.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  Object args[2];\\n  \\n  PDFDoc *docA = new PDFDoc(new GooString(\"dummy.pdf\"));\\n  int numA = 1;\\n  Page *textPage = new Page(docA, numA);\\n\\n  TextOutputControl *controlA = new TextOutputControl();\\n  TextOutputDev *textOut = new TextOutputDev(NULL, controlA, gFalse);\\n\\n  Gfx gfx(docA, textOut, NULL, NULL, NULL);\\n\\n  args[0].initName((char*)\"testDict\");\\n  args[1].initArray(gfx.getXRef());\\n\\n  int numArgs = stream.ConsumeIntegralInRange<int>(0, 1);\\n\\n  gfx.setExtGState(args, numArgs);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}