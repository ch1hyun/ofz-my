{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <assert.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include \"http_parser.h\"\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0)\\n    return 0;\\n\\n  const uint8_t err = data[0];\\n  if (err >= 0 && err <= HPE_UNKNOWN) {\\n    http_errno_description((enum http_errno) err);\\n  }\\n  \\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <string.h>\\n#include <stddef.h>\\n#include \"http_parser.h\"\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  // Ensure we have enough data to consume\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  // Copy the data into an int\\n  int err;\\n  memcpy(&err, data, sizeof(int));\\n\\n  // Check if err is within the range of http_errno enum\\n  if (err < 0 || err >= HTTP_ERRNO_MAX) {\\n    return 0;\\n  }\\n\\n  // Call the function through typecasting\\n  const char *result = http_errno_description((http_errno)err);\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}