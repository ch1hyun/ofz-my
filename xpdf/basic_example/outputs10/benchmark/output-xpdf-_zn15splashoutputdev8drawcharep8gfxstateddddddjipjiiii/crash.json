{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <splash/SplashFont.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n#include \"GfxState.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GlobalParams.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  static bool initialized = false;\\n  GString fileNameA(\"dummy\");\\n  PDFDoc doc(&fileNameA);\\n  SplashColor color;\\n  color[0] = color[1] = color[2] = 0;\\n  \\n  if (!initialized) {\\n    globalParams = new GlobalParams(\"dummy\");\\n    initialized = true;\\n  }\\n  \\n  SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, color, gTrue);\\n\\n  double dx = provider.ConsumeFloatingPoint<double>();\\n  double dy = provider.ConsumeFloatingPoint<double>();\\n  double originX = provider.ConsumeFloatingPoint<double>();\\n  double originY = provider.ConsumeFloatingPoint<double>();\\n  double tanv = provider.ConsumeFloatingPoint<double>();\\n  double tanc = provider.ConsumeFloatingPoint<double>();\\n  CharCode code = provider.ConsumeIntegral<CharCode>();\\n  int nData = provider.remaining_bytes();\\n  Unicode *unicode = (Unicode *)calloc(nData, sizeof(Unicode));\\n\\n  for (int i = 0; i < nData; i++) {\\n    unicode[i] = provider.ConsumeIntegral<Unicode>();\\n  }\\n\\n  PDFRectangle pageBox;\\n  GfxState state(dx, dy, &pageBox, 0, gFalse);\\n  splashOut.drawChar(&state, originX, originY, dx, dy, originX, originY, code, nData, unicode, nData, gTrue, gTrue, gFalse);\\n                     \\n  free(unicode);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.08",
        "coverage_diff": "0.010743119192502265",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int))\\n    return 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n  \\n  int rotate = stream.ConsumeIntegral<int>();\\n  double x_radius = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double y_radius = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double angle1 = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double angle2 = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  CharCode c = stream.ConsumeIntegral<CharCode>();\\n  Unicode u = stream.ConsumeIntegral<Unicode>();\\n  GBool is_invisible = stream.ConsumeBool();\\n  GBool is_image = stream.ConsumeBool();\\n  GBool is_dot = stream.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n  std::vector<double> matrix(6);\\n  splashOut->getSplash()->setMatrix(matrix.data());\\n  splashOut->drawChar(state, x, y, x_radius, y_radius, angle1, angle2, c, 1, &u, 1, is_invisible, is_image, is_dot);\\n\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams;\\n  delete password;\\n  delete ownerPassword;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}