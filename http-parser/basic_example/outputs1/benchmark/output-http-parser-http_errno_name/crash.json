{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <http_parser.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <stdlib.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  uint8_t val = 0;\\n  if(size > 0)\\n  {\\n    val = data[0];\\n  }\\n\\n  // Check if the value is within the range of http_errno enum\\n  if (val < 0 || val >= _HTTP_ERRNO_H) {\\n    return 0;\\n  }\\n\\n  const char *httpErrorName = http_errno_name((enum http_errno)val);\\n  (void) httpErrorName;\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  if(size < sizeof(int)) return 0;\\n\\n  int http_errno = *((int*)data);\\n  \\n  // Ensure http_errno is within the valid range of http_errno enum values\\n  http_errno = http_errno % (_HTTP_ERRNO_H + 1);\\n\\n  const char *error_name = http_errno_name((enum http_errno)http_errno);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}