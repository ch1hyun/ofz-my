{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include \"libraw.h\"\\n\\nclass FuzzLibRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxLoadDecodeLoop;\\n};\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Create FuzzedDataProvider object\\n  FuzzedDataProvider fuzzedDataProvider(data, size);\\n\\n  // Generate random data\\n  std::vector<uint8_t> randomDataVector = fuzzedDataProvider.ConsumeBytes<uint8_t>(size);\\n  int intval = fuzzedDataProvider.ConsumeIntegral<int>();\\n\\n  // Call the function under test with the generated random data\\n  FuzzLibRaw libRawInstance;\\n  if(randomDataVector.size() > 0 && randomDataVector.size() <= size) {\\n    libRawInstance.crxLoadDecodeLoop(randomDataVector.data(), randomDataVector.size());\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.35",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    void call_crxLoadDecodeLoop(void* p, int arg) {\\n        this->crxLoadDecodeLoop(p, arg);\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  std::vector<uint8_t> first_part = stream.ConsumeBytes<uint8_t>(stream.ConsumeIntegralInRange<uint16_t>(0, size));\\n\\n  void* void_ptr = reinterpret_cast<void*>(first_part.data());\\n  int second_arg = stream.ConsumeIntegral<int>();\\n\\n  if(void_ptr != nullptr){\\n    MyLibRaw libRaw;\\n    libRaw.call_crxLoadDecodeLoop(void_ptr, second_arg);\\n  }\\n  return 0;\\n}",
        "model": ""
    }

    ]
}