{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"GfxFont.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\n// Replace the non-existent GfxFontSubclass.h with GfxFont.h\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < sizeof(unsigned short)) {\\n    return 0;\\n  }\\n\\n  // Initialize FuzzedDataProvider using the fuzzer-provided data.\\n  FuzzedDataProvider fdp(data, size);\\n\\n  // Creating and initializing GfxState object\\n  SplashColor color;\\n  SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, color);\\n  GfxState *state = new GfxState(72, 72, nullptr, 0, gTrue);\\n  \\n  // GfxFont is an abstract class and cannot be instantiated directly. \\n  // We need to create a derived class object and use it instead.\\n  // Replace GfxFontSubclass with GfxFont\\n  GfxFont *font = new GfxFont();\\n  state->setFont(font, 1.0);\\n\\n  // Accessing private member function is not allowed in C++. \\n  // We need to call a public function that eventually calls the private function.\\n  splashOut.updateFont(state);\\n\\n  // Delete the line that calls the private function doUpdateFont\\n  // splashOut.doUpdateFont(state); // DELETE THIS LINE\\n\\n  // Deallocate memory\\n  delete state;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n  splashOut->setNoComposite(gTrue);\\n\\n  // Create the minimal context to call the function: GfxState\\n  PDFRectangle pageBox = {0, 0, 1, 1};\\n  GfxState *state = new GfxState(hdpi, vdpi, &pageBox, rotate, gFalse);\\n    \\n  // Call the doUpdateFont function\\n  splashOut->doUpdateFont(state); // Fixed line\\n\\n  delete splashOut;\\n  delete globalParams;\\n  delete state;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}