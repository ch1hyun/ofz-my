{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "40.13",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1, 3);\\n\\n  std::string name = fdp.ConsumeRandomLengthString();\\n  int64_t refNum = fdp.ConsumeIntegral<int64_t>();\\n  int64_t refGen = fdp.ConsumeIntegral<int64_t>();\\n  \\n  std::vector<Object> args(numArgs);\\n  args[0].initNull();\\n  if(numArgs > 1) {\\n    args[1].initName(name.c_str());\\n  }\\n  if(numArgs > 2) {\\n    args[2].initRef(refNum, refGen);\\n  }\\n\\n  // In order for opSetExtGState to work, the args array should contain Ref type objects that can be found in the PDFDoc catalog.\\n  // In this context it's not possible because the PDFDoc instance cannot be controlled and hence we can't add objects in it's `xref` atrribute.\\n  // Also it's not possible to create a dummy `PDFDoc` because it's constructor is private.\\n\\n  // Gfx gfx(doc.getCatalog(), pdf_out,\\n  //         0, 0, 0, 0, 0, 0,\\n  //         gFalse);\\n  // gfx.opSetExtGState(args, numArgs);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.18",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(0, 10);\\n  Object array;\\n  array.initArray (NULL);\\n\\n  for (int index = 0; index < numArgs; index++) {\\n    Object *obj = new Object();\\n    obj->initNull();\\n    array.arrayAdd (obj);\\n  }\\n\\n  // We can't generate instance of Gfx type in fuzzing harness. Generating an instance of Gfx requires multiple interactions with the library (e.g. a constructed PDFDoc, Catalog and XRef instance). This step might not be achieved in fuzzing harness because it needs correct library internal states.\\n  // Intializing Gfx and calling opSetExtGState require synchronized behavior across multiple library components. So, we can't generate a meaningful test for this function.\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}