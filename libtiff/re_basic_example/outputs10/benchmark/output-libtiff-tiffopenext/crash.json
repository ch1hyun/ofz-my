{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.31",
        "coverage_diff": "0.0013888050238512167",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n\\n#include <tiffio.h>\\n#include <tiffio.hxx>\\n\\nconst std::string mode = \"r\";\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Create a new TIFF\\n  std::string name = stream.ConsumeBytesAsString(size - 1);\\n\\n  // Use TIFFOpen instead of TIFFOpenExt\\n  TIFF* tif = TIFFOpen(name.c_str(), mode.c_str());\\n\\n  if (!tif) {\\n    return 0;\\n  }\\n\\n  TIFFClose(tif);  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Convert Data and Size to appropriate types for TIFFOpenExt parameters\\n    const char *filename = reinterpret_cast<const char *>(Data);\\n    const char *mode = \"r\";\\n\\n    // Call the function\\n    TIFF *tiff = TIFFOpen(filename, mode);\\n\\n    // Do something with tiff...\\n\\n    // Remember to free any allocated memory\\n    TIFFClose(tiff);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}