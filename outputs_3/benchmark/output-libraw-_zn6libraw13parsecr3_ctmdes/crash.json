{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.97",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  LibRaw processor;\\n\\n  // Ensure parameter is not NULL\\n  // Generate a random short value from the fuzzing data\\n  short input = stream.ConsumeIntegral<short>();\\n  \\n  // Call the function-under-test\\n  // The function parseCR3_CTMD does not exist in the LibRaw class\\n  // Replace it with a valid function from the LibRaw class\\n  // For example, if open_buffer is a valid function:\\n  if (size > 0) {\\n    processor.open_buffer(data, size);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(short)) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  LibRaw raw_processor;\\n  short input = fuzzed_data_provider.ConsumeIntegral<short>();\\n  \\n  raw_processor.open_buffer(&input, sizeof(input));\\n  \\n  // Call the function parseCR3 with the input\\n  // Assuming parseCR3_CTMD is a typo and the correct function is parseCR3\\n  raw_processor.parseCR3(input);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}