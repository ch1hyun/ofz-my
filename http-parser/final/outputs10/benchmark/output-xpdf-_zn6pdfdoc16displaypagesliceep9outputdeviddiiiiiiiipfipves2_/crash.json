{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.93",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n\\n  int sliceX = fdp.ConsumeIntegralInRange(1, 99999);\\n  int sliceY = fdp.ConsumeIntegralInRange(1, 99999);\\n  int sliceW = fdp.ConsumeIntegralInRange(1, 99999);\\n  int sliceH = fdp.ConsumeIntegralInRange(1, 99999);\\n\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); \\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(stream);\\n    if (doc->isOk() == gTrue) {\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n      splashOut->setNoComposite(gTrue);\\n      splashOut->startDoc(doc->getXRef());\\n\\n      // Consume displayPageSlice function\\n      doc->displayPageSlice(splashOut, 1, hdpi, vdpi, rotate, useMediaBox, crop, \\n                            printing, sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n\\n      delete splashOut;\\n    }\\n  } catch (...) {\\n  }\\n\\n  if (doc)\\n    delete doc;\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include <stdint.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GlobalParams.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size<1){\\n        return 0;\\n    }\\n    FuzzedDataProvider fdp(data, size);\\n\\n    // Initialize the GlobalParams object\\n    globalParams = new GlobalParams(\"cfgFileName\");\\n\\n    // The document must exist before the OutputDev can.\\n    // It's important to note that the filename does _not_ need to point to a valid or indeed any file\\n    // Create GString from fuzzer data\\n    GString *docString = new GString((char*)data, size);\\n    if (docString->getLength() == 0) {\\n        delete docString;\\n        delete globalParams;\\n        return 0;\\n    }\\n    PDFDoc doc(docString);\\n\\n    SplashColor paperColor;\\n    SplashOutputDev splashOut(splashModeMono8, 1, gFalse, paperColor);\\n    splashOut.startDoc(doc.getXRef());\\n\\n    // PDFDocDisplayPage takes many arguments; too many to usefully fuzz. Set them to constant values instead.\\n    double hDPI = 72.0;\\n    double vDPI = 72.0;\\n    int rotate = 0;\\n    GBool useMediaBox = gFalse;\\n    GBool crop = gFalse;\\n    GBool printing = gFalse;\\n    int sliceX = -1;\\n    int sliceY = -1;\\n    int sliceW = -1;\\n    int sliceH = -1;\\n\\n    // Page number coming from the fuzzer\\n    int pageNum = fdp.ConsumeIntegralInRange<int>(1,100);\\n\\n    // The rest of our function calls don't return useful data, so they can be called all on one line.\\n    doc.displayPageSlice(&splashOut, pageNum, hDPI, vDPI, rotate, useMediaBox, crop,\\n                         printing, sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n\\n    delete globalParams;\\n    delete docString;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}