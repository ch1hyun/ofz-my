{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include \"/src/http-parser/http_parser.c\" // Include this to declare HPE_UNKNOWN and http_errno_name\\n\\nextern const char * http_errno_name(int);\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n  \\n  int http_error = *(int *)data;\\n  if (http_error >= 0 && http_error <= HPE_UNKNOWN) {\\n     http_errno_name(http_error);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno))\\n    return 0;\\n\\n  enum http_errno err;\\n  memcpy(&err, data, sizeof(enum http_errno));\\n\\n  // Ensure err is within valid range\\n  if (err < 0 || err >= _HTTP_ERRNO_MAX)\\n    return 0;\\n\\n  const char * error_Name = http_errno_name(err);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}