{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.54",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n\\nextern \"C\" {\\n#include \"http_parser.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0)\\n    return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Use the first byte of the input data to decide whether to pause or not.\\n  // Check the least significant bit and convert it to bool.\\n  bool pause = data[0] & 1;\\n\\n  // Call the function under test.\\n  http_parser_pause(&parser, pause);\\n\\n  // Feed the parser with the input data.\\n  http_parser_execute(&parser, NULL, reinterpret_cast<const char*>(data + 1), size - 1);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.54",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }  \\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  // Last byte determines if to pause or not\\n  int pause = data[size-1] % 2;\\n  http_parser_pause(&parser, pause);\\n\\n  // Strip the last byte off before passing to http_parser_execute\\n  http_parser_execute(&parser, NULL, (const char*)data, size - 1);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}