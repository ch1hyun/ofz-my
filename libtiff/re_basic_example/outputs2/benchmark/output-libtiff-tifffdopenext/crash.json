{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.61",
        "coverage_diff": "0.002153654167421452",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n#include <tiffio.h>\\n\\n#define MAX_FILE_SIZE 0xFFFFFF\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size > MAX_FILE_SIZE || size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  std::string fileName = stream.ConsumeRandomLengthString(10);\\n\\n  // Use TIFFOpen instead of TIFFFdOpenExt\\n  TIFF *out = TIFFOpen(fileName.c_str(), \"w\");\\n\\n  if (out) {\\n    TIFFClose(out);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstring>\\n#include <tiffio.h>\\n#include <vector>\\n#include <array>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1)\\n    return 0;\\n  FuzzedDataProvider stream(data, size);\\n  const std::array<const char*, 7> tiff_open_modes = {\"r\", \"w\", \"a\", \"+\", \"b\", \"m\", \"u\"};\\n  const std::string name = stream.ConsumeRandomLengthString();\\n  const char* mode = stream.PickValueInArray(tiff_open_modes);\\n  int fd = fileno(tmpfile());\\n  \\n  // Use TIFFFdOpen instead of TIFFFdOpenExt\\n  TIFF *tiff = TIFFFdOpen(fd, name.c_str(), mode);\\n  if (tiff == nullptr) {\\n    return 0;\\n  }\\n  \\n  TIFFClose(tiff);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}