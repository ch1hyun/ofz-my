{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  \\n  class MyOutputDev : public OutputDev {\\n  public:\\n    virtual GBool upsideDown() { return gFalse; }\\n    virtual GBool useDrawChar() { return gTrue; }\\n    virtual GBool interpretType3Chars() { return gFalse; }\\n  };\\n  MyOutputDev * outputDev = new MyOutputDev();\\n\\n  int firstPage = 1;\\n  int lastPage = 1;\\n  double hDPI = 72.0;\\n  double vDPI = 72.0;\\n  int rotate = 0;\\n  GBool useMediaBox = gFalse;\\n  GBool crop = gTrue;\\n  GBool printing = gFalse;\\n\\n  // Fix the error by changing the return type of the function pointer to GBool\\n  GBool (*abortCheckCbk)(void*) = [](void*) -> GBool { return gFalse; };\\n  void * abortCheckCbkData = nullptr;\\n\\n  GString *fileName = new GString(reinterpret_cast<const char*>(data), size);\\n  PDFDoc doc(fileName);\\n\\n  doc.displayPages(outputDev, firstPage, lastPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, abortCheckCbk, abortCheckCbkData);\\n  \\n  delete outputDev;\\n  delete fileName;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n\\n#include <PDFDoc.h>\\n#include <SplashOutputDev.h>\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  \\n  // Initialize PDFDoc and OutputDev objects\\n  GString fileName(\"fuzzed.pdf\");\\n  PDFDoc pdf_doc(&fileName);\\n  SplashColor paperColor;\\n  SplashOutputDev splashOutDev(splashModeBGR8, 4, gFalse, paperColor);\\n\\n  // Generate random parameters for displayPages function\\n  int first_page = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int last_page = fuzzed_data_provider.ConsumeIntegral<int>();\\n  double h_dpi = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double v_dpi = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data_provider.ConsumeBool();\\n  GBool crop = fuzzed_data_provider.ConsumeBool();\\n  GBool printing = fuzzed_data_provider.ConsumeBool();\\n  GBool (*infinite_loop)(void *) = nullptr;\\n  void *void_ptr = nullptr;\\n\\n  // Call the target function\\n  pdf_doc.displayPages(&splashOutDev, first_page, last_page, h_dpi, v_dpi, rotate, useMediaBox, crop, printing, infinite_loop, void_ptr);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}