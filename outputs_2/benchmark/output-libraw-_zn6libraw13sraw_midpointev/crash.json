{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.17",
        "coverage_diff": "0.0005143893656766928",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  LibRaw raw_processor;\\n  \\n  raw_processor.imgdata.params.use_camera_wb = stream.ConsumeBool();\\n  raw_processor.imgdata.params.output_bps = stream.ConsumeIntegral<int>();\\n  raw_processor.imgdata.params.no_auto_bright = stream.ConsumeBool();\\n\\n  raw_processor.open_buffer((void*)data, size);\\n  raw_processor.unpack();\\n  raw_processor.dcraw_process();\\n\\n  int result = raw_processor.sraw_midpoint();\\n\\n  raw_processor.recycle();\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.71",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Ensure data is correctly provided\\n  if (!data || !size) return 0; \\n  \\n  // Create a FuzzedDataProvider instance\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  \\n  // Create and initialise a object of LibRaw class\\n  LibRaw imgdata;\\n  \\n  // Feed the data to LibRaw\\n  imgdata.open_buffer((void*)data, size);\\n  \\n  // Call the function under test\\n  int ret = imgdata.sraw_midpoint();\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}