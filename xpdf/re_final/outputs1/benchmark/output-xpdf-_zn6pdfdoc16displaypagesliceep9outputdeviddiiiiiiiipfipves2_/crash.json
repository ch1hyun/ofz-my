{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    virtual GBool upsideDown() { return gFalse; }\\n    virtual GBool useDrawChar() { return gTrue; }\\n    virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nGBool abortCheckCbk(void *data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Initialize necessary parameters for displayPageSlice\\n    MyOutputDev *output_dev = new MyOutputDev();\\n    int page = fuzzed_data.ConsumeIntegral<int>();\\n    double h_dpi = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double v_dpi = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int rotate = fuzzed_data.ConsumeIntegral<int>();\\n    bool useMediaBox = fuzzed_data.ConsumeBool();\\n    bool crop = fuzzed_data.ConsumeBool();\\n    bool printing = fuzzed_data.ConsumeBool();\\n    int sliceX = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceY = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceW = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceH = fuzzed_data.ConsumeIntegral<int>();\\n    void *loop = nullptr;\\n    void *sliceA = nullptr;\\n\\n    // Create a PDFDoc instance and call displayPageSlice\\n    GString *fileName = new GString(\"dummy\");\\n    PDFDoc doc(fileName);\\n    doc.displayPageSlice(output_dev, page, h_dpi, v_dpi, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, sliceA);\\n\\n    delete output_dev;\\n    delete fileName;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include <OutputDev.h>\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  virtual GBool upsideDown() { return gFalse; }\\n  virtual GBool useDrawChar() { return gTrue; }\\n  virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nGBool abortCheckCbk(void *data) {\\n  return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size < 1) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data(Data, Size);\\n  \\n  // Initialize the PDFDoc object and other parameters required by the function\\n  GString fileName(\"fuzzed.pdf\");\\n  PDFDoc pdf_doc(&fileName);\\n  MyOutputDev output_dev;\\n  int pageNum = 1;\\n  double hDPI = 72.0;\\n  double vDPI = 72.0;\\n  int rotate = 0;\\n  bool useMediaBox = false;\\n  bool crop = true;\\n  bool printing = false;\\n  int sliceX = -1;\\n  int sliceY = -1;\\n  int sliceW = -1;\\n  int sliceH = -1;\\n\\n  // Call the function under test\\n  pdf_doc.displayPageSlice(&output_dev, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}