{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  CharCode code = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = stream.ConsumeIntegralInRange<int>(1, 10);\\n  Unicode u = stream.ConsumeIntegral<Unicode>();\\n  int uLen = stream.ConsumeIntegralInRange<int>(1, 10);\\n  GBool v = stream.ConsumeBool();\\n  GBool h = stream.ConsumeBool();\\n  GBool g = stream.ConsumeBool();\\n\\n  const int32_t rotate = 0;\\n  const bool useMediaBox = true;\\n  const bool crop = false;\\n  const bool printing = false;\\n\\n  // Setup GlobalParams\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n  globalParams->setupBaseFonts(\"/usr/share/ghostscript/9.25/Resource/cidfmap\");\\n\\n  // Load PDFdoc\\n  GString *filename = new GString(\"dummy.pdf\");\\n  PDFDoc *doc = new PDFDoc(filename);\\n\\n  // Check if the document is valid\\n  if (!doc->isOk()) {\\n    delete doc;\\n    delete globalParams;\\n    delete filename;\\n    return 0;\\n  }\\n\\n  //Create Bitmap\\n  SplashColor paperColor = { 0xff, 0xff, 0xff };\\n  const int bitmapRowPad = 4; \\n\\n  // Create SplashOutputDev and GfxState\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor); \\n  GfxState *state = new GfxState(72, 72, doc->getCatalog()->getPage(1)->getMediaBox(), rotate, gFalse);\\n\\n  // Call the function under test\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, &u, uLen, v, h, g);\\n\\n  // Cleanup\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete globalParams;\\n  delete filename;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"GString.h\"\\n#include \"CharTypes.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int the_n = fdp.ConsumeIntegral<int>();\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  int uLen = fdp.ConsumeIntegral<int>();\\n  GBool clipped = fdp.ConsumeBool();\\n  GBool fi = fdp.ConsumeBool();\\n  GBool ri = fdp.ConsumeBool();\\n\\n  // Create global params for xpdf\\n  GString *fileName = new GString();\\n  GlobalParams *globalParams = new GlobalParams(fileName->getCString());\\n  delete fileName;\\n\\n  // Create a splash output device\\n  SplashColor splashColor;\\n  splashColor[0] = splashColor[1] = splashColor[2] = splashColor[3] = 0;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, splashColor);\\n\\n  // Create PDFDoc, SplashOutputInit & GfxState\\n  GString *docName = new GString();\\n  GString *password = new GString();\\n  PDFDoc *doc = new PDFDoc(docName, password);\\n  delete docName;\\n  delete password;\\n  \\n  splashOut->startDoc(doc->getXRef());\\n\\n  // Create GfxState\\n  GfxState *state = new GfxState(72, 72, NULL, 0, gFalse);\\n\\n  // Call the target function\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, the_n, &u, uLen, clipped, fi, ri);\\n\\n  // Clean up\\n  delete state;\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams;  // Moved this line from above\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}