{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\" \\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFRectangle.h\" // Include the PDFRectangle.h\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(double) * 6 + sizeof(CharCode) + sizeof(int) + sizeof(Unicode) + sizeof(int) + sizeof(GBool) * 3) {\\n        return 0;\\n    }\\n    FuzzedDataProvider fuzzedDataProvider(data, size);\\n    double dx = fuzzedDataProvider.ConsumeFloatingPoint<double>();\\n    double dy = fuzzedDataProvider.ConsumeFloatingPoint<double>();\\n    double originX = fuzzedDataProvider.ConsumeFloatingPoint<double>();\\n    double originY = fuzzedDataProvider.ConsumeFloatingPoint<double>();\\n    double tOriginX = fuzzedDataProvider.ConsumeFloatingPoint<double>();\\n    double tOriginY = fuzzedDataProvider.ConsumeFloatingPoint<double>();\\n    CharCode charCode = fuzzedDataProvider.ConsumeIntegral<CharCode>();\\n    int charLen = fuzzedDataProvider.ConsumeIntegral<int>();\\n    Unicode *unicode = new Unicode[charLen];\\n    for (int i = 0; i < charLen; i++) {\\n        unicode[i] = fuzzedDataProvider.ConsumeIntegral<Unicode>();\\n    }\\n    int unicodeLen = fuzzedDataProvider.ConsumeIntegral<int>();\\n    GBool gfree = fuzzedDataProvider.ConsumeBool();\\n    GBool gfill = fuzzedDataProvider.ConsumeBool();\\n    GBool gstroke = fuzzedDataProvider.ConsumeBool();\\n    \\n    PDFRectangle pdfRectangle;\\n    GfxState *state = new GfxState(72.0, 72.0, &pdfRectangle, 0, gTrue);\\n    SplashColor splashColor;\\n    SplashOutputDev *outputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, splashColor);\\n    \\n    outputDev->drawChar(state, dx, dy, originX, originY, tOriginX, tOriginY, charCode, charLen, unicode, unicodeLen, gfree, gfill, gstroke);\\n\\n    delete[] unicode;\\n    delete outputDev;\\n    delete state;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 10) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  GfxState *state;\\n  double x, y, dx, dy, originX, originY;\\n  CharCode code;\\n  int nBytes;\\n  Unicode *u;\\n  int uLen;\\n  GBool charExists;\\n  GBool charStroke;\\n  GBool charFill;\\n  \\n  // Initialize variables with fuzzed data\\n  // This is a simplistic example, you may need to adjust this part based on the actual data types and constraints\\n  x = fuzzed_data.ConsumeFloatingPoint<double>();\\n  y = fuzzed_data.ConsumeFloatingPoint<double>();\\n  dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n  dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n  originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  code = fuzzed_data.ConsumeIntegral<CharCode>();\\n  nBytes = fuzzed_data.ConsumeIntegral<int>();\\n  uLen = fuzzed_data.ConsumeIntegral<int>();\\n  u = new Unicode[uLen];\\n  for (int i = 0; i < uLen; i++) {\\n    u[i] = fuzzed_data.ConsumeIntegral<Unicode>();\\n  }\\n  charExists = fuzzed_data.ConsumeBool();\\n  charStroke = fuzzed_data.ConsumeBool();\\n  charFill = fuzzed_data.ConsumeBool();\\n\\n  SplashColorMode colorMode = static_cast<SplashColorMode>(fuzzed_data.ConsumeIntegral<int>() % 5);\\n  int bitmapRowPad = fuzzed_data.ConsumeIntegral<int>();\\n  GBool reverseVideo = fuzzed_data.ConsumeBool();\\n  SplashColorPtr paperColor = nullptr;\\n  GBool bitmapTopDown = fuzzed_data.ConsumeBool();\\n  GBool allowAntialias = fuzzed_data.ConsumeBool();\\n  SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n\\n  splashOutputDev.drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, charExists, charStroke, charFill);\\n\\n  delete[] u;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}