{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "20.48",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  if(size < 1) {\\n    return 0;\\n  }\\n\\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_init(parser, HTTP_BOTH);\\n\\n  http_parser_settings settings;\\n  http_parser_settings_init(&settings);\\n\\n  settings.on_message_begin = 0;\\n  settings.on_header_field = 0;\\n  settings.on_header_value = 0;\\n  settings.on_url = 0;\\n  settings.on_status = 0;\\n  settings.on_body = 0;\\n  settings.on_headers_complete = 0;\\n  settings.on_message_complete = 0;\\n  \\n  http_parser_execute(parser, &settings, (const char *)data, size);\\n\\n  const char * errno_description = http_errno_description((enum http_errno)parser->http_errno);\\n\\n  free(parser);\\n\\n  return 0;\\n}\\n\\nint on_message_begin(http_parser* _) {\\n  return 0;\\n}\\n\\nint on_header_field(http_parser* _, const char *at, size_t length) {\\n  return 0;\\n}\\n\\nint on_header_value(http_parser* _, const char *at, size_t length) {\\n  return 0;\\n}\\n\\nint on_url(http_parser* _, const char *at, size_t length) {\\n  return 0;\\n}\\n\\nint on_status(http_parser* _, const char *at, size_t length) {\\n  return 0;\\n}\\n\\nint on_body(http_parser* _, const char *at, size_t length) {\\n  return 0;\\n}\\n\\nint on_headers_complete(http_parser* _) {\\n  return 0;\\n}\\n\\nint on_message_complete(http_parser* _) {\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "27.92",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nconst int max_valid_http_errno = HPE_PAUSED;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_REQUEST);\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char*)data, size);\\n\\n  if (parser.http_errno != HPE_OK) {\\n    const char* description = http_errno_description((enum http_errno)parser.http_errno);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}