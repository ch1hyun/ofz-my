{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Replaced the non-existent PDFRectangle.h with PDFDoc.h\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    char* passBuffer = new char[64];\\n    passBuffer = const_cast<char*>(stream.ConsumeBytesAsString(64).c_str());\\n\\n    SplashOutputDev splashOutputDev(splashModeMono1, 1, gFalse, nullptr, gTrue, gFalse);\\n\\n    PDFDoc pageBox; // Changed the type from PDFRectangle to PDFDoc\\n    GfxState gfxState(72.0, 72.0, &pageBox, 0, gTrue);\\n    gfxState.setCTM(1, 0, 0, 1, 0, 0);\\n\\n    splashOutputDev.updateFont(&gfxState);\\n    // Removed the line calling the private function doUpdateFont\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxMatrix.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashBitmap.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  SplashColor sColor;\\n  SplashOutputDev splashOutputDev(splashModeRGB8, 4, gFalse, sColor);\\n  \\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Create the object to pass into the function.\\n  double m11 = stream.ConsumeFloatingPoint<double>();\\n  double m12 = stream.ConsumeFloatingPoint<double>();\\n  double m21 = stream.ConsumeFloatingPoint<double>();\\n  double m22 = stream.ConsumeFloatingPoint<double>();\\n  double m31 = stream.ConsumeFloatingPoint<double>();\\n  double m32 = stream.ConsumeFloatingPoint<double>();\\n  double splashMatrix[6] = {m11, m12, m21, m22, m31, m32};\\n  \\n  std::vector<uint8_t> system = stream.ConsumeBytes<uint8_t>(12);\\n  std::vector<uint8_t> user = stream.ConsumeBytes<uint8_t>(12);\\n  \\n  GfxMatrix gfxMatrix(m11, m12, m21, m22, m31, m32);\\n  XRef* xref = nullptr;\\n\\n  // Call the function under test.\\n  GfxState gfxState(72.0, &gfxMatrix, &gfxMatrix, system.data(), user.data(), xref);\\n  splashOutputDev.doUpdateFont(&gfxState);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}