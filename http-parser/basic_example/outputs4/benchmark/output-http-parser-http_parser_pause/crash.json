{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "34.25",
        "coverage_diff": "0.006918238993710692",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Declare settings\\nhttp_parser_settings settings;\\n\\n// Fuzzing function\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Initialize settings\\n  http_parser_settings_init(&settings);\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  if(size > 0) {\\n    int pause = data[0] % 2;\\n    http_parser_pause(&parser, pause);\\n    http_parser_execute(&parser, &settings, (const char *)data, size); // Feed the data to the function under test\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.21",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (!size) return 0;\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n\\n  // Add this line to ensure the function under test is called with non-null input\\n  size_t parsed = http_parser_execute(&parser, &settings, (const char *)data, size);\\n\\n  if (parsed > 0) {\\n    http_parser_pause(&parser, *data % 2);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}