{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <iostream>\\n#include <vector>\\n\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Zoox.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 30) {\\n    return 0;\\n  }\\n  FuzzedDataProvider fdp(data, size);\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  std::string s = fdp.ConsumeRemainingBytesAsString();\\n  int nBytes = s.size();\\n  GBool adjust = gFalse;\\n  GBool fill = gTrue;\\n  GBool stroke = gFalse;\\n  \\n  SplashColor paperColor;\\n  paperColor[0] = 255; // white color\\n  paperColor[1] = 255;\\n  paperColor[2] = 255;\\n\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n  \\n  XRef *xref = new XRef(); // create a new XRef object\\n  splashOut->startDoc(xref); // pass the XRef object to startDoc\\n\\n  Unicode *unicode = new Unicode[nBytes];\\n  for (int i = 0; i < nBytes; i++) {\\n    unicode[i] = s[i];\\n  }\\n\\n  splashOut->drawChar(NULL, x, y, dx, dy, originX, originY,\\n                      code, nBytes, unicode, nBytes, adjust, fill, stroke);\\n  \\n  delete splashOut;\\n  delete xref;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <xpdf/GfxState.h>\\n#include <xpdf/GBool.h>\\n#include <xpdf/SplashOutputDev.h>\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Initialize the necessary variables for drawChar\\n    GfxState *state;\\n    double x, y, dx, dy, originX, originY;\\n    CharCode code;\\n    int nBytes;\\n    Unicode *u;\\n    int uLen;\\n    GBool charExists;\\n    GBool charHasDiacritic;\\n    GBool charHasAccent;\\n\\n    // Call the function\\n    SplashOutputDev::drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, charExists, charHasDiacritic, charHasAccent);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}