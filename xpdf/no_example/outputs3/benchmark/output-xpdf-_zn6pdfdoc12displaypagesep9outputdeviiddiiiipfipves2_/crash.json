{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "Without the initial code, it's impossible to provide a solution. Please provide the initial code to proceed.",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDocFactory.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(size<3) {\\n        return 0;\\n    }\\n    PDFDoc *doc = PDFDocFactory().createPDFDoc(*data, size, nullptr, nullptr);\\n    if (!doc->isOk()) {\\n        delete doc;\\n        return 0;\\n    }\\n    SplashColor paperColor;\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n    doc->displayPages(splashOut, 1, 1, 72, 72, 0, gTrue, gFalse, gFalse, nullptr, nullptr);\\n    delete splashOut;\\n    delete doc;\\n    return 0;\\n}",
        "model": ""
    }

    ]
}