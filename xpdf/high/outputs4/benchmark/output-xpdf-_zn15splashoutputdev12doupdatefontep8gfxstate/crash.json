{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"PDFDoc.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"PDFDocEncoding.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"Page.h\"\\n#include \"BuiltinFontTables.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashState.h\"\\n#include \"SplashPath.h\"\\n#include \"SplashFontFile.h\"\\n#include \"SplashFontEngine.h\"\\n#include \"SplashFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  // define the required variables for the setup\\n  Object obj;\\n  obj.initNull();\\n  PDFRectangle box(0.0, 0.0, 100.0, 100.0);\\n  GString *fileName = new GString(\"square\");\\n  BaseStream *str = new MemStream(fileName->getCString(), 0, fileName->getLength(), &obj);\\n  XRef *xref = new XRef(str, gFalse);\\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL, xref); // Fixed: pass str and xref to PDFDoc constructor\\n  Dict *resDict = new Dict(xref);\\n  BaseStream *strBuiltin = new MemStream(fileName->getCString(), 0, fileName->getLength(), &obj);\\n  XRef *xrefBuiltin = new XRef(strBuiltin, gFalse);\\n  BuiltinFont *font;\\n  GfxFont *gfxFont;\\n\\n  // Create a new SplashOutputDev object and initialize it\\n  SplashColor paperColor = {255, 255, 255}; // white paper color\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n\\n  // define the required variables for the test\\n  double uMap[256];\\n\\n  GfxState *state = new GfxState(72.0, 72.0, &box, 0, gFalse);\\n  PDFRectangle *bbox = new PDFRectangle(0, 0, 10, 10);\\n  GString *name_builtin = new GString(\"Times-Roman\");\\n\\n  // Call the target function SplashOutputDev::doUpdateFont(GfxState *)\\n  splashOut->updateFont(state);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"XRef.h\"\\n#include \"Annot.h\"\\n#include \"Catalog.h\"\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Initialize globalParams\\n  std::string pdf_param_data = stream.ConsumeRandomLengthString(10);\\n  globalParams = new GlobalParams(pdf_param_data.c_str());\\n\\n  // Initialize the SplashBitmap instance\\n  const int width = stream.ConsumeIntegral<int>();\\n  const int height = stream.ConsumeIntegral<int>();\\n  const SplashColorMode color_mode = static_cast<SplashColorMode>(stream.ConsumeIntegralInRange<int>(0, 4));\\n  const int bitmap_row_align = stream.ConsumeIntegral<int>();\\n  const GBool alpha = static_cast<GBool>(stream.ConsumeBool());\\n  const GBool topDown = static_cast<GBool>(stream.ConsumeBool());\\n  SplashBitmap *parentA = nullptr;\\n  const SplashColor splash_color = {1, 2, 3, 4};\\n\\n  SplashBitmap bitmap(width, height, bitmap_row_align, color_mode, alpha, topDown, parentA);\\n\\n  // Initialize the SplashOutputDev instance\\n  SplashColorPtr paperColorA = splash_color;\\n  GBool reverseVideoA = static_cast<GBool>(stream.ConsumeBool());\\n  SplashOutputDev splash_dev(color_mode, bitmap_row_align, reverseVideoA, paperColorA);\\n  splash_dev.startDoc(nullptr);\\n\\n  // Initialize the GfxState instance\\n  const double hsize = stream.ConsumeFloatingPoint<double>();\\n  const double vsize = stream.ConsumeFloatingPoint<double>();\\n  const int rotate = stream.ConsumeIntegral<int>();\\n  const GBool upside_down = static_cast<GBool>(stream.ConsumeBool());\\n  PDFRectangle box = {0, 0, 800, 600};\\n\\n  GfxState state(hsize, vsize, &box, rotate, upside_down);\\n\\n  // Call the function under test\\n  splash_dev.doUpdateFont(&state);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}