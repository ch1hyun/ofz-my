{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "6.74",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern const char * http_status_str(enum http_status);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size != sizeof(uint32_t)) {\\n    return 0;\\n  }\\n\\n  // Extract enumeration from first 4 bytes of input data and cast to enum http_status\\n  uint32_t enum_val = *(uint32_t *)data;\\n  enum http_status status = (enum http_status)(enum_val % (HTTP_STATUS_INSUFFICIENT_STORAGE + 1));\\n\\n  http_status_str(status);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.07",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_status))\\n    return 0;\\n\\n  enum http_status http_status;\\n  memcpy(&http_status, data, sizeof(enum http_status));\\n\\n  const char *status_str = http_status_str(http_status);\\n  if(status_str) {\\n    // Do Nothing, just ensure status_str is used to stop warnings\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}