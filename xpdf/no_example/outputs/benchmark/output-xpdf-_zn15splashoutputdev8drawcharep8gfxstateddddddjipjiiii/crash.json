{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <xpdf/Object.h>\\n#include <xpdf/Dict.h>\\n#include <xpdf/GfxState.h>\\n#include <xpdf/SplashOutputDev.h>\\n#include <xpdf/FoFiTrueType.h>\\n#include <xpdf/FoFiType1C.h>\\n#include <xpdf/FoFiType1.h>\\n#include <xpdf/FoFiIdentifier.h>\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  double hDPIA = stream.ConsumeFloatingPoint<double>();\\n  double vDPIA = stream.ConsumeFloatingPoint<double>();\\n  PDFRectangle pageBox;\\n  int rotateA = stream.ConsumeIntegral<int>();\\n  GBool upsideDown = stream.ConsumeBool();\\n  GfxState gfx_state(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n  \\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n  \\n  CharCode code = stream.ConsumeIntegral<CharCode>();\\n  \\n  int nBytes = stream.ConsumeIntegral<int>();\\n  \\n  Unicode unicode;\\n\\n  int uLen = stream.ConsumeIntegral<int>();\\n  \\n  GBool reverse = stream.ConsumeBool();\\n  GBool seac = stream.ConsumeBool();\\n  GBool embolden = stream.ConsumeBool();\\n\\n  int colorModeA = stream.ConsumeIntegral<int>();\\n  int bitmapRowPadA = stream.ConsumeIntegral<int>();\\n  GBool reverseVideoA = stream.ConsumeBool();\\n  SplashColorPtr paperColorA;\\n  GBool bitmapTopDownA = stream.ConsumeBool();\\n  GBool allowAntialiasA = stream.ConsumeBool();\\n  SplashOutputDev splashOutputDev((SplashColorMode)colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n\\n  splashOutputDev.drawChar(&gfx_state, x, y, dx, dy, originX, originY, code, nBytes, &unicode, uLen, reverse, seac, embolden);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <memory>\\n#include <fuzzing/datasource/datasource.h>\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeTypeTable.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    fuzzing::datasource::Datasource fuzzed_data_provider(data, size);\\n\\n    // Initialize globalParams\\n    globalParams = std::unique_ptr<GlobalParams>(new GlobalParams());\\n\\n    // Creating instance of SplashOutputDev\\n    SplashColorMode colorMode = splashModeRGB8; // pregiven parameter\\n    int bitmapRowPad = 4; // pregiven parameter\\n    GBool reverseVideo = gFalse; // pregiven parameter\\n    SplashColor paperColor[4] = {0, 0, 0, 0}; // New color\\n    GBool bitmapTopDown = gTrue; // pregiven parameter\\n    GBool allowAntialias = gTrue; // pregiven parameter\\n    SplashOutputDev splashOutputDev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n\\n    // Create necessary components to fuzz drawChar method\\n    PDFRectangle pageBox;\\n    GfxState gfxState(72.0, 72.0, &pageBox, 0, gTrue);\\n\\n    double dx = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double dy = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double originX = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double originY = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double tOriginX = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double tOriginY = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    \\n    CharCode charCode = fuzzed_data_provider.ConsumeIntegral<CharCode>();\\n    int nBytes = fuzzed_data_provider.ConsumeIntegral<int>();\\n    \\n    int n = fuzzed_data_provider.ConsumeIntegralInRange(1, 65535);\\n    Unicode *u = new Unicode[n];\\n    for (int i = 0; i < n; i++) {\\n        u[i] = fuzzed_data_provider.ConsumeIntegral<Unicode>();\\n    }\\n    \\n    GBool dRight = fuzzed_data_provider.ConsumeBool();\\n    GBool dTop = fuzzed_data_provider.ConsumeBool();\\n    GBool clipped = fuzzed_data_provider.ConsumeBool();\\n\\n    // Call drawChar() method that we are fuzzing\\n    splashOutputDev.drawChar(&gfxState, dx, dy, originX, originY, tOriginX, tOriginY, charCode, nBytes, u, n, dRight, dTop, clipped);\\n\\n    delete[] u;\\n\\n    return 0; \\n}",
        "model": ""
    }

    ]
}