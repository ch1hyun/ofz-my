{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  int publicCrxDecodePlane(void *p, uint32_t s) {\\n    if (p == nullptr || s == 0) {\\n      return -1;\\n    }\\n    return crxDecodePlane(p, s);\\n  }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 5)\\n    return 0;\\n  FuzzedDataProvider stream(data, size);\\n  const size_t output_size = stream.ConsumeIntegral<uint32_t>();\\n  void *output = malloc(output_size + 1);\\n  if (!output)\\n    return 0;\\n  \\n  std::vector<uint8_t> input = stream.ConsumeRemainingBytes<uint8_t>();\\n  MyLibRaw RawProcessor;\\n  int ret = RawProcessor.open_buffer(input.data(), input.size());\\n\\n  if (ret != 0) {\\n    free(output);\\n    return 0;\\n  }\\n\\n  // Call the required function\\n  ret = RawProcessor.publicCrxDecodePlane(output, output_size);\\n\\n  free(output);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.25",
        "coverage_diff": "0.00016243874705579772",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <stdint.h>\\n#include <cstddef>\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  int publicCrxDecodePlane(void *p, uint32_t planeNumber) {\\n    return crxDecodePlane(p, planeNumber);\\n  }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 4) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider stream(data, size);\\n  \\n  MyLibRaw RawProcessor;\\n\\n  const size_t kOutputSize = 64;\\n  uint8_t output[kOutputSize] = {0};\\n  const uint32_t planeCode = stream.ConsumeIntegral<uint32_t>();\\n\\n  // Invoke the function-under-test\\n  if (size > 4) {\\n    RawProcessor.publicCrxDecodePlane(output, planeCode);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}