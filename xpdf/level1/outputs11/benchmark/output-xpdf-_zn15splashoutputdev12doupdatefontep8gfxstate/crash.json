{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "PROJECT",
        "coverage": "0.74",
        "coverage_diff": "0.005129191511188049",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    printf(\"Hello World!\\\n\");\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    double hdpi = stream.ConsumeFloatingPoint<double>();\\n    double vdpi = stream.ConsumeFloatingPoint<double>();\\n    int rotate = stream.ConsumeIntegralInRange<int>(0, 360);\\n\\n    globalParams = new GlobalParams(NULL);\\n    globalParams->setupBaseFonts(NULL);\\n\\n    GString *password = new GString(\"password\");\\n    GString *ownerPassword = new GString(\"ownerPassword\");\\n    PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n    PDFRectangle pageBox;\\n    GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n\\n    SplashColor paperColor = {0, 0, 0, 0};\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n    \\n    // Since 'doUpdateFont' is a private member of 'SplashOutputDev', we can't directly call it.\\n    // We can try to call a public method that internally uses 'doUpdateFont'.\\n    splashOut->drawChar(state, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\\n\\n    delete splashOut;\\n    delete doc;\\n    delete globalParams;\\n    delete password;\\n    delete ownerPassword;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <iostream>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    std::cout << \"Hello World!\\\n\";\\n    if (size < sizeof(int))\\n        return 0;\\n\\n    FuzzedDataProvider stream(data, size);\\n    \\n    int rotate = stream.ConsumeIntegral<int>();\\n    double x_radius = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n    double y_radius = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n    double angle1 = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n    double angle2 = stream.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    CharCode c = stream.ConsumeIntegral<CharCode>();\\n    Unicode u = stream.ConsumeIntegral<Unicode>();\\n    GBool is_invisible = stream.ConsumeBool();\\n    GBool is_image = stream.ConsumeBool();\\n    GBool is_dot = stream.ConsumeBool();\\n\\n    GlobalParams *globalParams = new GlobalParams(NULL);\\n    globalParams->setupBaseFonts(NULL);\\n\\n    GString *password = new GString(\"password\");\\n    GString *ownerPassword = new GString(\"ownerPassword\");\\n    PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n    PDFRectangle pageBox;\\n    GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n    \\n    SplashColor paperColor = {0, 0, 0, 0};\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, 0, 0, 0, 0);\\n    splashOut->startDoc(doc->getXRef());\\n    std::vector<double> matrix(6);\\n    splashOut->getSplash()->setMatrix(matrix.data());\\n\\n    // Utilize public methods of SplashOutputDev to interact with the object\\n    splashOut->startPage(1, state);\\n    splashOut->updateFont(state);\\n    splashOut->SplashOutputDev::doUpdateFont(state); // Access private function using scope resolution operator\\n\\n    delete splashOut;\\n    delete doc;\\n    delete globalParams;\\n    delete password;\\n    delete ownerPassword;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}