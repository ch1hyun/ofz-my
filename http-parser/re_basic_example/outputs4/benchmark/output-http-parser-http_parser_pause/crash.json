{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.99",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <cstdint>\\n#include <stdlib.h>\\n#include <cstring>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  \\n  // use a data provider to consume fuzzed data\\n  FuzzedDataProvider data_provider(data, size);\\n  \\n  // initialize a new http parser\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  // get a byte from the data to use for the pause parameter\\n  int pause = data_provider.ConsumeIntegral<uint8_t>();\\n  // normalize to a value of 0 or 1\\n  pause = pause % 2;\\n\\n  // perform the pause operation\\n  http_parser_pause(&parser, pause);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "23.09",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <fcntl.h>\\n#include <sys/stat.h>\\n\\nstatic const http_parser_settings settings_null = { \\n    .on_message_begin = 0,\\n    .on_header_field = 0,\\n    .on_header_value = 0,\\n    .on_url = 0,\\n    .on_status = 0,\\n    .on_body = 0,\\n    .on_headers_complete = 0,\\n    .on_message_complete = 0,\\n    .on_chunk_header = 0,\\n    .on_chunk_complete = 0\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_REQUEST);\\n  http_parser_execute(&parser, &settings_null, (char *)data, size);\\n  // Removed the call to http_parser_pause\\n  return 0;\\n}",
        "model": ""
    }

    ]
}