{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdlib.h>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  int num = fuzzed_data.ConsumeIntegral<int>();\\n  std::vector<uint8_t> buffer = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n  if (buffer.empty()) {\\n    return 0;\\n  }\\n\\n  MyLibRaw rawProcessor;\\n  rawProcessor.crxLoadDecodeLoop(buffer.data(), num);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.29",
        "coverage_diff": "0.0002978043696022958",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size <= sizeof(int)) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  const int num = stream.ConsumeIntegral<int>();\\n\\n  LibRaw libRaw;\\n  libRaw.unpack(); // use public method to load and decode the image\\n  libRaw.raw2image(); // convert raw data to image\\n\\n  // Call the function crxLoadDecodeLoop\\n  // As 'crxLoadDecodeLoop' is a protected member of 'LibRaw', it cannot be accessed directly.\\n  // We need to create a derived class and use it to access the protected member.\\n  class DerivedLibRaw : public LibRaw {\\n  public:\\n    void publicCrxLoadDecodeLoop(void* ptr, int num) {\\n      this->crxLoadDecodeLoop(ptr, num);\\n    }\\n  };\\n\\n  DerivedLibRaw derivedLibRaw;\\n  void* ptr = static_cast<void*>(const_cast<uint8_t*>(data));\\n  derivedLibRaw.publicCrxLoadDecodeLoop(ptr, num);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}