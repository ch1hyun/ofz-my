{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <string.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    TIFF *tif;\\n    char *mode = \"r\";\\n    char name[256] = \"/tmp/libtiff-test-XXXXXX\";\\n    if (size > 32 * 1024) {\\n        return 0;\\n    }\\n    // write to file\\n    int fd = mkstemp(name);\\n    if (fd == -1) {\\n        return 0;\\n    }\\n    if (write(fd, data, size) == -1) {\\n        close(fd);\\n        return 0;\\n    }\\n    close(fd);\\n\\n    tif = TIFFOpen(name, mode);\\n    if (!tif) {\\n        return 0;\\n    }\\n    // calls the function-under-test\\n    TIFFClose(tif);\\n\\n    remove(name);\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tiffio.h>\\n#include <cstdio>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Check to have at least one byte for each parameter \\n  if (size < 2) return 0;\\n\\n  const std::string str_mode = stream.ConsumeBytesAsString(1);  // open mode\\n  const std::string str_file = stream.ConsumeRemainingBytesAsString();  // file name\\n  \\n  TIFF* tif = TIFFOpen(str_mode.c_str(), str_file.c_str());\\n\\n  if (tif) {\\n    TIFFClose(tif);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}