{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"aconf.h\"\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"NameToCharCode.h\"\\n#include \"CharCodeToUnicode.h\"\\n#include \"CharTypes.h\"\\n#include \"UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SecurityHandler.h\"\\n#include \"/src/freetype/src/psaux/psglue.h\"\\n#include \"/src/freetype/src/autofit/afblue.h\"\\n#include \"/src/freetype/src/autofit/afmodule.h\"\\n#include \"/src/freetype/src/psnames/pstables.h\"\\n#include \"ShadingImage.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Ref.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double xradius = fdp.ConsumeFloatingPointInRange<double>(0.0, 100.0);\\n  double yradius = fdp.ConsumeFloatingPointInRange<double>(0.0, 100.0);\\n  double angle1 = fdp.ConsumeFloatingPointInRange<double>(0.0, 360.0);\\n  double angle2 = fdp.ConsumeFloatingPointInRange<double>(0.0, 360.0);\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  CharCode charCode = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegralInRange<int>(0, 3);\\n  Unicode unicodeBuffer[nBytes];\\n  for (int i = 0; i < nBytes; ++i) {\\n    unicodeBuffer[i] = fdp.ConsumeIntegral<Unicode>();\\n  }\\n  Unicode *unicode = unicodeBuffer;\\n  GBool composing = fdp.ConsumeBool();\\n  GBool horizontal = fdp.ConsumeBool();\\n  GBool real_font = fdp.ConsumeBool();\\n  \\n  PDFRectangle mediaBox;\\n  PDFRectangle cropBox;\\n  GfxState state(&fdp, &fdp, &mediaBox, rotate, false);\\n  SplashColor color;\\n  SplashOutputDev splashOut(splashModeRGB8, 4, false, color);\\n  splashOut.drawChar(&state, x, y, xradius, yradius, angle1, angle2, charCode, nBytes, unicode, composing, horizontal, real_font);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.17",
        "coverage_diff": "0.010959585026978056",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  int nBytes = fdp.ConsumeIntegralInRange<int>(0, static_cast<int>(size));\\n  int uLen = fdp.ConsumeIntegralInRange<int>(0, nBytes);\\n  \\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  Unicode unicode = fdp.ConsumeIntegral<Unicode>();\\n\\n  std::vector<uint8_t> codeChars = fdp.ConsumeBytesWithTerminator<uint8_t>(nBytes);\\n  std::vector<uint8_t> unicodeChars = fdp.ConsumeBytesWithTerminator<uint8_t>(uLen);\\n\\n  GBool clipping = fdp.ConsumeBool();\\n  GBool colorDisplay = fdp.ConsumeBool();\\n  GBool textClip = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  \\n  SplashColor paperColor;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  splashOut->startDoc(doc->getXRef());\\n\\n  // Define pageBox and rotate\\n  PDFRectangle pageBox;\\n  int rotate = 0;\\n\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n  \\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, reinterpret_cast<Unicode*>(unicodeChars.data()), uLen, clipping, colorDisplay, textClip);\\n  \\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete password;\\n  delete ownerPassword;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}