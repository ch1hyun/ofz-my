{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for the function-under-test\\n    DummyOutputDev* outputDev = new DummyOutputDev(); // Initialize DummyOutputDev object\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool useCropBox = stream.ConsumeBool();\\n    void* loop = nullptr; // Placeholder for loop parameter\\n    void* customData = nullptr; // Initialize customData as nullptr\\n\\n    // Call the function-under-test\\n    GBool abortCheckCbk(void*) { return false; } // Define a dummy abortCheckCbk function\\n    PDFDoc pdfDoc(nullptr); // Create an instance of PDFDoc with a dummy parameter\\n\\n    pdfDoc.displayPages(outputDev, page, numPages, scaleX, scaleY, rotation, useMediaBox, crop, useCropBox, loop, customData, abortCheckCbk);\\n\\n    // Clean up allocated memory\\n    delete outputDev;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Page.h\"\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gFalse; }\\n    GBool useDrawChar() override { return gFalse; }\\n    GBool interpretType3Chars() override { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    DummyOutputDev outputDev; // Create an instance of DummyOutputDev\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scale = stream.ConsumeFloatingPoint<double>();\\n    double rotation = stream.ConsumeFloatingPoint<double>();\\n    int numThreads = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n    GBool (*abortCheckCbk)(void*) = nullptr;\\n    void *abortData = reinterpret_cast<void*>(0x87654321); // Example address\\n\\n    // Call the function-under-test\\n    PDFDoc pdfDoc(nullptr, nullptr); // Create an instance of PDFDoc with dummy arguments\\n    Page pageObj(nullptr, 0); // Create an instance of Page with dummy arguments\\n\\n    pdfDoc.displayPages(&outputDev, page, numPages, scale, rotation, numThreads, useMediaBox, crop, printing, abortCheckCbk, abortData);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}