{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.03",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  double hdpi = stream.ConsumeFloatingPointInRange<double>(0.0, 300.0);\\n  double vdpi = stream.ConsumeFloatingPointInRange<double>(0.0, 300.0);\\n  int first_page = stream.ConsumeIntegralInRange<int>(1, 25);\\n  int last_page = stream.ConsumeIntegralInRange<int>(first_page, 100);\\n  int rotate = stream.ConsumeIntegralInRange<int>(0, 360);\\n  bool useMediaBox = stream.ConsumeBool();\\n  bool crop = stream.ConsumeBool();\\n  bool printing = stream.ConsumeBool();\\n  // Use remaining data as the PDF document content\\n  std::vector<char> payload = stream.ConsumeRemainingBytes<char>();\\n\\n  if (payload.empty()) {\\n    return 0;\\n  }\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *bs =\\n      new MemStream(&payload.front(), 0, payload.size(), &xpdf_obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  PDFDoc* doc = new PDFDoc(bs);\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev* splashOutput = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n\\n  splashOutput->startDoc(doc->getXRef());\\n  doc->displayPages(splashOutput, first_page, last_page, hdpi, vdpi, rotate, useMediaBox, crop, printing, NULL, NULL);\\n\\n  delete splashOutput;\\n  delete doc;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.13",
        "coverage_diff": "0.004120868108168779",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <GlobalParams.h>\\n#include <PDFDoc.h>\\n#include <SplashOutputDev.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 20) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n\\n  char ownerPassword[33] = {0}, userPassword[33] = {0};\\n  int pageNr = fdp.ConsumeIntegral<int>();\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  auto payload = fdp.ConsumeRemainingBytesAsString();\\n  Object obj;\\n  MemStream *stream = new MemStream((char *)payload.data(), 0, payload.size(), &obj);\\n\\n  globalParams = new GlobalParams(\"\");\\n  GString ownerGStr(ownerPassword);\\n  GString userGStr(userPassword);\\n  PDFDoc *doc = new PDFDoc(stream, &ownerGStr, &userGStr);\\n  SplashColor color;\\n  color[0] = 255;\\n  color[1] = 255;\\n  color[2] = 255;\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, color);\\n  \\n  if(doc->isOk()) {\\n    splashOut->startDoc(doc->getXRef());\\n    doc->displayPages(splashOut, pageNr, pageNr, hDPI, vDPI, rotate, useMediaBox, crop, printing, nullptr, nullptr);\\n  }\\n\\n  delete splashOut;\\n  delete doc;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}