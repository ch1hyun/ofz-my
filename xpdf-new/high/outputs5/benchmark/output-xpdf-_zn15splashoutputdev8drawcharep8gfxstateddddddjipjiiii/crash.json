{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.14",
        "coverage_diff": "0.010975267567242554",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider data_provider(data, size);\\n\\n  double x = data_provider.ConsumeFloatingPoint<double>();\\n  double y = data_provider.ConsumeFloatingPoint<double>();\\n  double dx = data_provider.ConsumeFloatingPoint<double>();\\n  double dy = data_provider.ConsumeFloatingPoint<double>();\\n  double originX = data_provider.ConsumeFloatingPoint<double>();\\n  double originY = data_provider.ConsumeFloatingPoint<double>();\\n  CharCode code = data_provider.ConsumeIntegral<CharCode>();\\n  int nBytes = data_provider.ConsumeIntegralInRange<int>(1, 4);\\n  Unicode unicode = data_provider.ConsumeIntegral<Unicode>();\\n  int uLen = data_provider.ConsumeIntegralInRange<int>(0, 4);\\n  GBool forceEncoding = data_provider.ConsumeBool();\\n  GBool usesEncoding = data_provider.ConsumeBool();\\n  GBool render = data_provider.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  int rotate = data_provider.ConsumeIntegralInRange<int>(0, 360);\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n\\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splash = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  splash->startDoc(doc->getXRef());\\n\\n  Unicode *u = new Unicode[4];\\n  splash->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, forceEncoding, usesEncoding, render);\\n\\n  delete[] u;\\n  delete splash;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashFont.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  SplashColor color;\\n  color[0] = 0;\\n  color[1] = 0;\\n  color[2] = 0;\\n  color[3] = 0;\\n  SplashOutputDev splashOutputDev(splashModeXBGR8, 4, gFalse, color);\\n  splashOutputDev.startDoc(nullptr);\\n\\n  GString *gooString = new GString((const char *)data, size);\\n  SplashFont *font = splashOutputDev.getCurrentFont();\\n  GfxState *state = new GfxState(72.0, 72.0, nullptr, 0, gTrue);\\n  splashOutputDev.drawChar(state, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, (Unicode *)gooString->getCString(), gooString->getLength(), gFalse, gFalse, gFalse);\\n\\n  delete gooString;\\n  delete state;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}