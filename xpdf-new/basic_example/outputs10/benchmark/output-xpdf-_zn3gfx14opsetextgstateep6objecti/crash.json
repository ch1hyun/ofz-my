{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/SecurityHandler.h\"\\n#include \"XRef.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a global parameters object\\n  GlobalParams *params = new GlobalParams(nullptr);\\n\\n  // Create a GfxState object\\n  int x = stream.ConsumeIntegral<int>();\\n  int y = stream.ConsumeIntegral<int>();\\n  int hDPI = stream.ConsumeIntegral<int>();\\n  int vDPI = stream.ConsumeIntegral<int>();\\n  PDFRectangle *pageBox = new PDFRectangle(x, y, x+150, y+150);\\n  GfxState *state = new GfxState(hDPI, vDPI, pageBox, 0, gFalse);\\n\\n  // Create a dictionary object with dummy values\\n  Dict *dict = new Dict(nullptr);\\n\\n  // Create a graphics context\\n  XRef *xref = new XRef(); // Create a dummy XRef object\\n  Gfx *gfx = new Gfx(xref, state, nullptr, dict, nullptr, nullptr, nullptr);\\n\\n  // Create and initialize Object\\n  Object *obj = new Object();\\n  obj->initArray(nullptr);\\n\\n  // Generate length for the second argument\\n  int arg_length = stream.ConsumeIntegralInRange<int>(0, std::numeric_limits<int>::max());\\n\\n  // As opSetExtGState is a private member of Gfx, we cannot call it directly\\n  // Instead, we can call a public method that uses opSetExtGState internally\\n  // For example, if there's a method called `setGraphicsState`, we can call it like this:\\n  // gfx->setGraphicsState(obj, arg_length);\\n\\n  delete obj;\\n  delete gfx;\\n  delete dict;\\n  delete state;\\n  delete params;\\n  delete xref;\\n  delete pageBox;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Annot.h\"\\n#include \"/src/xpdf-4.05/xpdf/Array.h\"\\n#include \"/src/xpdf-4.05/xpdf/Catalog.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/Link.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  static bool inited = false;\\n  if (!inited) {\\n    globalParams = new GlobalParams(nullptr);\\n    globalParams->setErrQuiet(1);\\n    inited = true;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  unsigned char extGState_len = stream.ConsumeIntegralInRange<unsigned char>(1, 10);\\n  std::vector<unsigned char> extGState_data = stream.ConsumeBytes<unsigned char>(extGState_len);\\n\\n  Dict dict(nullptr);\\n  // Initialize dictionary object\\n  int extGState_size = extGState_len > 5 ? 5 : extGState_len;\\n  Object extGState;\\n  for (size_t i = 0; i < extGState_len; i++) {\\n    Object value;\\n    dict.add((char *)&extGState_data[i], &value);\\n  }\\n  extGState.initDict(&dict);\\n    \\n  // Initialize gfx object\\n  int pageNum = 1;\\n  PDFDoc *doc;\\n  Gfx *gfx;\\n  XRef *xref;\\n  Catalog *catalog;\\n  Page *page;\\n\\n  GString gfileName((char *)data, size);\\n  doc = new PDFDoc(&gfileName, nullptr, nullptr, nullptr);\\n  xref = new XRef(doc->getBaseStream(), false);\\n  catalog = new Catalog(doc);\\n  doc = new PDFDoc(doc->getBaseStream(), nullptr, nullptr, nullptr);\\n\\n  page = doc->getCatalog()->getPage(pageNum);\\n  gfx = new Gfx(doc, nullptr, page->getResourceDict(),\\n            page->getMediaBox(), page->getCropBox(), page->getRotate());\\n\\n  int nargs = 0;\\n  gfx->opSetGState(&extGState, nargs);\\n\\n  // Cleanup\\n  extGState.free();\\n  gfx->popResources();\\n  delete gfx;\\n  delete doc;\\n  delete catalog;\\n  delete xref;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}