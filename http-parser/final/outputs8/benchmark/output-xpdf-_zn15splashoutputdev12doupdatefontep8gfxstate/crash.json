{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <stdlib.h>\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"GfxState.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"fuzzer/FuzzedDataProvider.h\"\\n\\nclass TestState: public GfxState {\\n    public:\\n        TestState(int page_w, int page_h): GfxState(72.0, 72.0, nullptr, 0, gFalse) {\\n            this->moveTo(page_w, page_h);\\n        };\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n    \\n    // Choose some reasonable width and height.\\n    TestState state(fdp.ConsumeIntegralInRange(100, 1024), fdp.ConsumeIntegralInRange(100, 1024));\\n\\n    // Define some color for the bitmap\\n    SplashColor paperColor = {0xff, 0xff, 0xff};\\n    SplashOutputDev output_dev(splashModeBGR8, 1, gFalse, paperColor);\\n\\n    // Call the function under test\\n    output_dev.doUpdateFont(&state);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"fofi/FoFiTrueType.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n    \\n    if (!stream.remaining_bytes())\\n        return 0;\\n\\n    int s = stream.ConsumeIntegral<int>();\\n  \\n    auto fontFile = FoFiTrueType::load((char*)data, size);\\n    if (!fontFile) return 0;\\n\\n    PDFRectangle pageBox;\\n    GfxState * gfxState = new GfxState(s, s, &pageBox, 0, gTrue);\\n    gfxState->setFont(new GfxFont(fontFile), s);\\n\\n    SplashColor paperColor;\\n    paperColor[0] = 255;\\n    paperColor[1] = 255;\\n    paperColor[2] = 255;\\n    paperColor[3] = 255;\\n    SplashOutputDev * splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n    splashOut->startDoc(nullptr);\\n      \\n    // Call function-under-test\\n    splashOut->doUpdateFont(gfxState);\\n\\n    delete splashOut;\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}