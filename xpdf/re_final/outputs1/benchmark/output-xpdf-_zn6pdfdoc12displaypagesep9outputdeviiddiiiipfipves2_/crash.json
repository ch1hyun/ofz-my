{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/splash/SplashClip.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  std::vector<uint8_t> buffer(fuzzed_data_provider.ConsumeRemainingBytes<uint8_t>());\\n\\n  // Create a GString instance with the fuzzed data\\n  GString *fuzzed_data = new GString((char *)buffer.data(), buffer.size());\\n\\n  // Initialize globalParams\\n  globalParams = new GlobalParams();\\n\\n  // Create a PDFDoc instance\\n  PDFDoc doc(fuzzed_data);\\n\\n  // Create a SplashOutputDev instance\\n  SplashColor splashColor;\\n  splashColor[0] = 0;\\n  splashColor[1] = 0;\\n  splashColor[2] = 0;\\n  SplashOutputDev *splashOutputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, splashColor, gTrue);\\n  splashOutputDev->startDoc(doc.getXRef());\\n\\n  // Call the target function\\n  doc.displayPages(splashOutputDev, 1, 1, 72, 72, 0, gFalse, gFalse, gFalse, NULL, NULL);\\n\\n  delete splashOutputDev;\\n  delete fuzzed_data;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.42",
        "coverage_diff": "0.000481035187723982",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    virtual GBool upsideDown() { return gFalse; }\\n    virtual GBool useDrawChar() { return gTrue; }\\n    virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n    FuzzedDataProvider fdp(data, size);\\n\\n    // Initialize the required objects\\n    GString *fileName = new GString(\"dummy\");\\n    PDFDoc pdfdoc(fileName);\\n    MyOutputDev outputdev;\\n\\n    // Get the required parameters from the fdp\\n    int startPage = fdp.ConsumeIntegral<int>();\\n    int endPage = fdp.ConsumeIntegral<int>();\\n    double hDPI = fdp.ConsumeFloatingPoint<double>();\\n    double vDPI = fdp.ConsumeFloatingPoint<double>();\\n    int rotate = fdp.ConsumeIntegral<int>();\\n    GBool useMediaBox = fdp.ConsumeBool();\\n    GBool crop = fdp.ConsumeBool();\\n    GBool printing = fdp.ConsumeBool();\\n    void *callbackData = nullptr;\\n\\n    // Call the target function\\n    pdfdoc.displayPages(&outputdev, startPage, endPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL, callbackData);\\n\\n    // Clean up\\n    //delete fileName; //Remove this line to prevent heap-use-after-free error\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}