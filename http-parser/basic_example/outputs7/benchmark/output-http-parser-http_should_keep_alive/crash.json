{
    "samples": [

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.22",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(uint64_t) * 4 + sizeof(unsigned int) * 2) {\\n    return 0;\\n  }\\n\\n  http_parser parser = {};\\n  \\n  parser.http_major = *(unsigned int *)data;\\n  parser.http_major = parser.http_major >= 1 ? 1 : 0;\\n  data += sizeof(unsigned int);\\n  \\n  parser.http_minor = *(unsigned int *)data;\\n  data += sizeof(unsigned int);\\n  \\n  parser.flags = *(uint64_t *)data;\\n  data += sizeof(uint64_t);\\n  \\n  parser.content_length = *(uint64_t *)data;\\n  data += sizeof(uint64_t);\\n\\n  parser.http_errno = *(uint64_t *)data;\\n  data += sizeof(uint64_t);\\n\\n  parser.upgrade = *(unsigned int *)data % 2;\\n  \\n  http_should_keep_alive(&parser);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_should_keep_alive",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "21.99",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\tstatic const http_parser_settings settings_null = {.on_message_begin = 0, .on_header_field = 0, .on_header_value = 0, .on_url = 0, .on_status = 0, .on_body = 0, .on_headers_complete = 0, .on_message_complete = 0, .on_chunk_header = 0, .on_chunk_complete = 0};\\n\\n\thttp_parser* parser = (http_parser*)malloc(sizeof(http_parser));\\n\\n\tif (parser == NULL) {\\n\t\treturn 0;\\n\t}\\n\\n\t// Initialize the parser.\\n\thttp_parser_init(parser, HTTP_BOTH);\\n\\n\t// Execute the parser.\\n\thttp_parser_execute(parser, &settings_null, (char *)data, size);\\n\\n\t// Call the function-under-test.\\n\thttp_should_keep_alive(parser);\\n\\n\t// Cleanup.\\n\tfree(parser);\\n\\n\treturn 0;\\n}",
        "model": ""
    }

    ]
}