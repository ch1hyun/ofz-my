{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"BaseStream.h\"\\n#include \"GfxFont.h\"\\n#include \"PDFDoc.h\"\\n#include \"Object.h\"\\n#include \"GlobalParams.h\"\\n#include \"OutputDev.h\"\\n#include <iostream>\\n#include <string>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3) {\\n    return 0;\\n  }\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a random data string to initialize the globalParams\\n  std::string cfg = std::string(reinterpret_cast<const char *>(stream.ConsumeBytes(16).data()));\\n  globalParams = new GlobalParams(cfg.c_str());\\n\\n  // Initialize the parameters required to call displayPages\\n  int firstPage = stream.ConsumeIntegral<int>();\\n  int lastPage = stream.ConsumeIntegral<int>();\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeIntegral<GBool>();\\n  GBool crop = stream.ConsumeIntegral<GBool>();\\n  GBool printing = stream.ConsumeIntegral<GBool>();\\n  \\n  // Extract the rest of the data to use to initialize stream and obj\\n  std::vector<char> data_remaining = stream.ConsumeRemainingBytes<char>();\\n  \\n  // Create the objects needed to initialize PDFDoc\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(data_remaining.data(), 0, data_remaining.size(), &obj);\\n  \\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL, NULL);\\n  \\n  // Initialize OutputDev to `nullptr` just for placeholder\\n  OutputDev *out = nullptr;\\n  \\n  //Infinity loop is an argument in the function signature. But, it seems to be a typing error. PDFDoc::display",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"config.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  // Consume data for parameters\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int firstPage = fdp.ConsumeIntegral<int>();\\n  int lastPage = fdp.ConsumeIntegral<int>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  // Initialize PDFDoc with Memory instance and then call displayPages method\\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n  \\n  PDFDoc doc(stream);\\n  if (// Ensure the document has enough pages. If it does not, initialize firstPage and lastPage as the first and last page of the document.\\n      firstPage > doc.getNumPages() ||\\n      lastPage > doc.getNumPages() ||\\n      firstPage > lastPage) {\\n    firstPage = 1;\\n    lastPage = doc.getNumPages();\\n  }\\n  \\n  OutputDev *output_dev = NULL;\\n  if (doc.isOk()) {\\n    doc.displayPages(output_dev, firstPage, lastPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL, NULL);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}