LLVMFuzzerTestOneInput:
   24|     55|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   25|     55|auto start_target = std::chrono::high_resolution_clock::now();
   26|     55|    FuzzedDataProvider stream(data, size);
   27|       |
   28|       |    // Initialize parameters for the drawChar function
   29|     55|    GfxState gfxState; // Create an instance of GfxState
   30|     55|    double param1 = stream.ConsumeFloatingPoint<double>(); // First double parameter
   31|     55|    double param2 = stream.ConsumeFloatingPoint<double>(); // Second double parameter
   32|     55|    double param3 = stream.ConsumeFloatingPoint<double>(); // Third double parameter
   33|     55|    double param4 = stream.ConsumeFloatingPoint<double>(); // Fourth double parameter
   34|     55|    double param5 = stream.ConsumeFloatingPoint<double>(); // Fifth double parameter
   35|     55|    double param6 = stream.ConsumeFloatingPoint<double>(); // Sixth double parameter
   36|     55|    CharCode charCode = stream.ConsumeIntegral<CharCode>(); // CharCode parameter
   37|     55|    int intParam = stream.ConsumeIntegral<int>(); // Integer parameter
   38|     55|    size_t unicodeLength = stream.ConsumeIntegralInRange<size_t>(1, 100); // Length for Unicode array
   39|       |
   40|       |    // Use ConsumeRandomLengthString to ensure correct type and size
   41|     55|    std::string unicodeString = stream.ConsumeRandomLengthString(unicodeLength);
   42|     55|    std::vector<Unicode> unicodeArray(unicodeString.begin(), unicodeString.end()); // Convert string to Unicode vector
   43|       |    
   44|     55|    int intParam2 = stream.ConsumeIntegral<int>(); // Second integer parameter
   45|     55|    GBool boolParam1 = stream.ConsumeBool(); // First GBool parameter
   46|     55|    GBool boolParam2 = stream.ConsumeBool(); // Second GBool parameter
   47|     55|    GBool boolParam3 = stream.ConsumeBool(); // Third GBool parameter
   48|       |
   49|       |    // Call the function under test
   50|     55|    SplashOutputDev splashOutputDev;
   51|     55|	auto start_func = std::chrono::high_resolution_clock::now();
   52|     55|    splashOutputDev.drawChar(&gfxState, param1, param2, param3, param4, param5, param6, charCode, intParam, unicodeArray.data(), intParam2, boolParam1, boolParam2, boolParam3);
   53|     55|	auto end_func = std::chrono::high_resolution_clock::now();
   54|     55|auto end_target = std::chrono::high_resolution_clock::now();
   55|     55|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   56|       |
   57|     55|    return 0;
   58|     55|}
_ZN15SplashOutputDev8drawCharEP8GfxStateddddddjiPjibbb:
   18|     55|    void drawChar(GfxState *, double, double, double, double, double, double, CharCode, int, Unicode *, int, GBool, GBool, GBool) {
   19|       |        // Function implementation (omitted for brevity)
   20|     55|    }

