{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno)) {\\n    return 0;\\n  }\\n  \\n  // Cast the first 4 bytes to an http_errno\\n  enum http_errno err = *(enum http_errno *)data;\\n  \\n  // Check if it's a valid http_errno value\\n  if (err < _HTTP_ERRNO_H) {\\n    if (http_errno_name(err) != NULL) {\\n      http_errno_description(err);\\n    }\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n   if (size < 1) {\\n     return 0;\\n   }\\n\\n   enum http_errno error = (enum http_errno)(data[0] % 20); // HTTP_ERRNO_MAX is not defined, replace it with a constant number\\n   const char* description = http_errno_description(error);\\n\\n   return 0;\\n}",
        "model": ""
    }

    ]
}