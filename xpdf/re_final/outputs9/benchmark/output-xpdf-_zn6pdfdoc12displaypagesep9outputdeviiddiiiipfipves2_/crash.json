{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"my_custom_class.h\"\\n#include \"my_custom_function.h\"",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  // Initialize necessary objects\\n  PDFDoc doc;\\n  OutputDev outputDev;\\n  \\n  // Convert Data to necessary types\\n  int arg1 = static_cast<int>(Data[0]);\\n  int arg2 = static_cast<int>(Data[1]);\\n  double arg3 = static_cast<double>(Data[2]);\\n  double arg4 = static_cast<double>(Data[3]);\\n  int arg5 = static_cast<int>(Data[4]);\\n  GBool arg6 = static_cast<GBool>(Data[5]);\\n  GBool arg7 = static_cast<GBool>(Data[6]);\\n  GBool arg8 = static_cast<GBool>(Data[7]);\\n  DW_TAG_subroutine_typeInfinite loop *arg9 = static_cast<DW_TAG_subroutine_typeInfinite loop *>(Data[8]);\\n  void *arg10 = static_cast<void *>(Data[9]);\\n\\n  // Call the function\\n  doc.displayPages(&outputDev, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}