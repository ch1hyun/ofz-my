{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "01",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  LibRaw image_processor;\\n  int ret = image_processor.open_buffer(const_cast<void*>(reinterpret_cast<const void*>(data)), size);\\n  if(ret != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n  \\n  if(image_processor.imgdata.idata.raw_count > 2) {\\n    image_processor.imgdata.params.shot_select = 1;\\n  }\\n\\n  // Call the required function\\n  image_processor.selectCRXTrack();\\n  \\n  image_processor.recycle();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14selectcrxtrackev",
        "sample": "02",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  LibRaw rawProcessor;\\n  rawProcessor.open_buffer((void*)data, size);\\n  rawProcessor.unpack();\\n  // rawProcessor.selectCRXTrack(); // Removed this line as there's no such function in LibRaw\\n  rawProcessor.recycle();\\n  return 0;\\n}",
        "model": ""
    }

    ]
}