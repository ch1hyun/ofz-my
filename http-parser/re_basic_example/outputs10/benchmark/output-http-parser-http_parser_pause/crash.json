{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "19.63",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n\\n#include \"http_parser.h\"\\n\\n// Define settings\\nhttp_parser_settings settings;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize a HTTP parser.\\n    http_parser parser;\\n    http_parser_init(&parser, HTTP_BOTH);\\n\\n    // Take first byte as determining whether to 'pause' or 'unpause'.\\n    // Since pause value should be either 0 or 1 rather than a random value.\\n    int pause = size > 0 ? (data[0] % 2) : 0;\\n\\n    // Call the target function.\\n    http_parser_pause(&parser, pause);\\n\\n    // Call the parse function to increase code coverage.\\n    if (size > 1) {\\n        http_parser_execute(&parser, &settings, (const char*)data+1, size-1);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.09",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size <= 1) { // changed from size == 0 to size <= 1 to ensure that there is at least one byte available for 'pause'\\n    return 0;\\n  }\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  uint32_t pause = data[size-1] % 2;\\n  size--;\\n\\n  http_parser_settings settings_null = {0};\\n  http_parser_execute(&parser, &settings_null, (const char*)data, size);\\n\\n  if(pause) { // added a condition to check if pause is true before calling http_parser_pause\\n    http_parser_pause(&parser, pause);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}