{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <cstdint>\\n#include <cstring>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int))\\n    return 0;\\n  int status = *reinterpret_cast<const int *>(data);\\n  if (status < 100 || status >= 600) {\\n    return 0;\\n  }\\n  // Calling the function-under-test\\n  const char *status_str = http_status_str(static_cast<enum http_status>(status));\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include \"http_parser.h\"\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if(size == 0)\\n    return 0;               \\n\\n  // Converting Fuzzing Inputs into a valid `http_status`\\n  enum http_status status = (enum http_status) (*data % 34 ) ;\\n\\n  // Ensure the input to http_status_str is not NULL\\n  if (status) {\\n    const char *result = http_status_str(status);\\n  }\\n  \\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}