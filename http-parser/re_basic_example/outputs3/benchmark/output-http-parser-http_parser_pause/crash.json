{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n#define MAX_PAUSE_FLAG_VALUE 255\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  static const http_parser_settings settings_null = {.on_message_begin = 0, .on_header_field = 0, .on_header_value = 0, .on_url = 0, .on_status = 0, .on_body = 0, .on_headers_complete = 0, .on_message_complete = 0, .on_chunk_header = 0, .on_chunk_complete = 0};\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n\\n  // Iteratively parse the input without pausing after every single byte processed.\\n  for(size_t i = 0 ; i < size ; i++) {\\n    http_parser_execute(&parser, &settings_null, (char *)(data+i), 1);\\n    if (i % MAX_PAUSE_FLAG_VALUE == 0 && i != 0 && http_parser_is_paused(&parser) == 0) { // Avoid pausing the parser at the beginning and when it's already paused\\n      http_parser_pause(&parser, 1);\\n    }\\n  }\\n\\n  if (http_parser_is_paused(&parser)) { // Ensure the parser is not paused at the end\\n    http_parser_pause(&parser, 0);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.77",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < 1)\\n    return 0;\\n\\n  static const http_parser_settings settings_null = {.on_message_begin = 0, .on_header_field = 0, .on_header_value = 0, .on_url = 0, .on_status = 0, .on_body = 0, .on_headers_complete = 0, .on_message_complete = 0, .on_chunk_header = 0, .on_chunk_complete = 0};\\n\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  http_parser_execute(&parser, &settings_null, (char *)data, size);\\n  http_parser_pause(&parser, (int)data[0]);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}