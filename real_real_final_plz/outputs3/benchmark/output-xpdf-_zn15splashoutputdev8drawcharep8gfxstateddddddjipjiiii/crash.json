{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"Object.h\"\\n#include \"OutputDev.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Error.h\" // Include Error header file for Ref definition\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for SplashOutputDev::drawChar function\\n    GfxState gfxState(nullptr); // Initialize GfxState object with nullptr\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *u = nullptr; // Initialize with nullptr\\n    int uLen = stream.ConsumeIntegral<int>();\\n    GBool aa = stream.ConsumeBool();\\n    GBool render = stream.ConsumeBool();\\n    GBool stroke = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(nullptr, 0, gFalse); // Initialize SplashOutputDev object with default parameters\\n    splashOutputDev.startStream(nullptr, &gfxState); // Passing nullptr for Ref object\\n    splashOutputDev.endStream(nullptr); // Passing nullptr for Ref object\\n    Object obj;\\n    Dict dict(nullptr); // Initialize Dict object with nullptr\\n    splashOutputDev.tilingPatternFill(&gfxState, nullptr, &obj, 0, 0, &dict); // Passing nullptr for Stream object\\n    splashOutputDev.drawImageMask(&gfxState, &obj, nullptr); // Passing nullptr for Stream object\\n    splashOutputDev.drawImage(&gfxState, &obj, nullptr); // Passing nullptr for Stream object\\n    splashOutputDev.drawMaskedImage(&gfxState, &obj, nullptr); // Passing nullptr for Stream object\\n    splashOutputDev.drawSoftMaskedImage(&gfxState, &obj, nullptr); // Passing nullptr for Stream object\\n    splashOutputDev.opiBegin(&gfxState, &dict);\\n    splashOutputDev.opiEnd(&gfxState, &dict);\\n    splashOutputDev.drawForm(nullptr); // Passing nullptr for Ref object\\n    splashOutputDev.beginStructureItem(\"tag\", 0, &dict);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include OutputDev.h to resolve unknown type name 'Ref' error\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    GfxState* gfxState = reinterpret_cast<GfxState*>(0x12345678); // Dummy address\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode* unicode = nullptr;\\n    int len = stream.ConsumeIntegral<int>();\\n    GBool fill = stream.ConsumeBool();\\n    GBool stroke = stream.ConsumeBool();\\n    GBool clip = stream.ConsumeBool();\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeMono8, 1, gFalse, nullptr, gFalse, gTrue);\\n    splashOutputDev.drawChar(gfxState, x, y, dx, dy, ox, oy, charCode, nBytes, unicode, len, fill, stroke, clip);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}