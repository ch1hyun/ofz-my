{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n\\n#include \"goo/gtypes.h\" // Include necessary library for 'Ref' and 'Object'\\n#include \"Gfx.h\" // Include necessary library for 'Gfx'\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    GfxState* state = new GfxState(0, 0, nullptr, 0, gFalse);\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double x_scale = stream.ConsumeFloatingPoint<double>();\\n    double y_scale = stream.ConsumeFloatingPoint<double>();\\n    double x_offset = stream.ConsumeFloatingPoint<double>();\\n    double y_offset = stream.ConsumeFloatingPoint<double>();\\n    CharCode char_code = stream.ConsumeIntegral<CharCode>();\\n    int n_bytes = stream.ConsumeIntegral<int>();\\n    std::vector<Unicode> unicodes;\\n    for (int i = 0; i < n_bytes; ++i) {\\n        Unicode unicode = stream.ConsumeIntegral<Unicode>();\\n        unicodes.push_back(unicode);\\n    }\\n    int n_unicode = stream.ConsumeIntegral<int>();\\n    GBool is_invisible = stream.ConsumeBool();\\n    GBool is_image = stream.ConsumeBool();\\n    GBool is_dot = stream.ConsumeBool();\\n\\n    SplashOutputDev splashOutputDev(splashModeRGB8, 0, gFalse, nullptr, gTrue); // Fixed constructor arguments\\n\\n    splashOutputDev.drawChar(state, x, y, x_scale, y_scale, x_offset, y_offset, char_code, n_bytes, unicodes.data(), n_unicode, is_invisible, is_image, is_dot);\\n\\n    delete state;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n#include \"FoFiTrueType.h\"\\n#include \"FoFiType1.h\"\\n#include \"FoFiType1C.h\"\\n#include \"FoFiIdentifier.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    GfxState* gfxState = new GfxState(96, 96, nullptr, 0, gFalse);\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double xScale = stream.ConsumeFloatingPoint<double>();\\n    double yScale = stream.ConsumeFloatingPoint<double>();\\n    double xSkew = stream.ConsumeFloatingPoint<double>();\\n    double ySkew = stream.ConsumeFloatingPoint<double>();\\n    CharCode charCode = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    std::vector<Unicode> unicode(nBytes);\\n    for (int i = 0; i < nBytes; ++i) {\\n        unicode[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n    int n = stream.ConsumeIntegral<int>();\\n    GBool isSpace = stream.ConsumeBool();\\n    GBool isDiacritic = stream.ConsumeBool();\\n    GBool isExtGState = stream.ConsumeBool();\\n\\n    FoFiTrueType font(nullptr, 0, gFalse, 0, gFalse, gFalse); // Fixed to provide necessary arguments\\n\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeMono8, 1, gFalse, nullptr, gTrue, gTrue);\\n    splashOutputDev.drawChar(gfxState, x, y, xScale, yScale, xSkew, ySkew, charCode, n, unicode.data(), nBytes, isSpace, isDiacritic, isExtGState);\\n\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}