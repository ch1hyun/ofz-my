{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.66",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n// Define hard-coded range for http_errno\\n#define HTTP_ERRNO_MAX 63\\n\\nextern \"C\" const char *http_errno_description(int);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  // Extract http_errno from input data\\n  int http_error = *((int *)data) % HTTP_ERRNO_MAX;\\n\\n  // Ensure http_error is always positive\\n  if (http_error < 0) {\\n    http_error = -http_error;\\n  }\\n\\n  // Call the target function\\n  const char* description = http_errno_description(http_error);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n#define HTTP_ERRNO_MAX 23\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    int err_no = *(int *)data;\\n    if (err_no < 0 || err_no >= HTTP_ERRNO_MAX)\\n    {\\n        return 0;\\n    }\\n\\n    const char *error_description = http_errno_description((enum http_errno)err_no);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}