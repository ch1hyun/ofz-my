{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.05",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdint.h>\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/splash/SplashClip.h\"\\n#include \"GlobalParams.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 4) return 0;\\n\\n  FuzzedDataProvider fdp(data, size);\\n\\n  int pg = fdp.ConsumeIntegralInRange<int>(1, 1000);\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegralInRange<int>(-360, 360);\\n\\n  unsigned char crop = fdp.ConsumeIntegral<unsigned char>() % 2;\\n  unsigned char print = fdp.ConsumeIntegral<unsigned char>() % 2;\\n  unsigned char rgb = fdp.ConsumeIntegral<unsigned char>() % 2;\\n  if (fdp.remaining_bytes() < 4) return 0;\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n\\n  Object obj;\\n  obj.initNull();\\n  PDFDoc doc(new MemStream((char*)data, 0, size, &obj));\\n\\n  const char *cfgFileName = \"\";\\n  globalParams = new GlobalParams(cfgFileName);\\n\\n  SplashColor paperColor = {255, 255, 255};\\n  SplashOutputDev splashOut(splashModeRGB8, 1, gFalse, paperColor);\\n  splashOut.startDoc(doc.getXRef());\\n\\n  doc.displayPageSlice(&splashOut, pg, hDPI, vDPI, rotate, crop, print, rgb,\\n                       sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"PDFDoc.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n#include <stdint.h>\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"Object.h\"\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider dataProvider(data, size);\\n\\n  static double hDPI = 72.0;\\n  static double vDPI = 72.0;\\n  static int rotate = 0;\\n  static int sliceX = -1;\\n  static int sliceY = -1;\\n  static int sliceW = -1;\\n  static int sliceH = -1;\\n  static bool useMediaBox = true;\\n  static bool crop = false;\\n  static bool printing = false;\\n\\n  int page = static_cast<int>(dataProvider.ConsumeIntegralInRange(1, 1000));\\n  if(!page) page = 1;\\n\\n  globalParams = new GlobalParams(\"\");\\n  \\n  GString* nonEmptyString = new GString(\"non-empty string\"); \\n  Object obj;\\n  \\n  MemStream* memStream = new MemStream((char*)nonEmptyString->copy(), 0, size, &obj);\\n  PDFDoc* doc = new PDFDoc(memStream);\\n  \\n  SplashColor paperColor = {0xff, 0xff, 0xff}; \\n  SplashOutputDev* splashOut = new SplashOutputDev(splashModeRGB8, 1, false, paperColor);\\n  \\n  doc->displayPageSlice(splashOut, \\n                        page,\\n                        hDPI,vDPI,\\n                        rotate,\\n                        useMediaBox,\\n                        crop,\\n                        printing,\\n                        sliceX,\\n                        sliceY,\\n                        sliceW,\\n                        sliceH,\\n                        nullptr, \\n                        nullptr);\\n                      \\n  delete splashOut;                 \\n  delete doc;\\n  delete globalParams;\\n   \\n  return 0;\\n}",
        "model": ""
    }

    ]
}