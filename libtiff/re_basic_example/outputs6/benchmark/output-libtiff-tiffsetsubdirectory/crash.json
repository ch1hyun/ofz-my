{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(uint64_t)) {\\n    return 0;\\n  }\\n  TIFF *tiff = TIFFClientOpen(\"/dev/null\", \"w\", 0, \\n                              _tiffReadProc, _tiffWriteProc, _tiffSeekProc, \\n                              _tiffCloseProc, _tiffSizeProc, \\n                              _tiffMapFileProc, _tiffUnmapFileProc);\\n  if (tiff) {\\n    TIFFSetSubDirectory(tiff, *(uint64_t*)data);\\n    TIFFClose(tiff);\\n  }\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <cstring> // added this line to include the library for memcpy\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    TIFF *tif = TIFFOpen(\"/dev/null\", \"w\");\\n    if (tif) {\\n        uint64_t dir_off = 0;\\n        if (Size >= sizeof(dir_off)) {\\n            memcpy(&dir_off, Data, sizeof(dir_off));\\n            TIFFSetSubDirectory(tif, dir_off);\\n        }\\n        TIFFClose(tif);\\n    }\\n    return 0;\\n}",
        "model": ""
    }

    ]
}