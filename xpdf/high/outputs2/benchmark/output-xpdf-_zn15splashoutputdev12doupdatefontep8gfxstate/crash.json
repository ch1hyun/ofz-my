{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1C.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1)\\n    return 0;\\n\\n  FuzzedDataProvider fdp(data, size);\\n  SplashColor paperColor;\\n  paperColor[0] = fdp.ConsumeIntegral<uint8_t>();\\n  paperColor[1] = fdp.ConsumeIntegral<uint8_t>();\\n  paperColor[2] = fdp.ConsumeIntegral<uint8_t>();\\n  paperColor[3] = fdp.ConsumeIntegral<uint8_t>();\\n  \\n  SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, paperColor);\\n  GfxState gfxState(72.0, 72.0, nullptr, 0, gFalse);\\n  \\n  // Call the updateFont function instead of doUpdateFont\\n  splashOut.updateFont(&gfxState);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <vector>\\n\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"FoFiTrueType.h\"\\n#include \"FoFiType1C.h\"\\n#include \"FoFiType1.h\"\\n#include \"FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n  \\n  // SplashOutputDev setup\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, paperColor);\\n\\n  // GfxState setup\\n  double hDPI = fdp.ConsumeFloatingPointInRange<double>(1.0, 1200.0);\\n  double vDPI = fdp.ConsumeFloatingPointInRange<double>(1.0, 1200.0);\\n  int rotate = fdp.ConsumeIntegralInRange<int>(0, 360);\\n  PDFRectangle box(0, 0, 1, 1);\\n  GfxState gfxState(hDPI, vDPI, &box, rotate, gFalse);\\n  \\n  splashOut.startDoc(NULL);\\n\\n  // Call SplashOutputDev::doUpdateFont(GfxState *)\\n  splashOut.updateFont(&gfxState);\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}