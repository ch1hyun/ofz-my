{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\n// Define GBool type if not already defined\\ntypedef int GBool;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPageSlice\\n    OutputDev *outputDev = nullptr; // Initialize with a valid pointer\\n    int page = stream.ConsumeIntegral<int>();\\n    double startX = stream.ConsumeFloatingPoint<double>();\\n    double startY = stream.ConsumeFloatingPoint<double>();\\n    int sizeX = stream.ConsumeIntegral<int>();\\n    GBool useMediaBox = static_cast<GBool>(stream.ConsumeBool());\\n    GBool crop = static_cast<GBool>(stream.ConsumeBool());\\n    GBool printing = static_cast<GBool>(stream.ConsumeBool());\\n    int rotate = stream.ConsumeIntegral<int>();\\n    int clip = stream.ConsumeIntegral<int>();\\n    int sliceX = stream.ConsumeIntegral<int>();\\n    int sliceY = stream.ConsumeIntegral<int>();\\n    int sliceW = stream.ConsumeIntegral<int>();\\n    int sliceH = stream.ConsumeIntegral<int>();\\n    void *loop = nullptr; // Initialize with a valid pointer\\n    void *userData = nullptr; // Initialize with a valid pointer\\n\\n    // Create an instance of PDFDoc with a dummy filename\\n    GString dummyFilename = GString(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&dummyFilename);\\n\\n    // Call the function-under-test with the correct number of arguments\\n    pdfDoc.displayPageSlice(outputDev, page, startX, startY, sizeX, 0, useMediaBox, crop, printing, rotate, clip, sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Page.h\"\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gTrue; }\\n    GBool useDrawChar() override { return gTrue; }\\n    GBool interpretType3Chars() override { return gTrue; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPageSlice\\n    DummyOutputDev outputDev; // Use a dummy implementation for OutputDev\\n    int page = stream.ConsumeIntegral<int>();\\n    double startX = stream.ConsumeFloatingPoint<double>();\\n    double startY = stream.ConsumeFloatingPoint<double>();\\n    int sizeX = stream.ConsumeIntegral<int>();\\n    GBool reset = static_cast<GBool>(stream.ConsumeBool());\\n    GBool showText = static_cast<GBool>(stream.ConsumeBool());\\n    GBool showPaths = static_cast<GBool>(stream.ConsumeBool());\\n    int clip = stream.ConsumeIntegral<int>();\\n    int hDpi = stream.ConsumeIntegral<int>();\\n    int vDpi = stream.ConsumeIntegral<int>();\\n    int rotate = stream.ConsumeIntegral<int>();\\n    int flags = stream.ConsumeIntegral<int>();\\n    void* abort = nullptr; // Initialize to nullptr\\n    void* abortData = nullptr; // Initialize to nullptr\\n\\n    // Create a PDFDoc object\\n    PDFDoc pdfDoc(nullptr, nullptr); // Pass nullptr for the filename and ownerPassword\\n\\n    // Create a Page object with PDFDoc as argument\\n    Page pageObj(&pdfDoc, 0); // Assuming 0 as a placeholder for page number\\n\\n    // Call the function-under-test\\n    pageObj.displaySlice(&outputDev, hDpi, vDpi, startX, startY, sizeX, 0, 0, 0, 0, gFalse, nullptr, nullptr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}