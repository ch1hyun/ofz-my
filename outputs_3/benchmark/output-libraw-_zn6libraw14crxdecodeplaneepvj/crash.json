{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n#include <cstddef>\\n#include <cstdint>\\n#include <vector>\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    std::vector<uint8_t> work_data = stream.ConsumeBytes<uint8_t>(stream.remaining_bytes() / 2);\\n    if (work_data.empty()) {\\n      return 0;\\n    }\\n    uint32_t plane_size = stream.ConsumeIntegral<uint32_t>();\\n    if (plane_size > work_data.size()) {\\n        plane_size = work_data.size();\\n    }\\n\\n    MyLibRaw libraw;\\n    if (work_data.data() != nullptr && plane_size != 0) {\\n        try {\\n            libraw.crxDecodePlane(work_data.data(), plane_size);\\n        } catch (...) {\\n            return 0;\\n        }\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 4) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create an instance of LibRaw\\n    MyLibRaw processor;\\n\\n    // Extract 4 bytes to represent a 32 bit integer from the fuzz data\\n    uint32_t integer_to_decode = stream.ConsumeIntegral<uint32_t>();\\n\\n    // Use the remaining bytes as void pointer, use `data()` to get it\\n    std::vector<uint8_t> void_ptr_to_decode = stream.ConsumeRemainingBytes<uint8_t>();\\n    if (void_ptr_to_decode.empty()) {\\n        return 0;\\n    }\\n    void* void_data = (void*)void_ptr_to_decode.data();\\n\\n    // Check if the void_data is not null before calling the function\\n    if (void_data != nullptr) {\\n        try {\\n            processor.crxDecodePlane(void_data, integer_to_decode);\\n        } catch (...) {\\n            return 0;\\n        }\\n    }\\n\\n    return 0;   \\n}",
        "model": ""
    }

    ]
}