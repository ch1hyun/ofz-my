{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"http_parser.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0)\\n    return 0;\\n  \\n  // Get the last byte of data and use it as an index into the http_errno enum\\n  enum http_errno http_errno = (enum http_errno) (data[size-1] % HTTP_ERRNO__MAX);\\n\\n  // Call the function-under-test\\n  const char* result = http_errno_name(http_errno);\\n\\n  // Call the function http_errno_description as required by the error message\\n  const char* description = http_errno_description(http_errno);\\n\\n  (void)result; // The result is not used and this prevents a warning \\n  (void)description; // The description is not used and this prevents a warning \\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno)) {\\n    return 0;\\n  }\\n  enum http_errno httpErrorCode = *((enum http_errno *) data);\\n  if (httpErrorCode < 0 || httpErrorCode >= _HTTP_ERRNO_H) {\\n    return 0;\\n  }\\n  const char* description = http_errno_description(httpErrorCode);\\n  (void)description;  // ignore unused variable warning\\n  return 0;\\n}",
        "model": ""
    }

    ]
}