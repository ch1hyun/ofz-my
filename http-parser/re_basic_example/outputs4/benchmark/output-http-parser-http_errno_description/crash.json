{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size==0)\\n    return 0;\\n\\n  unsigned int v = data[0];\\n  if(v > HPE_UNKNOWN)\\n    v = HPE_UNKNOWN;\\n\\n  http_errno_description((enum http_errno)v);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <stdio.h>\\n\\nextern int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size == 0) {\\n    return 0;\\n  }\\n  \\n  http_parser *parser = malloc(sizeof(http_parser));\\n  http_parser_init(parser, HTTP_REQUEST);\\n  http_parser_execute(parser, &settings, (const char*)Data, Size);\\n\\n  // Call http_errno_description function\\n  const char *error_description = http_errno_description(parser->http_errno);\\n\\n  free(parser);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}