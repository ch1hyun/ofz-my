{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.87",
        "coverage_diff": "0.00396513898114043",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <tiffio.h>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  char *FileName, *Mode;\\n  size_t FileNameSize = Size / 2;\\n  size_t ModeSize = Size - FileNameSize;\\n  if (ModeSize < 1){\\n    return 0;\\n  }\\n  \\n  FileName = (char *)malloc(FileNameSize + 1);\\n  memcpy(FileName, Data, FileNameSize);\\n  FileName[FileNameSize] = '\\0';\\n\\n  Mode = (char *)malloc(ModeSize + 1);\\n  memcpy(Mode, Data + FileNameSize, ModeSize);\\n  Mode[ModeSize - 1] = '\\0';\\n\\n  TIFF* tif = TIFFOpen(FileName, Mode);\\n\\n  if (tif) {\\n  \t// Call TIFFClose() after TIFFOpen() to prevent resource leak\\n    TIFFClose(tif);\\n  }\\n\\n  free(FileName);\\n  free(Mode);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.003220417446611517",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  std::string data_str(reinterpret_cast<const char*>(data), size);\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  const std::string mode = fuzzed_data.ConsumeBytesAsString(2);\\n\\n  TIFF* tif = TIFFOpen(data_str.c_str(), mode.c_str());\\n  if (!tif) {\\n    return 0;\\n  }\\n  \\n  TIFFClose(tif);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}