{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.29",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <stdlib.h>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxDecodePlane;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  const uint32_t plane_param = stream.ConsumeIntegral<uint32_t>();\\n  const std::vector<uint8_t> buffer = stream.ConsumeRemainingBytes<uint8_t>();\\n\\n  if(buffer.empty()) {\\n    return 0; // Avoid calling crxDecodePlane with empty buffer\\n  }\\n\\n  MyLibRaw rawProcessor;\\n  uint8_t* bufferData = const_cast<uint8_t *>(buffer.data());\\n  if (bufferData != nullptr) {\\n    // Add a check to ensure the buffer size is sufficient for crxDecodePlane\\n    if (buffer.size() >= plane_param) {\\n      rawProcessor.crxDecodePlane(bufferData, plane_param);\\n    }\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    int myCrxDecodePlane(void *ptr, uint32_t size) {\\n        if (ptr == nullptr || size == 0) {\\n            return -1;\\n        }\\n        return this->crxDecodePlane(ptr, size);\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider stream(data, size);\\n  \\n  MyLibRaw libraw;\\n  \\n  // Assume a maximum plane buffer size of 2048 for memory safety\\n  // Set minimum size to be 1\\n  uint32_t plane_buffer_size = stream.ConsumeIntegralInRange<uint32_t>(1, 2048);\\n  \\n  std::vector<uint8_t> plane_buffer = stream.ConsumeBytes<uint8_t>(plane_buffer_size);\\n  \\n  if (plane_buffer.empty()) {\\n    return 0;\\n  }\\n  \\n  void* plane_ptr = static_cast<void*>(plane_buffer.data());\\n\\n  int ret = libraw.myCrxDecodePlane(plane_ptr, plane_buffer.size());\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}