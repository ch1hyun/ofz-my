{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"aconf.h\"\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"gmem.h\"\\n#include \"splash/Splash.h\"\\n#include \"splash/SplashBitmap.h\"\\n#include \"splash/SplashGlyphBitmap.h\"\\n#include \"splash/SplashFont.h\"\\n#include \"splash/SplashFontEngine.h\"\\n#include \"splash/SplashFontFile.h\"\\n#include \"splash/SplashFontFileID.h\"\\n#include \"splash/SplashPath.h\"\\n#include \"splash/SplashPattern.h\"\\n#include \"splash/SplashState.h\"\\n#include \"splash/SplashFont.h\"\\n#include \"splash/SplashTypes.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SecurityHandler.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    SplashColor paperColor;\\n    paperColor[0] = stream.ConsumeIntegral<uint8_t>();\\n    paperColor[1] = stream.ConsumeIntegral<uint8_t>();\\n    paperColor[2] = stream.ConsumeIntegral<uint8_t>();\\n    paperColor[3] = stream.ConsumeIntegral<uint8_t>();\\n\\n    SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n    \\n    PDFRectangle pageBox;\\n    GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gTrue);\\n    \\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double originX = stream.ConsumeFloatingPoint<double>();\\n    double originY = stream.ConsumeFloatingPoint<double>();\\n    \\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegralInRange<int>(0, 10);\\n    Unicode u[10];\\n\\n    std::vector<uint8_t> vect = stream.ConsumeBytes<uint8_t>(nBytes);\\n\\n    for(int i=0; i<nBytes; ++i){\\n        u[i] = vect[i];\\n    }\\n\\n    GBool possibly_bboxed_word = stream.ConsumeBool();\\n    GBool char_has_color = stream.ConsumeBool();\\n    GBool char_is_insert = stream.ConsumeBool();\\n\\n    splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, nBytes, possibly_bboxed_word, char_has_color, char_is_insert);\\n    \\n    delete state;\\n    delete splashOut;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <xpdf/SplashOutputDev.h>\\n#include <xpdf/GfxState.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Initialize necessary variables\\n    GfxState *state;\\n    double x, y, dx, dy, originX, originY;\\n    CharCode code;\\n    int nBytes;\\n    Unicode *u;\\n    GBool charExists;\\n    GBool dRight, dDown;\\n\\n    // Call the function\\n    SplashOutputDev::drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, Size, charExists, dRight, dDown);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}