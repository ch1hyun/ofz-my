{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.66",
        "coverage_diff": "0.00440251572327044",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <http_parser.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    http_parser parser;\\n    http_parser_init(&parser, HTTP_BOTH);\\n\\n    uint8_t pause_option = data[0];\\n\\n    http_parser_pause(&parser, pause_option % 2 == 0);\\n\\n    // Add the missing code to utilize the function under test\\n    http_parser_execute(&parser, NULL, (const char*)data, size);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/http-parser/http_parser.h\"\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    // Empty settings\\n    http_parser_settings settings;\\n    memset(&settings, 0, sizeof(http_parser_settings));\\n    http_parser parser;\\n    http_parser_init(&parser, HTTP_BOTH);\\n  \\n    const char* data_char = (const char*)data;\\n    http_parser_execute(&parser, &settings, data_char, size);\\n\\n    // Call the http_parser_pause function as required by the error message\\n    http_parser_pause(&parser, 1);\\n  \\n    return 0;\\n}",
        "model": ""
    }

    ]
}