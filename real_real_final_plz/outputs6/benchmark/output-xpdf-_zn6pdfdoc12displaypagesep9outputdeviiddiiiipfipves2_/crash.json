{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/01/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include the header file for PDFDoc class\\n#include \"OutputDev.h\" // Include the header file for OutputDev class\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages function\\n    OutputDev *outputDev = nullptr; // Initialize with a non-NULL value\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool showCoverPage = stream.ConsumeBool();\\n    GBool showFirstPage = stream.ConsumeBool();\\n    GBool showLastPage = stream.ConsumeBool();\\n    GBool (*abortCheckCbk)(void *) = nullptr; // Initialize with a non-NULL value\\n    void *userData = nullptr; // Initialize with a non-NULL value\\n\\n    // Call the function-under-test PDFDoc::displayPages\\n    GooString fileName(\"\"); // Create an empty GooString\\n    PDFDoc pdfDoc(&fileName); // Pass the GooString to the constructor\\n    pdfDoc.displayPages(outputDev, page, numPages, scaleX, scaleY, rotation, showCoverPage, showFirstPage, showLastPage, abortCheckCbk, userData);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    OutputDev* outputDev = reinterpret_cast<OutputDev*>(0x12345678); // Example address, not NULL\\n    int int1 = stream.ConsumeIntegral<int>();\\n    int int2 = stream.ConsumeIntegral<int>();\\n    double double1 = stream.ConsumeFloatingPoint<double>();\\n    double double2 = stream.ConsumeFloatingPoint<double>();\\n    int int3 = stream.ConsumeIntegral<int>();\\n    GBool gBool1 = stream.ConsumeBool();\\n    GBool gBool2 = stream.ConsumeBool();\\n    GBool gBool3 = stream.ConsumeBool();\\n    void* infiniteLoop = reinterpret_cast<void*>(0x87654321); // Example address, not NULL\\n    void* voidPtr = reinterpret_cast<void*>(0xabcdef01); // Example address, not NULL\\n\\n    // Define the callback function\\n    GBool abortCheckCbk(void*) {\\n        return gTrue; // Return true for fuzzing purposes\\n    }\\n\\n    // Call the function-under-test\\n    PDFDoc pdfDoc(nullptr); // Pass nullptr for fileNameA to use the correct constructor\\n    pdfDoc.displayPages(outputDev, int1, int2, double1, double2, int3, gBool1, gBool2, gBool3, abortCheckCbk, voidPtr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}