{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n#include \"GfxFont.h\"\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  const int numArgsConsumed = 2;\\n  if (size < numArgsConsumed) {\\n    return 0;\\n  }\\n\\n  int startIndex = 0;\\n  std::vector<uint8_t> dictData = stream.ConsumeBytes<uint8_t>(size);\\n  Object dict;\\n  dict.initNull();\\n  startIndex++;\\n\\n  int numArgs = stream.ConsumeIntegralInRange<int>(0, 1000); // Limit the size of numArgs\\n  startIndex++;\\n\\n  std::vector<Object> args(numArgs);\\n  for(int i = 0; i < numArgs; i++) {\\n    Object obj;\\n    obj.initNull();\\n    args[i] = obj;\\n  }\\n\\n  if(startIndex > size)\\n    return 0;\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  Ref ref;\\n  Dict *dictObj = new Dict(NULL);\\n  GfxFontDict *gfxFontDict = new GfxFontDict(NULL, &ref, dictObj);\\n  GString *fileName = new GString(\"dummy.pdf\");\\n  PDFDoc *doc = new PDFDoc(fileName, NULL, NULL);\\n  \\n  // Initialize the necessary parameters for Gfx\\n  PDFRectangle *mediaBox = new PDFRectangle();\\n  OutputDev *out = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse);\\n  out->startDoc(doc->getXRef());\\n  Gfx *gfx = new Gfx(doc, out, NULL, mediaBox, mediaBox, NULL, NULL);\\n  \\n  // gfx->opSetExtGState(&args[0], numArgs); // opSetExtGState is a private member of Gfx, so it cannot be called directly.\\n  \\n  delete gfx;\\n  delete doc;\\n  delete globalParams;\\n  delete dictObj;\\n  delete out;\\n  delete mediaBox;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.06",
        "coverage_diff": "0.00032069012514932135",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1, 3);\\n\\n  std::vector<unsigned char> payload = fdp.ConsumeRemainingBytes<unsigned char>();\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream((char*)payload.data(), 0, payload.size(), &obj);\\n  \\n  PDFDoc doc(str);\\n  \\n  // There isn't a way to create a valid `Gfx` instance because it depends on a `PDFDoc` instance and other factors that can't be controlled with a fuzzer.\\n  // Gfx gfx\\n  int i = 0;\\n  int j = i+1;\\n  // We can't construct a valid `Object` instance because it depends on a `PDFDoc` instance.\\n  // args[i] = ...;\\n  // gfx.opSetExtGState(args[j], numArgs);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}