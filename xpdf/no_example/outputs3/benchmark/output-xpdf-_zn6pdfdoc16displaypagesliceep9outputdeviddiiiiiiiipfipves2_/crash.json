{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.87",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n#include <splash/SplashBitmap.h>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  int pageNum = fdp.ConsumeIntegral<int>();\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    PDFDoc doc(stream);\\n    if (doc.isOk() == gTrue) {\\n      doc.getNumPages();\\n      doc.getOutline();\\n      doc.getStructTreeRoot();\\n      doc.getXRef();\\n      doc.okToPrint(gTrue);\\n      doc.okToCopy(gTrue);\\n      doc.okToChange(gTrue);\\n      doc.okToAddNotes(gTrue);\\n      doc.isLinearized();\\n      doc.getPDFVersion();\\n\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n      splashOut->startDoc(doc.getXRef());\\n      doc.displayPageSlice(splashOut, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n\\n      delete splashOut;\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.69",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\n#define maxSize 2500000\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size){\\n    FuzzedDataProvider fdp(data, size);\\n\\n    double hdpi = fdp.ConsumeFloatingPoint<double>();\\n    double vdpi = fdp.ConsumeFloatingPoint<double>();\\n    int rotate = fdp.ConsumeIntegral<int>();\\n    int sliceX = fdp.ConsumeIntegral<int>();\\n    int sliceY = fdp.ConsumeIntegral<int>();\\n    int sliceW = fdp.ConsumeIntegral<int>();\\n    int sliceH = fdp.ConsumeIntegral<int>();\\n    bool crop = fdp.ConsumeBool();\\n    bool printing = fdp.ConsumeBool();\\n    bool useMediaBox = fdp.ConsumeBool();\\n    Object xpdf_obj;\\n    xpdf_obj.initNull();\\n    \\n    std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n    BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n    globalParams = new GlobalParams(nullptr);\\n    globalParams->setErrQuiet(1);\\n    globalParams->setupBaseFonts(nullptr);\\n    char yes[] = \"yes\";\\n    globalParams->setEnableFreeType(yes);\\n    Page *pg;\\n\\n    PDFDoc *doc = new PDFDoc(stream, nullptr, nullptr, nullptr);\\n    if (!doc->isOk()) {\\n        delete doc;\\n        delete globalParams;\\n        return 0;\\n    }\\n    SplashColor paperColor = {0xff, 0xff, 0xff};\\n    SplashOutputDev *splashOut;\\n    splashOut = new SplashOutputDev(splashModeBGR8, 1, gFalse, paperColor);\\n\\n    if (rotate != 90 && rotate != 180 && rotate != 270)\\n        rotate = 0;\\n\\n    // process the page(s)\\n    if (size < maxSize) {\\n        int pageNum = fdp.ConsumeIntegral<int>();\\n            \\n        int numPages = doc->getNumPages();\\n\\n        if (numPages == 0)\\n        {\\n            delete globalParams;\\n            return 0;\\n        }\\n\\n        doc->displayPageSlice(splashOut, pageNum, hdpi, vdpi, rotate, useMediaBox, crop, printing, sliceX, sliceY,\\n                              sliceW, sliceH);\\n    }\\n    delete splashOut;\\n    delete doc;\\n    delete globalParams;\\n    return 0;\\n}",
        "model": ""
    }

    ]
}