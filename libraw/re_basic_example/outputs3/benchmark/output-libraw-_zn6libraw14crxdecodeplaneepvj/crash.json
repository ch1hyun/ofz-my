{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.29",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstdint>\\n#include <cstdio>\\n#include <cstdlib>\\n\\n#include \"libraw.h\"\\n\\nclass DerivedRaw : public LibRaw {\\npublic:\\n    int publicCrxDecodePlane(void *p, uint32_t planeNumber) {\\n        if (p == nullptr) {\\n            return -1;\\n        }\\n        return crxDecodePlane(p, planeNumber);\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(uint32_t)) // Not enough data to proceed\\n    return 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n  uint32_t num = stream.ConsumeIntegral<uint32_t>();\\n  auto remaining_bytes = stream.ConsumeRemainingBytes<uint8_t>();\\n\\n  if (remaining_bytes.size() == 0) {\\n    return 0;\\n  }\\n\\n  // Initialize LibRaw processor\\n  DerivedRaw rawProcessor;\\n\\n  // Check if the buffer is enough for the planeNumber\\n  if (num > remaining_bytes.size()) {\\n    return 0;\\n  }\\n\\n  rawProcessor.publicCrxDecodePlane(remaining_bytes.data(), num);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.14",
        "coverage_diff": "2.707312450929962e-05",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nconstexpr uint8_t MAX_BYTES_TO_CONSUME = 255;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  uint8_t param1_length = fuzzed_data.ConsumeIntegralInRange<uint8_t>(1, MAX_BYTES_TO_CONSUME);\\n  \\n  auto param1_buffer = fuzzed_data.ConsumeBytes<uint8_t>(param1_length);\\n  auto param2 = fuzzed_data.ConsumeIntegral<uint32_t>();\\n  void *param1 = param1_buffer.data();\\n  \\n  if(param1 == nullptr)\\n    return 0;\\n    \\n  LibRaw RawProcessor;\\n\\n  // As the crxDecodePlane function is protected, we cannot directly call it\\n  // Instead, we will use the public function that uses it internally\\n  RawProcessor.open_buffer(param1, param1_length);\\n  RawProcessor.unpack();\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}