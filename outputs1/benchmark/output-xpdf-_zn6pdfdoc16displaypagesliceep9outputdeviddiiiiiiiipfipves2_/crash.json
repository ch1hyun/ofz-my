{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include \"GString.h\" // Include the header file where GString is defined\\n#include \"PDFDoc.h\" // Assuming PDFDoc is defined in PDFDoc.h\\n\\n// Assuming these types are defined somewhere in the actual codebase.\\nclass OutputDev {};\\ntypedef int GBool; // Reintroducing GBool as it is needed\\nstruct DW_TAG_subroutine_typeInfiniteLoop {};\\n\\n// Dummy abort check callback function\\nGBool abortCheckCallback(void *data) {\\n    return 0; // Always return false (0)\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an instance of OutputDev\\n    OutputDev outputDev;\\n\\n    // Consume inputs\\n    int pageNumber = fuzzed_data.ConsumeIntegral<int>();\\n    double x1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y1 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int width = fuzzed_data.ConsumeIntegral<int>();\\n    GBool flag1 = fuzzed_data.ConsumeBool() ? 1 : 0; // Convert bool to int\\n    GBool flag2 = fuzzed_data.ConsumeBool() ? 1 : 0; // Convert bool to int\\n    GBool flag3 = fuzzed_data.ConsumeBool() ? 1 : 0; // Convert bool to int\\n    int param1 = fuzzed_data.ConsumeIntegral<int>();\\n    int param2 = fuzzed_data.ConsumeIntegral<int>();\\n    int param3 = fuzzed_data.ConsumeIntegral<int>();\\n    int param4 = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Create a DW_TAG_subroutine_typeInfiniteLoop instance\\n    DW_TAG_subroutine_typeInfiniteLoop loop;\\n\\n    // Create an instance of PDFDoc with valid parameters\\n    GString *fileName = new GString(\"dummy.pdf\"); // Assuming GString has a constructor that takes a string\\n    PDFDoc pdfDoc(fileName); // Using the constructor that requires a GString pointer\\n\\n    // Call the function under test\\n    pdfDoc.displayPageSlice(&outputDev, pageNumber, x1, y1, width, flag1, flag2, flag3, param1, param2, param3, param4, &loop, abortCheckCallback);\\n\\n    // Clean up\\n    delete fileName; // Don't forget to delete the allocated GString\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "triage": "PROJECT",
        "coverage": "0.12",
        "coverage_diff": "1.6028723472462653e-05",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <chrono>\\n#ifndef iostream\\n#include <iostream>\\n#endif\\n#include <vector>\\n#include <cstdint>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include the header for PDFDoc\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\" // Include the header for OutputDev\\n#include \"/src/xpdf-4.05/goo/gfile.h\" // Include the header for GBool alternative\\n#include \"/src/xpdf-4.05/xpdf/Annot.h\" // Include an alternative header since DW_TAG_subroutine_type.h does not exist\\n#include \"/src/xpdf-4.05/goo/GString.h\" // Include GString header for PDFDoc constructor\\n\\n// Concrete subclass of OutputDev to implement pure virtual methods\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    virtual GBool upsideDown() override { return 0; }\\n    virtual GBool useDrawChar() override { return 0; }\\n    virtual GBool interpretType3Chars() override { return 0; }\\n};\\n\\nGBool abortCheckCallback(void *data) {\\n    return 0; // Simple callback that always returns false\\n}\\n\\n// The function that the fuzzing framework will call\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\nauto start_target = std::chrono::high_resolution_clock::now();\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create an OutputDev object\\n    MyOutputDev *output_dev = new MyOutputDev(); // Using the concrete subclass\\n\\n    // Consume parameters for the function\\n    int param1 = fuzzed_data.ConsumeIntegral<int>();\\n    double param2 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double param3 = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int param4 = fuzzed_data.ConsumeIntegral<int>();\\n    GBool param5 = fuzzed_data.ConsumeBool() ? 1 : 0; // Assuming GBool is an integer type\\n    GBool param6 = fuzzed_data.ConsumeBool() ? 1 : 0;\\n    GBool param7 = fuzzed_data.ConsumeBool() ? 1 : 0;\\n    int param8 = fuzzed_data.ConsumeIntegral<int>();\\n    int param9 = fuzzed_data.ConsumeIntegral<int>();\\n    int param10 = fuzzed_data.ConsumeIntegral<int>();\\n    int param11 = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Since DW_TAG_subroutine_type.h is not available, we assume a pointer to some type is acceptable\\n    void* param12 = nullptr; // Placeholder for the subroutine type\\n\\n    // Consume a random length string for the last parameter\\n    std::string param13 = fuzzed_data.ConsumeRandomLengthString(1024); // Limiting to 1024 bytes\\n\\n    // Validate the size of the consumed data\\n    if (param13.empty()) {\\n        delete output_dev;\\n        return 0; // Exit if the string is empty\\n    }\\n\\n    // Create a GString for PDFDoc constructor\\n    GString *fileNameA = new GString(param13.c_str());\\n\\n    // Call the function under test\\n    PDFDoc pdf_doc(fileNameA); // Using the constructor that requires a GString\\n\tauto start_func = std::chrono::high_resolution_clock::now();\\n    pdf_doc.displayPageSlice(output_dev, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, abortCheckCallback, param12);\\n\tauto end_func = std::chrono::high_resolution_clock::now();\\n\\n    // Clean up\\n    delete output_dev;\\n    delete fileNameA; // Clean up GString\\nauto end_target = std::chrono::high_resolution_clock::now();\\nstd::cout<<\"Target runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<\", Function runtime : \"<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}