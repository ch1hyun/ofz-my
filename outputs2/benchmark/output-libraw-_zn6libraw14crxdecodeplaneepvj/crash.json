{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.11",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"libraw.h\"\\n#include \"fuzzer/FuzzedDataProvider.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size);\\n\\nclass LibRawWrapper : public LibRaw {\\npublic:\\n    using LibRaw::crxDecodePlane;\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  std::vector<uint8_t> void_ptr_data = stream.ConsumeBytes<uint8_t>(sizeof(void *));\\n  // Casts array to pointer by taking the address of first array element.\\n  void *void_ptr = void_ptr_data.empty() ? nullptr : &void_ptr_data[0];\\n\\n  if (void_ptr == nullptr) {\\n    return 0;\\n  }\\n\\n  uint32_t uint32 = stream.ConsumeIntegral<uint32_t>();\\n\\n  // Check if the size of the buffer is correct before calling crxDecodePlane\\n  if (void_ptr_data.size() < uint32) {\\n    return 0;\\n  }\\n\\n  LibRawWrapper libraw_instance;\\n\\n  libraw_instance.crxDecodePlane(void_ptr, uint32);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw14crxdecodeplaneepvj",
        "sample": "02",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    int publicCrxDecodePlane(void *p, uint32_t planeNumber) {\\n        if(p == nullptr) return -1; // Ensure planeDataPtr is not null\\n        return this->crxDecodePlane(p, planeNumber);\\n    }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(uint32_t)) return 0; // Ensure there is enough data for planeNumber\\n    \\n    FuzzedDataProvider fuzzed_data(data, size);\\n    uint32_t planeNumber = fuzzed_data.ConsumeIntegral<uint32_t>();\\n    \\n    std::vector<uint8_t> remaining_bytes_vector = fuzzed_data.ConsumeRemainingBytes<uint8_t>();\\n    if (remaining_bytes_vector.empty()) return 0; // Ensure planeDataPtr is not null\\n    \\n    void* planeDataPtr = remaining_bytes_vector.data();\\n    \\n    MyLibRaw RawProcessor;\\n    RawProcessor.publicCrxDecodePlane(planeDataPtr, planeNumber);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}