{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"gmem.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"Dict.h\"\\n#include \"Ref.h\" // Include the header file for 'Ref'\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  // Initialize global parameters.\\n  globalParams = new GlobalParams(\"\");\\n  globalParams->setupBaseFonts(\"/usr/share/ghostscript/9.25/Resource/cidfmap\");\\n\\n  // Create a new SplashOutputDev instance.\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev *outputDev = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n  \\n  // Create PDFDoc instance.\\n  Object obj;\\n  MemStream *str = new MemStream(payload.data(), 0, payload.size(), &obj);\\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL, NULL);\\n\\n  // Create GfxState instance and call doUpdateFont.\\n  double hDPI = 300;\\n  double vDPI = 300;\\n  int page_num = 1;\\n  PDFRectangle *box = doc->getCatalog()->getPage(page_num)->getMediaBox();\\n  GfxState *state = new GfxState(hDPI, vDPI, box, rotate, gFalse);\\n  \\n  // Start the document.\\n  outputDev->startDoc(doc->getXRef());\\n  \\n  // Call the function under test.\\n  outputDev->updateFont(state);\\n\\n  delete doc;\\n  delete globalParams;\\n  delete outputDev;\\n  delete state;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/splash/Splash.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  std::string font_path = stream.ConsumeRandomLengthString();\\n  std::vector<float> font_size = {12.0, 13.0, 14.0};\\n\\n  // Setup global parameters\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n  globalParams->setupBaseFonts(font_path.c_str());\\n\\n  // Set-up the colorspace\\n  SplashColor color;\\n  color[0] = 255;\\n  color[1] = 0;\\n  color[2] = 0; // Red\\n  SplashColorPtr colorPtr;\\n  colorPtr = color; // point to red\\n\\n  SplashColorMode mode = splashModeRGB8;\\n  SplashOutputDev *splashOut = new SplashOutputDev(mode, 4, gFalse, colorPtr);\\n\\n  XRef xref;  // We do not provide any streams, so it won't be accessed.\\n  PDFRectangle defaultBox;\\n  defaultBox.x1 = 0;\\n  defaultBox.y1 = 0;\\n  defaultBox.x2 = 200;\\n  defaultBox.y2 = 200;\\n  GfxState *state = new GfxState(72.0, 72.0, &defaultBox, 0, gFalse);\\n  \\n  // Create objects referred in the methods\\n  Dict *fontDict = new Dict(&xref);\\n  Ref dummy;\\n  dummy.num = 0;\\n  dummy.gen = 0;\\n  const char* base14Name = \"Symbol\";\\n  GfxFont *font = GfxFont::makeFont(&xref, dummy, base14Name, fontDict);\\n  \\n  // Add font to the state\\n  state->setFont(font, font_size[stream.ConsumeIntegralInRange<size_t>(0, 2)]);\\n\\n  // Call target function\\n  splashOut->doUpdateFont(state);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}