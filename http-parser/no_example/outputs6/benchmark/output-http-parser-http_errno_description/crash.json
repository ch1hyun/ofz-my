{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // ensure we have at least one byte\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    // Convert the first byte in the data into an http_errno enum.\\n    // This is safe because the enum values are within the range for a byte.\\n    // Replace the undeclared identifier '_HTTP_ERRNO_H' with 'HTTP_ERRNO_MAX'\\n    enum http_errno err = data[0] % (HTTP_ERRNO_MAX + 1); // Get values only within HTTP_ERRNO values\\n\\n    // Call the function-to-test with the sanitized input data\\n    const char *desc = http_errno_description(err);\\n    // Fuzzing will detect if this function crashes\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.42",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <stdio.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1)\\n    return 0;\\n\\n  /* Interpret the first byte of the input as an enumeration value, it prevents an out-of-bounds\\n   * enumeration value and broker cast.  \\n   */\\n  enum http_errno err_no = (enum http_errno)(data[0] % (HPE_UNKNOWN + 1));\\n\\n  // Call test target function\\n  const char * description = http_errno_description(err_no);\\n\\n  // Check if the description is not NULL and it's not an empty string\\n  if (description != NULL && description[0] != '\\0') {\\n    // Do something with the description\\n    // For example, print it to the console\\n    printf(\"Description: %s\\\n\", description);\\n  }\\n\\n  // Feed the function with not null input\\n  if (size > 1) {\\n    http_parser parser;\\n    http_parser_init(&parser, HTTP_REQUEST);\\n    http_parser_execute(&parser, NULL, (const char *)(data + 1), size - 1);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}