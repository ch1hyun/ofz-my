{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"config.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  int firstPage = fdp.ConsumeIntegral<int>();\\n  int lastPage = fdp.ConsumeIntegral<int>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  globalParams = new GlobalParams(\"/usr/local/etc/xpdfrc\");\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *str = new MemStream(payload.data(), 0, payload.size(), &obj);\\n  PDFDoc *doc = new PDFDoc(str, NULL, NULL, NULL);\\n\\n  if (doc->isOk()) {\\n    SplashColor paperColor;\\n    paperColor[0] = paperColor[1] = paperColor[2] = 0xff;\\n    SplashOutputDev *splash = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n    splash->startDoc(doc->getXRef());\\n    doc->displayPages(splash, firstPage, lastPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL, NULL);\\n    delete splash;\\n  }\\n\\n  delete doc;\\n  delete str; // Moved this line here\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.74",
        "coverage_diff": "0.0012987533571170882",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fdp(data, size);\\n\\n  double hDPI = fdp.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  double vDPI = fdp.ConsumeFloatingPointInRange<double>(0.0, 1000.0);\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeBool();\\n  GBool crop = fdp.ConsumeBool();\\n  GBool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream = new MemStream(payload.data(),  0, payload.size(), &obj);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    GString *fileName = new GString(payload.data(), payload.size());\\n    doc = new PDFDoc(fileName);\\n    if (doc->isOk()) {\\n      doc->displayPages(NULL, 1, doc->getNumPages(), hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL, NULL);\\n    }\\n  } catch (...) {\\n  }\\n  \\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}