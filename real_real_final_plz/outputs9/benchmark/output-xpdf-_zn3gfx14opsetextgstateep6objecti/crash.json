{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.cc\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    Object obj;\\n    size_t obj_size = stream.ConsumeIntegralInRange<size_t>(sizeof(Object), 1024);\\n    if (obj_size != sizeof(Object)) {\\n        return 0;\\n    }\\n    stream.ConsumeData(&obj, obj_size);\\n\\n    int param = stream.ConsumeIntegral<int>();\\n\\n    GString fileName(\"\");\\n    PDFDoc doc(&fileName);\\n    OutputDev out;\\n    Dict resDict;\\n\\n    Gfx gfx(&doc, &out, &resDict, nullptr, nullptr, nullptr, nullptr);\\n\\n    Object objArray[1] = {obj};\\n    gfx.opSetExtGState(objArray, param);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n#include \"XRef.h\" // Include XRef header for Dict constructor\\n#include \"BaseStream.h\" // Include BaseStream header for XRef constructor\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return gTrue; }\\n    GBool useDrawChar() override { return gTrue; }\\n    GBool interpretType3Chars() override { return gTrue; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    Object obj;\\n    Object *obj_ptr = &obj;\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    PDFDoc pdfDoc((GString*)\"dummy.pdf\"); // Dummy file name\\n    DummyOutputDev outputDev; // Using a dummy OutputDev implementation\\n    BaseStream baseStream; // Create a dummy BaseStream object for XRef constructor\\n    XRef xref(&baseStream, gTrue); // Create XRef object with a dummy BaseStream and repair flag\\n    Dict resDict(&xref); // Pass XRef object to Dict constructor\\n    PDFRectangle box;\\n    PDFRectangle cropBox;\\n\\n    Gfx gfx(&pdfDoc, &outputDev, &resDict, &box, &cropBox);\\n    gfx.opSetExtGState(obj_ptr, value);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}