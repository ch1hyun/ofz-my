{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.85",
        "coverage_diff": "0.00515509376177534",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode c = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegralInRange<int>(1, sizeof(Unicode));\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  GBool black = fdp.ConsumeBool();\\n  GBool gray = fdp.ConsumeBool();\\n  GBool rgb = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor, gTrue, gFalse);\\n  \\n  // Fix: Call the target function drawChar in the fuzz target LLVMFuzzerTestOneInput\\n  // Add an additional argument to the drawChar function call\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, c, nBytes, &u, nBytes, black, gray, rgb);\\n\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <png.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 3)\\n        return 0;\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double originX = stream.ConsumeFloatingPoint<double>();\\n    double originY = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    int uLen = stream.ConsumeIntegral<int>();\\n    GBool u = stream.ConsumeIntegral<GBool>();\\n    GBool fontType3 = stream.ConsumeIntegral<GBool>();\\n    GBool type3D0 = stream.ConsumeIntegral<GBool>();\\n    Unicode uval = stream.ConsumeIntegral<Unicode>();\\n\\n    globalParams = new GlobalParams(NULL);\\n    globalParams->setupBaseFonts(NULL);\\n\\n    GString *s = new GString(\"password\");\\n    PDFDoc *doc = NULL;\\n    try {\\n        doc = new PDFDoc(new GString(\"valid.pdf\"), s, s);\\n        SplashColor paperColor = {0, 0, 0};\\n        SplashOutputDev *splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor);\\n        splashOut->startDoc(doc->getXRef());\\n        if (doc->getNumPages() > 0) {\\n            PDFRectangle *mediaBox = doc->getCatalog()->getPage(1)->getMediaBox();\\n            GfxState *state = new GfxState(72, 72, mediaBox, 0, gTrue);\\n            Unicode *u = new Unicode[uLen];\\n            splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, fontType3, type3D0, gFalse);\\n        }\\n    } catch (...) {\\n        delete s;\\n        delete doc;\\n        return 0;\\n    }\\n    delete s;\\n    delete doc;\\n    return 0;\\n}",
        "model": ""
    }

    ]
}