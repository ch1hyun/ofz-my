{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "42.11",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  if (size < 3) {\\n    return 0;\\n  }\\n\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1, 3);\\n\\n  std::vector<Object> args(numArgs);\\n  for (int idx = 0; idx < numArgs; idx++) {\\n    args[idx].initNull();\\n  }\\n\\n  // In order for opSetExtGState to work, the args array should contain Ref type objects that can be found in the PDFDoc catalog.\\n  // In this context it's not possible because the PDFDoc instance cannot be controlled and hence we can't add objects in it's `xref` atrribute.\\n  // Gfx gfx(doc.getCatalog(), pdf_out, 0, 0, 0, 0, 0, 0, gFalse);\\n  // gfx.opSetExtGState(args, numArgs);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"PDFDoc.h\"\\n#include \"Gfx.h\"\\n#include \"OutputDev.h\"\\n#include \"Object.h\"\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n\\n    int numArgs = fdp.ConsumeIntegral<int>();\\n    std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n    Object dict;\\n    dict.initNull();\\n    MemStream *stream = new MemStream(payload.data(), 0, payload.size() - numArgs, &dict);\\n\\n    GlobalParams *globalParams = new GlobalParams(nullptr);\\n    globalParams->setErrQuiet(1);\\n    globalParams->setPrintCommands(1);\\n    globalParams->setupBaseFonts(nullptr);\\n\\n    PDFDoc *doc = new PDFDoc(new GString(stream->getFileName()), nullptr, nullptr, nullptr);\\n\\n    if (!doc) {\\n        delete globalParams;\\n        return 0;\\n    }\\n\\n    GfxState *state = new GfxState(doc->getPageMediaWidth(1), doc->getPageMediaHeight(1), nullptr, 0, gFalse);\\n    Object obj;\\n    obj.initInt(numArgs);\\n    Gfx *gfx = new Gfx(doc, nullptr, 1, nullptr, nullptr, nullptr, 1, 1, 1, gFalse, gFalse, nullptr, state, gFalse);\\n    \\n    gfx->opSetExtGState(&obj, numArgs);\\n    \\n    delete gfx;\\n    delete state;\\n    delete doc;\\n    delete globalParams;\\n  \\n    return 0;\\n}",
        "model": ""
    }

    ]
}