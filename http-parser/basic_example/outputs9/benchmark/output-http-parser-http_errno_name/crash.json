{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#define MAX_HTTP_ERRNO 23 // Maximum value for http_errno enum\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    for (unsigned int i = 0; i < size; i++) {\\n        http_errno_name((enum http_errno)(data[i] % MAX_HTTP_ERRNO));\\n    }\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno)) {\\n    return 0;\\n  }\\n  enum http_errno httpError;\\n  memcpy((void *) &httpError, data, sizeof(enum http_errno));\\n  \\n  const char * httpErrorName = http_errno_name(httpError);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}