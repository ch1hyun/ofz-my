{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size == 0) return 0;\\n  \\n  // reduce the fuzzed data to a valid h_errno value\\n  uint8_t h_errno = data[0] % (_HTTP_ERRNO_H + 1); // _HTTP_ERRNO_H is the maximum value of http_errno\\n  \\n  // call the function-under-test\\n  const char *description = http_errno_description((enum http_errno)h_errno);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <http_parser.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  if (size < sizeof(unsigned int))\\n    return 0;\\n\\n  unsigned int err_no;\\n  memcpy(&err_no, data, sizeof(unsigned int));\\n  err_no = err_no % (HTTP_ERRNO_MAX + 1);\\n\\n  http_errno_description((enum http_errno)err_no);\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    }

    ]
}