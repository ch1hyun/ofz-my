{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GlobalParams.h\"\\n#include \"GList.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"SplashBitmap.h\"\\n#include \"OutputDev.h\"\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"Stream.h\"\\n#include <string.h>\\n#include \"PDFDocFactory.h\"\\n#include \"Object.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3) {\\n    return 0;\\n  }\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // create resource dict\\n  Object resourceObj;\\n  XRef* xref = new XRef();\\n  resourceObj.initDict(xref);\\n\\n  Object args[1];\\n\\n  int lastOp;\\n  GList* objects = new GList();\\n  for (int i = 0; i < 1; i++) {\\n    // create an object\\n    Object obj;\\n    obj.initInt(stream.ConsumeIntegral<int>());\\n    objects->append(&obj);\\n  }\\n  \\n  PDFDoc* doc = NULL;\\n  GooString* str = new GooString();\\n  GooString* ownerPW = new GooString();\\n  GooString* userPW = new GooString();\\n  doc = PDFDocFactory().createPDFDoc(str, gFalse, gFalse, ownerPW, userPW);\\n  Object* subject = new Object();\\n  \\n  OutputDev* outputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, gPaperColor);\\n  Gfx* gfx = new Gfx(doc, outputDev, resourceObj.getDict(), NULL, NULL, gFalse);\\n  \\n  gfx->opSetExtGState(objects->get(0), lastOp);\\n\\n  delete gfx;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <Object.h>\\n#include <Gfx.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <PDFDoc.h>\\n#include <OutputDev.h>\\n#include <XRef.h>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Initialize args\\n  int numArgs = stream.ConsumeIntegralInRange<int>(1, 10); // Limit the range to prevent stack overflow\\n  int intval = stream.ConsumeIntegral<int>();\\n\\n  Object obj[numArgs];\\n  if(numArgs > 0) {\\n    std::string str = stream.ConsumeRandomLengthString();\\n    obj[0].initName(str.c_str());\\n    if(numArgs > 1) {\\n      for(int i=1;i<numArgs;i++) {\\n        obj[i].initNull();\\n      }\\n    }\\n  }\\n\\n  // Call function to test\\n  BaseStream *strA = NULL;\\n  GBool repair = gFalse;\\n  XRef *xref = new XRef(strA, repair);\\n  Dict *dict = new Dict(xref);\\n  GString *fileNameA = NULL;\\n  PDFDoc *doc = new PDFDoc(fileNameA, NULL, NULL, NULL);\\n  PDFRectangle *pageBox = NULL;\\n  GfxState *state = new GfxState(72, 72, pageBox, 0, gFalse);\\n  Gfx *gfx = new Gfx(doc, NULL, dict, NULL, NULL, NULL, NULL);\\n  \\n  // As the function opSetExtGState is private, it cannot be accessed directly.\\n  // We need to call a public function that internally calls opSetExtGState.\\n  // Assuming such a function is execOp, we can call it as follows:\\n  // gfx->execOp(&obj[0], numArgs);\\n\\n  // Cleanup\\n  delete gfx;\\n  delete state;\\n  delete doc;\\n  delete xref;\\n  delete dict;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}