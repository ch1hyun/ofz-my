{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <tiffio.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    FuzzedDataProvider fuzzed_data(Data, Size);\\n\\n    // Creating test-file on disk\\n    \\n    const uint8_t *p_file_data_buffer = Data;\\n    size_t len = fuzzed_data.ConsumeIntegralInRange<size_t>(0, Size);\\n    std::string testfile = \"/tmp/fuzzing_tiff_file.tiff\";\\n    FILE *fp;\\n\\n    fp = fopen(testfile.c_str(), \"wb\");\\n    if(!fp) {\\n      return 0;\\n    }\\n    fwrite(p_file_data_buffer, len, 1, fp);\\n    fclose(fp);\\n\\n    TIFF *output_tiff;\\n    int filedesc = open(testfile.c_str(), O_RDONLY);\\n\\n    std::string mode = fuzzed_data.ConsumeRandomLengthString(3);\\n\\n    TIFFOpenOptions options;\\n    output_tiff = TIFFFdOpenExt(filedesc, \"fuzzer\", mode.c_str(), &options);\\n    if(output_tiff != NULL){\\n        TIFFClose(output_tiff);\\n    }\\n\\n    unlink(testfile.c_str());\\n    close(filedesc);\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <cstdio>\\n#include <tiffio.h>\\n#include <fcntl.h>\\n#include <sys/stat.h>\\n#include <sys/types.h>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  int fd;\\n  constexpr char filename[] = \"/dev/shm/fuzz_tiff\";\\n\\n  if (mkfifo(filename, 0666) == -1) {\\n    return 0;\\n  }\\n  \\n  pid_t f = fork();\\n  \\n  if (f == 0) {\\n    FILE* fifo = fopen(filename, \"w\");\\n    fwrite(Data, sizeof(uint8_t), Size, fifo);\\n    fclose(fifo);\\n    return 0;\\n  }\\n  \\n  fd = open(filename, O_RDONLY);\\n\\n  if (fd == -1) {\\n    return 0;\\n  }\\n\\n  TIFF* out = TIFFFdOpen(fd, \"r\");\\n  TIFFClose(out);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}