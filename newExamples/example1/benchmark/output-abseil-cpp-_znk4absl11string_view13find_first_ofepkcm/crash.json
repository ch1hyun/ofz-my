{
    "samples": [

    {
        "benchmark": "output-abseil-cpp-_znk4absl11string_view13find_first_ofepkcm",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "21.79",
        "coverage_diff": "0.0028214429665457475",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstdint>\\n#include <string>\\n\\n#include \"absl/strings/string_view.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  absl::string_view::size_type sv_size = fuzzed_data.ConsumeIntegralInRange<size_t>(0, size);\\n  std::string sv_string = fuzzed_data.ConsumeBytesAsString(sv_size);\\n  absl::string_view sv(sv_string);\\n\\n  std::string pattern = fuzzed_data.ConsumeRemainingBytesAsString();\\n  const char* pattern_ptr = pattern.c_str();\\n\\n  sv.find_first_of(pattern_ptr, 0);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-abseil-cpp-_znk4absl11string_view13find_first_ofepkcm",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "10.50",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <string>\\n#include \"absl/strings/string_view.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  const std::string input_str = fuzzed_data.ConsumeRemainingBytesAsString();\\n  absl::string_view str_view(input_str);\\n\\n  if (str_view.size() == 0) {\\n    return 0;\\n  }\\n\\n  const size_t offset = fuzzed_data.ConsumeIntegralInRange<size_t>(0, str_view.size() - 1);\\n  const std::string chars = fuzzed_data.ConsumeRandomLengthString();\\n  if (chars.empty()) {\\n    return 0;\\n  }\\n \\n  str_view.find_first_of(chars.c_str(), offset);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}