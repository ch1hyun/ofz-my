{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.60",
        "coverage_diff": "0.003808164705127794",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n\\nstruct InfiniteLoop {\\n    int field1;\\n    int field2;\\n    double field3;\\n};\\n\\nGBool abortCheckCbk(void *data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Initialise non-integer parameters.\\n    SplashColor paperColor;\\n    paperColor[0] = 255;\\n    paperColor[1] = 255;\\n    paperColor[2] = 255;\\n\\n    // Initialize GlobalParams before creating SplashOutputDev\\n    globalParams = new GlobalParams(\"dummy.cfg\");\\n\\n    SplashOutputDev *outputDev = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n    GBool gBool1 = fuzzed_data_provider.ConsumeBool();\\n    GBool gBool2 = fuzzed_data_provider.ConsumeBool();\\n    GBool gBool3 = fuzzed_data_provider.ConsumeBool();\\n    void *displayParam = static_cast<void*>(outputDev); \\n\\n    // Initialise data for infinite loop object.\\n    InfiniteLoop infLoop;\\n    infLoop.field1 = fuzzed_data_provider.ConsumeIntegral<int>();\\n    infLoop.field2 = fuzzed_data_provider.ConsumeIntegral<int>();\\n    infLoop.field3 = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n\\n    if (!fuzzed_data_provider.remaining_bytes()) {\\n    \tdelete outputDev;\\n        delete globalParams;\\n    \treturn 0;\\n    }\\n\\n    // Consume the data to integer type parameters.\\n    int intParam1 = fuzzed_data_provider.ConsumeIntegral<int>();\\n    double doubleParam1 = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double doubleParam2 = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    int intParam2 = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int intParam3 = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int intParam4 = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int intParam5 = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int intParam6 = fuzzed_data_provider.ConsumeIntegral<int>();\\n\\n\\n    // Function Call to fuzz target.\\n    GString fileNameA(\"dummy.pdf\");\\n    PDFDoc pdfDoc(&fileNameA); \\n    pdfDoc.displayPageSlice(outputDev, intParam1, doubleParam1, doubleParam2, intParam2, gBool1, gBool2, gBool3, intParam3, intParam4, intParam5, intParam6, abortCheckCbk, displayParam);\\n\\n    delete outputDev;\\n    delete globalParams;\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Create an instance of PDFDoc\\n    PDFDoc doc;\\n\\n    // Create an instance of OutputDev\\n    OutputDev output;\\n\\n    // Call the function with the fuzzed input\\n    doc.displayPageSlice(&output, 1, 1.0, 1.0, 0, gFalse, gFalse, gFalse, 0, 0, 0, 0, nullptr, nullptr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}