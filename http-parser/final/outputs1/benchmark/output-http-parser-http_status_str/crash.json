{
    "samples": [

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.88",
        "coverage_diff": "0.0018867924528301887",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include \"http_parser.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) return 0;\\n  \\n  // get a value for http_status from the input data\\n  int status = data[0];\\n  \\n  // call the function under test\\n  const char * status_str = http_status_str((enum http_status)status);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_status_str",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.28",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Define a possible range for DW_TAG_enumeration_typehttp_status enumeration (Considering existing HTTP status codes)\\n#define HTTP_STATUS_MIN 100\\n#define HTTP_STATUS_MAX 599\\n\\nextern const char * http_status_str(enum http_status);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    if(size<sizeof(int)) // Ensure enough data is supplied\\n        return 0;\\n    \\n    int status_raw;\\n    memcpy(&status_raw, data, sizeof(int));\\n\\n    //Check if parsed status is in fixed range\\n    if(status_raw < HTTP_STATUS_MIN || status_raw > HTTP_STATUS_MAX)\\n        return 0;\\n\\n    enum http_status status = (enum http_status)status_raw;\\n  \\n    // Here we call the function-under-test\\n    const char * str = http_status_str(status);\\n\\n    return 0;\\n}  ",
        "model": ""
    }

    ]
}