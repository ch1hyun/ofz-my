{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <xpdf/Page.h>\\n#include <xpdf/SplashOutputDev.h> \\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n\\n// Define a callback function for abort check\\nGBool abortCheckCallback(void *data) {\\n    return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    if (Size < 1) {\\n        return 0;\\n    }\\n    FuzzedDataProvider fuzzed_data(Data, Size);\\n    GString fileNameA(\"dummy\");\\n    PDFDoc pdf_doc(&fileNameA);\\n    SplashColorMode colorModeA = splashModeRGB8; \\n    int bitmapRowPadA = 4; \\n    GBool reverseVideoA = gFalse; \\n    SplashColor paperColorA; // Initialize a SplashColor object\\n    GBool bitmapTopDownA = gTrue; \\n    GBool allowAntialiasA = gTrue; \\n    SplashOutputDev output_dev(colorModeA, bitmapRowPadA, reverseVideoA, &paperColorA, bitmapTopDownA, allowAntialiasA); \\n    int page = fuzzed_data.ConsumeIntegral<int>();\\n    double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int rotate = fuzzed_data.ConsumeIntegral<int>();\\n    GBool useMediaBox = fuzzed_data.ConsumeBool();\\n    GBool crop = fuzzed_data.ConsumeBool();\\n    GBool printing = fuzzed_data.ConsumeBool();\\n    int sliceX = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceY = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceW = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceH = fuzzed_data.ConsumeIntegral<int>();\\n    void *callbackData = nullptr; \\n\\n    pdf_doc.displayPageSlice(&output_dev, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCallback, callbackData);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdlib.h>\\n#include <stdint.h>\\n#include <fstream>\\n#include \"GString.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  int num1 = fuzzed_data_provider.ConsumeIntegral<int>();\\n  double num2 = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double num3 = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  int num4 = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool bool1 = fuzzed_data_provider.ConsumeBool();\\n  GBool bool2 = fuzzed_data_provider.ConsumeBool();\\n  GBool bool3 = fuzzed_data_provider.ConsumeBool();\\n  int num5 = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int num6 = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int num7 = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int num8 = fuzzed_data_provider.ConsumeIntegral<int>();\\n  \\n  std::ofstream out(\"dummy.pdf\");\\n  out.write(reinterpret_cast<const char*>(data), size);\\n  out.close();\\n  \\n  GString fileName(\"dummy.pdf\");\\n  PDFDoc doc(&fileName);\\n  \\n  class MyOutputDev: public OutputDev {\\n    public:\\n      GBool upsideDown() { return gTrue; }\\n      GBool useDrawChar() { return gTrue; }\\n      GBool interpretType3Chars() { return gTrue; }\\n  };\\n  \\n  MyOutputDev output;\\n  if(doc.getNumPages() > 0){\\n    num1 = num1 % doc.getNumPages() + 1; // Ensure num1 is a valid page number\\n    doc.displayPageSlice(&output, num1, num2, num3, num4, bool1, bool2, bool3, num5, num6, num7, num8, nullptr, nullptr);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}