{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < sizeof(uint16_t)) {\\n    return 0;\\n  }\\n\\n  uint16_t raw_error_code;\\n  memcpy(&raw_error_code, data, sizeof(uint16_t));\\n  enum http_errno error_code = (enum http_errno) raw_error_code;\\n\\n  // Check if error_code is within the valid range\\n  if (error_code < 0 || error_code >= HTTP_ERRNO_MAX) {\\n    return 0;\\n  }\\n  \\n  const char *description = http_errno_description(error_code);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  const unsigned http_errno_max = 31; // Maximum HTTP error number as defined in http_parser.h\\n  unsigned fuzzed_errno = 0;\\n  if (size >= sizeof(unsigned)) {\\n    memcpy(&fuzzed_errno, data, sizeof(unsigned));\\n    fuzzed_errno = fuzzed_errno % (http_errno_max + 1);\\n  }\\n  const char* description = http_errno_description((enum http_errno)fuzzed_errno);\\n\\n  // Use the result to prevent the call from being optimized away\\n  if (description == NULL) return 0;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}