{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/NameToCharCode.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"OutputDev.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"Ref.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    GfxState *state = nullptr;\\n    double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n    CharCode code = fuzzed_data.ConsumeIntegral<CharCode>();\\n    int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n    Unicode *u = nullptr;\\n    int uLen = fuzzed_data.ConsumeIntegral<int>();\\n    bool d = fuzzed_data.ConsumeBool();\\n    bool box = fuzzed_data.ConsumeBool();\\n    bool charPos = fuzzed_data.ConsumeBool();\\n\\n    SplashColorMode colorModeA;\\n    int bitmapRowPadA;\\n    bool reverseVideoA;\\n    SplashColorPtr paperColorA;\\n\\n    SplashOutputDev splashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA);\\n    splashOutputDev.drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, d, box, charPos);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFRectangle.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  double hDPIA = 72.0;\\n  double vDPIA = 72.0;\\n  PDFRectangle pageBox;\\n  int rotateA = 0;\\n  GBool upsideDown = gFalse;\\n  GfxState gfx_state(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n  double dx = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double tOriginX = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double tOriginY = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  CharCode code = fuzzed_data_provider.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data_provider.ConsumeIntegral<int>();\\n  Unicode u = fuzzed_data_provider.ConsumeIntegral<Unicode>();\\n  int uLen = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool v = fuzzed_data_provider.ConsumeBool();\\n  GBool h = fuzzed_data_provider.ConsumeBool();\\n  GBool g = fuzzed_data_provider.ConsumeBool();\\n  \\n  SplashColorMode colorModeA = splashModeRGB8;\\n  int bitmapRowPadA = 4;\\n  GBool reverseVideoA = gFalse;\\n  SplashColorPtr paperColorA = nullptr;\\n  GBool bitmapTopDownA = gTrue;\\n  GBool allowAntialiasA = gTrue;\\n  SplashOutputDev splashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n  splashOutputDev.drawChar(&gfx_state, dx, dy, originX, originY, tOriginX, tOriginY, code, nBytes, &u, uLen, v, h, g);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}