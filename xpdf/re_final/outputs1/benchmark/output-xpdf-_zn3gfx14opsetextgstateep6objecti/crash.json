{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fdp(data, size);\\n    int int_val = fdp.ConsumeIntegral<int>();\\n\\n    // Create an instance of Gfx and Object to call the function\\n    XRef *xrefA = new XRef();\\n    PDFDoc *docA = new PDFDoc();\\n    OutputDev *outA = new OutputDev();\\n    Dict *resDict = new Dict(xrefA);\\n    PDFRectangle *box = new PDFRectangle();\\n    PDFRectangle *cropBox = new PDFRectangle();\\n    Gfx gfx(docA, outA, resDict, box, cropBox);\\n\\n    Object obj;\\n\\n    // Call the function with the fuzzed data\\n    // gfx.opSetExtGState(&obj, int_val); // This function is private and can't be accessed directly\\n\\n    // Clean up\\n    delete xrefA;\\n    delete docA;\\n    delete outA;\\n    delete resDict;\\n    delete box;\\n    delete cropBox;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Gfx.h\"\\n#include \"OutputDev.h\" // Include the library where 'OutputDev' is defined\\n#include \"XRef.h\" // Include the library where 'XRef' is defined\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  GString *fileNameA = new GString(\"dummy.pdf\");\\n  PDFDoc *docA = new PDFDoc(fileNameA);\\n  OutputDev *outA = new MyOutputDev(); // Assuming 'MyOutputDev' is a subclass of 'OutputDev'\\n  XRef *xrefA = new XRef(docA->getBaseStream(), gTrue); // Use the correct constructor for 'XRef'\\n  Dict *resDict = new Dict(xrefA);\\n  PDFRectangle *box = new PDFRectangle();\\n  PDFRectangle *cropBox = new PDFRectangle();\\n  auto gfx = std::make_unique<Gfx>(docA, outA, resDict, box, cropBox);\\n  Object obj;\\n  int num = fuzzed_data_provider.ConsumeIntegral<int>();\\n\\n  // gfx->opSetExtGState(&obj, num); // This line is commented out because 'opSetExtGState' is a private member of 'Gfx'\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}