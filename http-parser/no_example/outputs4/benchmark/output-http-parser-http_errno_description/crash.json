{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.44",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// This is a mock enumeration that could appear in your real source code\\nenum DW_TAG_enumeration_type{\\nHTTP_ERRNO_START = 1,\\nHTTP__ERRNO_END\\n};\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size == 0)\\n    return 0;\\n    \\n  // We will take a module by the total enum values to generate http_errno\\n  enum DW_TAG_enumeration_type http_errno = (data[0] % (HTTP__ERRNO_END - HTTP_ERRNO_START)) + HTTP_ERRNO_START;\\n  \\n  // Ensure that the function under test is invoked with non-null input\\n  const char *description = http_errno_description(http_errno);\\n  if (description != NULL) {\\n      // Do something with the description to ensure it is used and the function is effectively invoked\\n      printf(\"%s\\\n\", description);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_description",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(enum http_errno)) {\\n    return 0;\\n  }\\n\\n  enum http_errno error_type = *((enum http_errno*) data);\\n\\n  // Makes sure the http_errno is in the valid range of values\\n  if (error_type > 0 && error_type < HTTP_ERRNO_MAX) {\\n    const char * error_description = http_errno_description(error_type);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}