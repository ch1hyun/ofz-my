{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"OutputDev.h\"\\n#include \"FoFiType1.h\"\\n#include \"FoFiTrueType.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize GfxState pointer (not NULL)\\n    GfxState gfxState(96, 96, nullptr, 0, gFalse);\\n\\n    // Call the function-under-test with initialized parameters\\n    SplashOutputDev splashOutputDev(splashModeMono1, 0, gFalse, nullptr);\\n\\n    // Since doUpdateFont is a private member of SplashOutputDev, we can't directly call it.\\n    // Instead, we can use a public method that internally calls doUpdateFont.\\n    splashOutputDev.updateFont(&gfxState);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Gfx.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"Object.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\n// Include necessary headers for the functions causing undefined reference errors\\n#include \"gmem.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gfile.h\"\\n#include \"GString.h\"\\n#include \"gmem.h\"\\n#include \"GList.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"GHash.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object pointer\\n    GfxState *gfxState = reinterpret_cast<GfxState*>(0x12345678); // Dummy address\\n\\n    // Call the function-under-test\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeRGB8, 0, gFalse, nullptr); // Provide necessary arguments to the constructor\\n    splashOutputDev.startPage(1, gfxState); // Call startPage to initialize the output device\\n\\n    // As doUpdateFont is a private member, we can't call it directly\\n    // Let's call the public method that internally calls doUpdateFont\\n    splashOutputDev.updateFont(gfxState); // Call the function under test\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}