{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"Dict.h\"\\n#include \"Stream.h\"\\n\\n// Include the necessary headers for Dict and Stream classes\\n#include \"XRef.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object\\n    GfxState* gfxState = new GfxState(96, 96, nullptr, 0, false);\\n\\n    // Call the function-under-test with the initialized GfxState object\\n    SplashOutputDev splashOutputDev(SplashColorMode::splashModeRGB8, 0, false, nullptr);\\n    \\n    // Dummy objects to satisfy the function call\\n    Object obj;\\n    Dict dict(new XRef());\\n    Stream* str = nullptr; // Updated to nullptr to avoid including non-existent BaseStream.h\\n\\n    splashOutputDev.tilingPatternFill(gfxState, nullptr, &obj, &dict, 0, 0, nullptr, nullptr, 0, 0, 0, 0, 0.0, 0.0);\\n    splashOutputDev.drawImageMask(gfxState, &obj, str);\\n    splashOutputDev.drawImage(gfxState, &obj, str);\\n    splashOutputDev.drawMaskedImage(gfxState, &obj, str);\\n    splashOutputDev.drawSoftMaskedImage(gfxState, &obj, str, &obj, str);\\n    splashOutputDev.opiBegin(gfxState, &dict);\\n    splashOutputDev.opiEnd(gfxState, &dict);\\n    splashOutputDev.drawForm(Ref(0));\\n    splashOutputDev.beginStructureItem(\"tag\", 0, &dict);\\n    \\n    // Call the required function to satisfy the build error\\n    splashOutputDev.doUpdateFont(gfxState);\\n\\n    // Clean up\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"GfxState.h\"\\n#include \"Gfx.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"XRef.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy GfxState object\\n    GfxState *gfxState = new GfxState(96, 96, nullptr, 0, gFalse);\\n\\n    // Call the function-under-test with the dummy GfxState object\\n    SplashOutputDev splashOutputDev(gTrue, 0, nullptr, gTrue, gTrue); // Removed unnecessary arguments\\n    splashOutputDev.startDoc(nullptr); // Passing nullptr instead of new XRef()\\n    splashOutputDev.endDoc();\\n    splashOutputDev.startPage(1, gfxState);\\n    splashOutputDev.endPage();\\n    \\n    // Call the required function `doUpdateFont` to satisfy the build error\\n    // Since doUpdateFont is private, we can't call it directly. Instead, we can call a public function that internally calls doUpdateFont.\\n    splashOutputDev.updateFont(gfxState);\\n\\n    // Clean up the dummy GfxState object\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}