{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.29",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <vector>\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n  using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  MyLibRaw RawProcessor;\\n  int bpc = stream.ConsumeIntegral<int>();\\n  \\n  std::vector<unsigned char> buffer = stream.ConsumeRemainingBytes<unsigned char>();\\n  void* data_buffer = static_cast<void*>(buffer.data());\\n\\n  RawProcessor.crxLoadDecodeLoop(data_buffer, bpc);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw17crxloaddecodeloopepvi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.24",
        "coverage_diff": "0.00010829249803719848",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nclass MyLibRaw : public LibRaw {\\npublic:\\n    using LibRaw::crxLoadDecodeLoop;\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  if (fuzzed_data_provider.remaining_bytes() <= sizeof(int)) {\\n    // Not enough data for 'param' argument\\n    return 0;\\n  }\\n\\n  // 'param' value should be a valid signed integer\\n  int param = fuzzed_data_provider.ConsumeIntegral<int>();\\n \\n  // Create structure for void pointer data\\n  struct DataBag {\\n    int a;\\n    int b;\\n    int c;\\n    double d;\\n    char e;\\n  };\\n\\n  // Consume data to fill the structure\\n  DataBag bag;\\n  if (sizeof(DataBag) <= fuzzed_data_provider.remaining_bytes()) {\\n    fuzzed_data_provider.ConsumeData(reinterpret_cast<uint8_t*>(&bag), sizeof(DataBag));\\n  } else {\\n    // Not enough data for 'data' argument\\n    return 0;\\n  }\\n    \\n  MyLibRaw libRaw;\\n  // Function Call to fuzz target.\\n  libRaw.crxLoadDecodeLoop(&bag, param);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}