{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    virtual GBool upsideDown() { return gFalse; }\\n    virtual GBool useDrawChar() { return gTrue; }\\n    virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    if (Size < 1) {\\n        return 0;\\n    }\\n\\n    // Initialize PDFDoc and OutputDev objects\\n    GString fileName((char*)Data, Size);\\n    PDFDoc doc(&fileName);\\n    MyOutputDev dev;\\n\\n    // Convert Data to the appropriate types for the other parameters\\n    int startPage = 1;\\n    int endPage = 1;\\n    double hDPI = 72.0;\\n    double vDPI = 72.0;\\n    int rotate = 0;\\n    bool useMediaBox = false;\\n    bool crop = false;\\n    bool printing = false;\\n    void *loop = nullptr;\\n    void *continueOnTimeout = nullptr;\\n\\n    // Call the displayPages function\\n    doc.displayPages(&dev, startPage, endPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, loop, continueOnTimeout);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "Apologies, but the provided information is insufficient. There's no C++ code given in the question. Please provide the C++ fuzz harness code and the specific build error message to get a proper solution.",
        "model": ""
    }

    ]
}