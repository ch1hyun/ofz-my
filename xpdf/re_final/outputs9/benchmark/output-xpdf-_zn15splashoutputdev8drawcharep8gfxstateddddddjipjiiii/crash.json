{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n  SplashColorMode colorMode = splashModeRGB8;\\n  int bitmapRowPad = 4;\\n  GBool reverseVideo = gFalse;\\n  SplashColor paperColor;\\n  GBool bitmapTopDown = gTrue;\\n  GBool allowAntialias = gTrue;\\n  \\n  // Fix: Remove the extra argument from the SplashOutputDev constructor\\n  SplashOutputDev splash_output_dev(colorMode, bitmapRowPad, reverseVideo, paperColor, bitmapTopDown, allowAntialias);\\n\\n  double hDPIA = 72.0;\\n  double vDPIA = 72.0;\\n  int rotateA = 0;\\n  GBool upsideDown = gFalse;\\n\\n  double x = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double y = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double dx = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double origin_x = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double origin_y = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  CharCode char_code = fuzzed_data_provider.ConsumeIntegral<CharCode>();\\n  int n_bytes = fuzzed_data_provider.ConsumeIntegral<int>();\\n  Unicode u = fuzzed_data_provider.ConsumeIntegral<Unicode>();\\n  int u_len = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool horizontal = fuzzed_data_provider.ConsumeBool();\\n  GBool vertical = fuzzed_data_provider.ConsumeBool();\\n  GBool clipping = fuzzed_data_provider.ConsumeBool();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFRectangle.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  double hDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n  PDFRectangle *pageBox = new PDFRectangle(0, 0, 1, 1);\\n  int rotateA = fuzzed_data.ConsumeIntegral<int>();\\n  GBool upsideDown = fuzzed_data.ConsumeBool();\\n  GfxState *state = new GfxState(hDPIA, vDPIA, pageBox, rotateA, upsideDown);\\n\\n  double x = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double y = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dx = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double dy = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originX = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double originY = fuzzed_data.ConsumeFloatingPoint<double>();\\n  CharCode c = fuzzed_data.ConsumeIntegral<CharCode>();\\n  int nBytes = fuzzed_data.ConsumeIntegral<int>();\\n  Unicode *u = new Unicode[nBytes];\\n  int uLen = fuzzed_data.ConsumeIntegral<int>();\\n  GBool charExists = fuzzed_data.ConsumeBool();\\n  GBool dFilled = fuzzed_data.ConsumeBool();\\n  GBool dStroked = fuzzed_data.ConsumeBool();\\n  \\n  SplashColorMode colorModeA = splashModeRGB8;\\n  int bitmapRowPadA = 4;\\n  GBool reverseVideoA = gFalse;\\n  SplashColorPtr paperColorA;\\n  paperColorA[0] = paperColorA[1] = paperColorA[2] = paperColorA[3] = 0;\\n  SplashOutputDev *dev = new SplashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA);\\n  dev->drawChar(state, x, y, dx, dy, originX, originY, c, nBytes, u, uLen, charExists, dFilled, dStroked);\\n\\n  delete[] u;\\n  delete dev;\\n  delete state;\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}