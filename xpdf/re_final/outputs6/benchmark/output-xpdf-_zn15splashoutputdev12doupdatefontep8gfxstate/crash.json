{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1C.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(GfxState)) {\\n        return 0;\\n    }\\n\\n    // Prepare input for doUpdateFont\\n    double hDPIA = 72.0;\\n    double vDPIA = 72.0;\\n    PDFRectangle pageBox;\\n    int rotateA = 0;\\n    GBool upsideDown = gFalse;\\n    GfxState gfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n    memcpy(&gfxState, data, sizeof(GfxState));\\n\\n    // Create an instance of SplashOutputDev and call the function\\n    SplashColorMode colorModeA = splashModeRGB8;\\n    int bitmapRowPadA = 4;\\n    GBool reverseVideoA = gFalse;\\n    SplashColor paperColorA;\\n    GBool bitmapTopDownA = gTrue;\\n    GBool allowAntialiasA = gTrue;\\n    SplashOutputDev splashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n\\n    // As doUpdateFont is a private function, it cannot be accessed from this point.\\n    // We need to find another public function that internally calls doUpdateFont, or make doUpdateFont public.\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n#include \"FoFiTrueType.h\"\\n#include \"FoFiType1C.h\"\\n#include \"FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    \\n    double hDPIA = 72.0;\\n    double vDPIA = 72.0;\\n    PDFRectangle pageBox;\\n    int rotateA = 0;\\n    GBool upsideDown = gFalse;\\n    GfxState gfx_state(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n    SplashColorMode colorModeA = splashModeRGB8;\\n    int bitmapRowPadA = 4;\\n    GBool reverseVideoA = gFalse;\\n    SplashColor paperColorA;\\n    SplashOutputDev splash_output_dev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA);\\n\\n    // splash_output_dev.doUpdateFont(&gfx_state); // This line is commented out because doUpdateFont is a private member of SplashOutputDev\\n    return 0;\\n}",
        "model": ""
    }

    ]
}