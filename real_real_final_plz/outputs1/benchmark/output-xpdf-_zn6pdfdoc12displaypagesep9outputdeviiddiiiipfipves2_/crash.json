{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\" // Include the correct header file for PDFDoc\\n#include \"OutputDev.h\"\\n\\n// Adding a concrete class that inherits from OutputDev to implement the pure virtual methods\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages\\n    MyOutputDev outputDev; // Create an instance of MyOutputDev\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool crop = static_cast<GBool>(stream.ConsumeBool());\\n    GBool printing = static_cast<GBool>(stream.ConsumeBool());\\n    GBool GFalse = false; // Define GFalse as false\\n    GBool (*abortCheck)(void*) = nullptr; // Example function pointer, not NULL\\n    void* abortCheckCbkData = reinterpret_cast<void*>(0x87654321); // Example address, not NULL\\n\\n    // Call the function-under-test\\n    PDFDoc pdfDoc; // Create an instance of PDFDoc\\n    pdfDoc.displayPages(&outputDev, page, numPages, scaleX, scaleY, rotation, crop, printing, GFalse, abortCheck, abortCheckCbkData);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "/sample/output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_/coverage/02/linux/report.html",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GlobalParams.h\" // Include GlobalParams.h to resolve the issue\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for PDFDoc::displayPages function\\n    DummyOutputDev outputDev; // Define an object of type DummyOutputDev\\n    int page = stream.ConsumeIntegral<int>();\\n    int numPages = stream.ConsumeIntegral<int>();\\n    double scaleX = stream.ConsumeFloatingPoint<double>();\\n    double scaleY = stream.ConsumeFloatingPoint<double>();\\n    int rotation = stream.ConsumeIntegral<int>();\\n    GBool crop = static_cast<GBool>(stream.ConsumeBool());\\n    GBool useMediaBox = static_cast<GBool>(stream.ConsumeBool());\\n    GBool cropToContents = static_cast<GBool>(stream.ConsumeBool());\\n    void* abort = nullptr; // Initialize with nullptr\\n    void* abortData = nullptr; // Initialize with nullptr\\n\\n    // Create an instance of PDFDoc with a dummy file name\\n    GString dummyFileName = GString(\"dummy.pdf\");\\n    GlobalParams *params = new GlobalParams(); // Create an instance of GlobalParams\\n    PDFDoc pdfDoc(&dummyFileName, nullptr, params); // Using the constructor that takes a GString pointer and GlobalParams pointer\\n\\n    // Call the function-under-test\\n    pdfDoc.displayPages(&outputDev, page, numPages, scaleX, scaleY, rotation, crop, useMediaBox, cropToContents, nullptr, nullptr);\\n\\n    delete params; // Clean up the allocated GlobalParams object\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}