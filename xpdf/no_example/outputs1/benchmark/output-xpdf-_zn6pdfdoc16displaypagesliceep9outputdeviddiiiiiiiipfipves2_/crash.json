{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n    \\n    int page = fuzzed_data_provider.ConsumeIntegral<int>();\\n    double hDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    double vDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n    int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n    GBool useMediaBox = fuzzed_data_provider.ConsumeBool();\\n    GBool crop = fuzzed_data_provider.ConsumeBool();\\n    GBool printing = fuzzed_data_provider.ConsumeBool();\\n    int sliceX = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int sliceY = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int sliceW = fuzzed_data_provider.ConsumeIntegral<int>();\\n    int sliceH = fuzzed_data_provider.ConsumeIntegral<int>();\\n    \\n    std::vector<char> payload = fuzzed_data_provider.ConsumeRemainingBytes<char>();\\n    \\n    Object obj;\\n    obj.initNull();\\n    BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n  \\n    globalParams = new GlobalParams(NULL);\\n    globalParams->setEnableFreeType(const_cast<char*>(\"yes\"));\\n  \\n    PDFDoc *doc = new PDFDoc(stream);\\n    if (!doc->isOk()) {\\n      delete doc;\\n      delete globalParams;\\n      return -1;\\n    }\\n  \\n    SplashOutputDev *splashOut;\\n    SplashColor paperColor;\\n    paperColor[0] = paperColor[1] = paperColor[2] = 0xff;\\n    splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n    splashOut->startDoc(doc->getXRef());\\n  \\n    PDFRectangle *box = doc->getPageMediaBox(1); // Corrected from getPageCropBox to getPageMediaBox\\n    sliceW = box->x2 - box->x1;\\n    sliceH = box->y2 - box->y1;\\n\\n    doc->displayPageSlice(splashOut, page, hDPI, vDPI, rotate, useMediaBox, crop,\\n        printing, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n  \\n    delete splashOut;\\n    delete doc;\\n    delete globalParams;\\n  \\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.26",
        "coverage_diff": "0.0001924140750895928",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n\\n#include \"GfxState.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n\\n  std::string slice;\\n  size_t remaining_slice_size = fdp.remaining_bytes();\\n  if (remaining_slice_size > 4) {\\n\tsize_t slice_size = fdp.ConsumeIntegralInRange<size_t>(1, remaining_slice_size - 4);\\n    slice = fdp.ConsumeBytesAsString(slice_size);\\n  }\\n\\n  Object xpdf_object;\\n  xpdf_object.initNull();\\n  BaseStream*out_stream = new MemStream(\\n    const_cast<char *>(slice.c_str()), 0, remaining_slice_size, &xpdf_object\\n  );\\n\\n  PDFDoc doc(out_stream, NULL, NULL, NULL);\\n  if (doc.isOk()) {\\n    SplashColor color;\\n    color[0] = 255;\\n    color[1] = 255;\\n    color[2] = 255;\\n    SplashOutputDev *splash_output_dev = new SplashOutputDev(splashModeRGB8, 4, gFalse, color);\\n    splash_output_dev->setNoComposite(gFalse);\\n    splash_output_dev->startDoc(doc.getXRef());\\n\\n\tdoc.displayPageSlice(\\n\t  splash_output_dev, 1, hdpi, vdpi,\\n\t  rotate, useMediaBox, crop, printing,\\n\t  sliceX, sliceY, sliceH, sliceW,\\n\t  NULL, NULL\\n\t);\\n\\n    delete splash_output_dev;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}