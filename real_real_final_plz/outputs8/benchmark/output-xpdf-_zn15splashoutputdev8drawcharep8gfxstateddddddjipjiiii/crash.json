{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"Object.h\"\\n#include \"Gfx.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GfxState.h\" // Include GfxState.h to resolve incomplete type 'GfxState'\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    GfxState *gfxState = new GfxState(0, 0, nullptr, 0, gFalse);\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *u = new Unicode[nBytes];\\n    for (int i = 0; i < nBytes; i++) {\\n        u[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n    int uLen = nBytes;\\n    GBool rotate = stream.ConsumeBool();\\n    GBool scaleX = stream.ConsumeBool();\\n    GBool scaleY = stream.ConsumeBool();\\n\\n    // Create a SplashOutputDev object to call drawChar function\\n    SplashOutputDev splashOutputDev;\\n    \\n    // Call the function-under-test\\n    splashOutputDev.drawChar(gfxState, x, y, dx, dy, ox, oy, code, nBytes, u, uLen, rotate, scaleX, scaleY);\\n\\n    delete[] u;\\n    delete gfxState;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n\\n// Include necessary headers to resolve unknown type name issues\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\" // Include XRef.h to resolve Ref type\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for drawChar function\\n    GfxState *gfxState = new GfxState();\\n    double x = stream.ConsumeFloatingPoint<double>();\\n    double y = stream.ConsumeFloatingPoint<double>();\\n    double dx = stream.ConsumeFloatingPoint<double>();\\n    double dy = stream.ConsumeFloatingPoint<double>();\\n    double ox = stream.ConsumeFloatingPoint<double>();\\n    double oy = stream.ConsumeFloatingPoint<double>();\\n    CharCode code = stream.ConsumeIntegral<CharCode>();\\n    int nBytes = stream.ConsumeIntegral<int>();\\n    Unicode *u = new Unicode[nBytes];\\n    for (int i = 0; i < nBytes; i++) {\\n        u[i] = stream.ConsumeIntegral<Unicode>();\\n    }\\n    int uLen = nBytes;\\n    GBool rotated = stream.ConsumeBool();\\n    GBool uLenInc = stream.ConsumeBool();\\n    GBool uOverprint = stream.ConsumeBool();\\n\\n    // Call the drawChar function with initialized parameters\\n    SplashOutputDev::drawChar(gfxState, x, y, dx, dy, ox, oy, code, nBytes, u, uLen, rotated, uLenInc, uOverprint);\\n\\n    delete gfxState;\\n    delete[] u;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}