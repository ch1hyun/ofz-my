{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n    \\n    FuzzedDataProvider fuzzed_data_provider(data, size);\\n\\n    // Provide required arguments for GfxState constructor\\n    double hDPIA = 72.0;\\n    double vDPIA = 72.0;\\n    PDFRectangle pageBox;\\n    int rotateA = 0;\\n    GBool upsideDown = gFalse;\\n    std::unique_ptr<GfxState> gfx_state(new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown));\\n\\n    // Provide required arguments for SplashOutputDev constructor\\n    SplashColorMode colorModeA = splashModeRGB8;\\n    int bitmapRowPadA = 4;\\n    GBool reverseVideoA = gFalse;\\n    SplashColorPtr paperColorA = nullptr;\\n    std::unique_ptr<SplashOutputDev> splash_output_dev(new SplashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA));\\n\\n    // Define xref\\n    XRef *xref = nullptr;\\n\\n    // Use a public method to interact with the SplashOutputDev object\\n    splash_output_dev->startPage(0, gfx_state.get());\\n    \\n    // Call the updateFont function instead of doUpdateFont as doUpdateFont is a private member of SplashOutputDev\\n    splash_output_dev->updateFont(gfx_state.get());\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    double hDPIA = 72.0, vDPIA = 72.0;\\n    int rotateA = 0;\\n    GBool upsideDown = gFalse;\\n    PDFRectangle pageBox;\\n    GfxState *gfxState = new GfxState(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n    SplashColorMode colorModeA = splashModeRGB8;\\n    int bitmapRowPadA = 4;\\n    GBool reverseVideoA = gFalse, bitmapTopDownA = gTrue, allowAntialiasA = gTrue;\\n    SplashColor paperColorA;\\n    SplashOutputDev *splashOutputDev = new SplashOutputDev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n\\n    while (fuzzed_data.remaining_bytes() > 0) {\\n        splashOutputDev->updateFont(gfxState); // Use the public method 'updateFont' instead of the private method 'doUpdateFont'\\n    }\\n\\n    delete gfxState;\\n    delete splashOutputDev;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}