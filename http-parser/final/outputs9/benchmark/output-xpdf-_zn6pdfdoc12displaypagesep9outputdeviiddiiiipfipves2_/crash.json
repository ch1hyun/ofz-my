{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nenum Format { Text, Splash };\\nFormat format = Text;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fd_provider(data, size);\\n  Format type = fd_provider.PickValueInArray({Text, Splash});\\n\\n  double hdpi = fd_provider.ConsumeFloatingPoint<double>();\\n  double vdpi = fd_provider.ConsumeFloatingPoint<double>();\\n  int rotate = fd_provider.ConsumeIntegral<int>();\\n  bool useMediaBox = fd_provider.ConsumeBool();\\n  bool crop = fd_provider.ConsumeBool();\\n  bool printing = fd_provider.ConsumeBool();\\n  std::vector<char> payload = fd_provider.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes);\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    PDFDoc doc(stream);\\n\\n    if (doc.isOk() == gTrue) {\\n\\n      if (type == Text) {\\n        std::unique_ptr<OutputDev> device;\\n      } else if (type == Splash) {\\n        SplashColor paperColor = {0xff, 0xff, 0xff};\\n        SplashOutputDev *splashOut =\\n            new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n        splashOut->setNoComposite(gTrue);\\n        splashOut->startDoc(doc.getXRef());\\n\\n        // call function under test\\n        doc.displayPages(splashOut, 1, doc.getNumPages(), hdpi, vdpi, rotate,\\n                         useMediaBox, crop, printing);\\n      }\\n    }\\n  } catch (...) {\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <cstddef>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() { return gTrue; }\\n    GBool useDrawChar() { return gTrue; }\\n    GBool interpretType3Chars() { return gTrue; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    // Convert uint8_t* to GString*\\n    GString *gData = new GString((char*)Data, Size);\\n\\n    // Initialize PDFDoc and OutputDev objects\\n    PDFDoc pdfDoc(gData);\\n    MyOutputDev outputDev;\\n\\n    // Call the function with appropriate parameters\\n    pdfDoc.displayPages(&outputDev, 1, Size, 1, 1, 1, 1, 1, 1, 1);\\n\\n    delete gData;\\n    return 0;\\n}",
        "model": ""
    }

    ]
}