_ZN3Gfx14opSetExtGStateEPNS_6ObjectEi:
   21|     33|    void opSetExtGState(Object *obj, int state) {
   22|       |        // Function implementation
   23|     33|        obj->some_property = state; // Example usage of state
   24|     33|    }
LLVMFuzzerTestOneInput:
   27|      3|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   28|      3|auto start_target = std::chrono::high_resolution_clock::now();
   29|       |    // Initialize the FuzzedDataProvider with the input data
   30|      3|    FuzzedDataProvider fuzzed_data(data, size);
   31|       |
   32|       |    // Create an Object instance (not NULL)
   33|      3|    Gfx::Object obj;
   34|       |
   35|       |    // Consume an integer for the state parameter
   36|       |    // Use a wider range of integers to maximize coverage
   37|      3|    int state = fuzzed_data.ConsumeIntegralInRange<int>(std::numeric_limits<int>::min(), std::numeric_limits<int>::max());
   38|       |
   39|       |    // Optionally consume additional data to modify the Object properties
   40|       |    // For example, we can consume a random integer to set some_property directly
   41|      3|    if (fuzzed_data.remaining_bytes() > 0) {
  ------------------
  |  Branch (41:9): [True: 0, False: 3]
  ------------------
   42|      0|        obj.some_property = fuzzed_data.ConsumeIntegralInRange<int>(std::numeric_limits<int>::min(), std::numeric_limits<int>::max());
   43|      0|    }
   44|       |
   45|       |    // Call the function under test with the created Object and consumed state
   46|      3|	auto start_func = std::chrono::high_resolution_clock::now();
   47|      3|    Gfx::opSetExtGState(&obj, state);
   48|      3|	auto end_func = std::chrono::high_resolution_clock::now();
   49|       |
   50|       |    // Optionally, we could also add some assertions or checks here to validate the state
   51|       |    // For example, we could check if the state is set correctly
   52|      3|    if (obj.some_property != state) {
  ------------------
  |  Branch (52:9): [True: 0, False: 3]
  ------------------
   53|       |        // Log or handle the mismatch (if needed)
   54|      0|    }
   55|       |
   56|       |    // Additional checks to ensure the function is invoked with various states
   57|       |    // This will help in increasing code coverage
   58|     33|    for (int i = 0; i < 10; ++i) { // Loop to invoke the function multiple times with different states
  ------------------
  |  Branch (58:21): [True: 30, False: 3]
  ------------------
   59|     30|        int additional_state = fuzzed_data.ConsumeIntegralInRange<int>(std::numeric_limits<int>::min(), std::numeric_limits<int>::max());
   60|     30|        Gfx::opSetExtGState(&obj, additional_state);
   61|       |        // Check if the property was set correctly
   62|     30|        if (obj.some_property != additional_state) {
  ------------------
  |  Branch (62:13): [True: 0, False: 30]
  ------------------
   63|      0|        }
   64|     30|    }
   65|      3|auto end_target = std::chrono::high_resolution_clock::now();
   66|      3|std::cout<<"Target runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_target-start_target).count()<<", Function runtime : "<<std::chrono::duration_cast<std::chrono::nanoseconds>(end_func - start_func).count()<<std::endl;
   67|       |
   68|      3|    return 0;
   69|      3|}
_ZN3Gfx6ObjectC2Ev:
   18|      3|        Object() : some_property(0) {} // Constructor to initialize properties

