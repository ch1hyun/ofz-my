{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.72",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"fuzzer/FuzzedDataProvider.h\"\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  LibRaw MyProcessor;\\n  FuzzedDataProvider stream(data, size);\\n  size_t data_len = stream.remaining_bytes() / 2;\\n  auto remaining_bytes = stream.ConsumeBytes<unsigned char>(data_len);\\n  const int ret = MyProcessor.open_buffer(remaining_bytes.data(), data_len);\\n  if (ret != LIBRAW_SUCCESS) {\\n    return 0;\\n  }\\n  \\n  // Executes the function under test\\n  MyProcessor.sraw_midpoint();\\n  \\n  MyProcessor.recycle();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.81",
        "coverage_diff": "0.00021658499607439695",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <libraw/libraw.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Create libraw object\\n  LibRaw libraw;\\n\\n  // Open the memory buffer as a file\\n  libraw.open_buffer(const_cast<uint8_t*>(data), size);\\n\\n  // Call our function-under-test\\n  if (libraw.unpack() != 0) {\\n    libraw.recycle();  \\n    return 0;\\n  }\\n\\n  int ret = libraw.sraw_midpoint();\\n\\n  // Recycle libraw object\\n  libraw.recycle();\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}