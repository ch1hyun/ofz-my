{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.58",
        "coverage_diff": "0.004553653745941396",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  int uLen = fdp.ConsumeIntegral<int>();\\n  GBool advance = fdp.ConsumeBool();\\n  GBool allowLigatures = fdp.ConsumeBool();\\n  GBool reverse = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  \\n  // Call the function under test\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, &u, uLen, advance, allowLigatures, reverse);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n\\n#include \"Object.h\"\\n#include \"Ref.h\"\\n#include \"Dict.h\"\\n#include \"PDFRectangle.h\"\\n#include \"GfxState.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Initialize necessary parameters\\n  PDFRectangle *pageBox = new PDFRectangle();\\n  GfxState *state = new GfxState(72.0, 72.0, pageBox, 0, gTrue);\\n  double x = 0.0;\\n  double y = 0.0;\\n  double dx = 0.0;\\n  double dy = 0.0;\\n  double originX = 0.0;\\n  double originY = 0.0;\\n  CharCode code = 0;\\n  int nBytes = 0;\\n  Unicode *u = nullptr;\\n  int uLen = 0;\\n  GBool charExists = gFalse;\\n  GBool dRight = gFalse;\\n  GBool dLeft = gFalse;\\n\\n  // Create a SplashOutputDev object\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, nullptr, gFalse);\\n\\n  // Call the drawChar function\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, code, nBytes, u, uLen, charExists, dRight, dLeft);\\n\\n  // Clean up\\n  delete state;\\n  delete splashOut;\\n  delete pageBox;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}