{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <X11/X.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  char *splashOutFile = strdup(\"/tmp/splash-output\");\\n  \\n  globalParams = new GlobalParams(splashOutFile);\\n  globalParams->setErrQuiet(1);\\n  \\n  std::vector<char> obj = stream.ConsumeBytes<char>(stream.remaining_bytes());\\n  Object object;\\n  object.initNull();\\n\\n  GfxBlendMode blendMode = gfxBlendDarken;\\n  GBool paperColor = gFalse;\\n\\n  GString *fileNameA = new GString(\"dummy.pdf\");\\n  PDFDoc *doc = new PDFDoc(fileNameA);\\n\\n  SplashColorMode colorModeA = splashModeRGB8;\\n  SplashColor paperColorA;\\n  paperColorA[0] = paperColorA[1] = paperColorA[2] = paperColorA[3] = 255;\\n  SplashOutputDev splashOut(colorModeA, 1, gFalse, paperColorA);\\n\\n  Dict *resDict = new Dict(doc->getXRef());\\n  PDFRectangle *box = new PDFRectangle();\\n  Gfx gfx(doc, &splashOut, resDict, box, box);\\n\\n  Object args[1];\\n  args[0].initArray(doc->getXRef());\\n  gfx.opSetGState(&object, args, obj.size());\\n\\n  delete globalParams;\\n  free(splashOutFile);\\n  delete doc;\\n  delete fileNameA;\\n  delete resDict;\\n  delete box;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\n#include \"Dict.h\"\\n#include \"Gfx.h\"\\n#include \"GfxState.h\"\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"XRef.h\"\\n#include \"Annot.h\"\\n#include \"PDFDoc.h\"\\n#include \"Page.h\"\\n#include \"OutputDev.h\"\\n#include \"Catalog.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  const std::string name = stream.ConsumeRandomLengthString(stream.remaining_bytes());\\n\\n  Object obj;\\n  obj.initNull();\\n  BaseStream* str = new MemStream((char*)data, 0, size, &obj);\\n  XRef xref(str, 0);\\n  PDFDoc doc(str, nullptr, nullptr, nullptr);\\n  Catalog cat(&doc);\\n  Page *page = new Page(&doc, 1, cat.getPage(1)->getDict());\\n  SplashOutputDev *out = new SplashOutputDev(splashModeRGB8, 4, gFalse, splashWhite);\\n  Gfx gfx(&doc, out, 1, cat.getPage(1), cat.getPage(1)->getDict(), &xref, nullptr, nullptr, nullptr, nullptr);\\n\\n  Object args[1];\\n  args[0].initName(name.c_str());\\n  gfx.opSetExtGState(args, 1);  // Corrected function call\\n\\n  delete page;\\n  delete out;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}