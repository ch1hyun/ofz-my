{
    "samples": [

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "33.04",
        "coverage_diff": "0.005031446540880503",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_settings settings;\\n  memset(&settings, 0, sizeof(settings));\\n  \\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  if (size >= 1) {\\n    int pause = data[0] % 2;\\n    http_parser_pause(&parser, pause);\\n    http_parser_execute(&parser, &settings, (const char*)data, size);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_parser_pause",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.41",
        "coverage_diff": "0.006289308176100629",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\n// Define a settings object for the parser\\nhttp_parser_settings settings;\\n\\n// Define callback functions for the parser\\nint on_message_begin(http_parser* parser) {\\n  return 0;\\n}\\n\\nint on_headers_complete(http_parser* parser) {\\n  return 0;\\n}\\n\\nint on_message_complete(http_parser* parser) {\\n  return 0;\\n}\\n\\nint on_url(http_parser* parser, const char *at, size_t length) {\\n  return 0;\\n}\\n\\nint on_header_field(http_parser* parser, const char *at, size_t length) {\\n  return 0;\\n}\\n\\nint on_header_value(http_parser* parser, const char *at, size_t length) {\\n  return 0;\\n}\\n\\nint on_body(http_parser* parser, const char *at, size_t length) {\\n  return 0;\\n}\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  http_parser parser;\\n  http_parser_init(&parser, HTTP_BOTH);\\n  \\n  // Initialize the settings object\\n  http_parser_settings_init(&settings);\\n  \\n  // Set the callback functions\\n  settings.on_message_begin = on_message_begin;\\n  settings.on_headers_complete = on_headers_complete;\\n  settings.on_message_complete = on_message_complete;\\n  settings.on_url = on_url;\\n  settings.on_header_field = on_header_field;\\n  settings.on_header_value = on_header_value;\\n  settings.on_body = on_body;\\n  \\n  // Feed data to the parser\\n  if (size > 0 && data != NULL) {\\n    http_parser_execute(&parser, &settings, (const char*)data, size);\\n    http_parser_pause(&parser, 1); // Call the function as required by the error message\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}