{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h> // Include string.h for memcpy\\n\\n// Define HTTP_ERRNO_MAX\\n#define HTTP_ERRNO_MAX 23\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  if (size < sizeof(int)) return 0; // Check if there's enough data to account for an int\\n  \\n  int http_errno_raw;\\n  memcpy(&http_errno_raw, data, sizeof(int));\\n\\n  // Ensure the resulting integer falls within the range of possible http_errno validators\\n  int http_errno = http_errno_raw % (HTTP_ERRNO_MAX + 1);\\n\\n  // Call the function-under-test\\n  // Replace static_cast with a C-style cast\\n  const char * err_name = http_errno_name((enum http_errno)http_errno);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < sizeof(int)) {\\n    return 0;\\n  }\\n\\n  int http_error = *(int *)data;\\n  if (http_error >= 0 && http_error <= 63) {\\n    // Call the function-under-test with the given http error code\\n    http_errno_name(http_error);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}