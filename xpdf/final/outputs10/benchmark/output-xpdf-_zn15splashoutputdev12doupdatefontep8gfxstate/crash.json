{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.83",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  Object info, xfa;\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(stream);\\n    if (doc->isOk() == gTrue) {\\n      doc->getNumPages();\\n      doc->getOutline();\\n      doc->getStructTreeRoot();\\n      doc->getXRef();\\n      doc->okToPrint(gTrue);\\n      doc->okToCopy(gTrue);\\n      doc->okToChange(gTrue);\\n      doc->okToAddNotes(gTrue);\\n      doc->isLinearized();\\n      doc->getPDFVersion();\\n\\n      SplashColor paperColor = {0xff, 0xff, 0xff};\\n      SplashOutputDev *splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor);\\n      splashOut->startDoc(doc->getXRef());\\n      \\n      // Create a GfxState object to pass to doUpdateFont\\n      PDFRectangle pageBox;\\n      GfxState *state = new GfxState(hdpi, vdpi, &pageBox, 0, gTrue);\\n      splashOut->updateFont(state);\\n      delete state;\\n    }\\n  } catch (...) {\\n    delete doc;\\n    delete globalParams;\\n    return 0;\\n  }\\n\\n  delete doc;\\n  delete globalParams;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setEnableFreeType((char *)\"yes\");\\n\\n  PDFRectangle mediaBox(0, 0, 1, 1);\\n  Ref idA = {0, 0}; // Create 'Ref' type for 'idA' parameter\\n  GfxFont *gfxFont = new Gfx8BitFont(NULL, NULL, idA, NULL, fontUnknownType, 0, NULL); // Use 'idA' instead of '{0, 0, 0}'\\n\\n  GfxState *gfxState = new GfxState(72, 72, &mediaBox, 0, gfxFont->isCIDFont());\\n  gfxState->setFont(gfxFont, 1);\\n\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 1, gFalse, paperColor);\\n  splashOut->startDoc(NULL); // Use 'NULL' instead of 'gfxState->getFont()->getID()->num'\\n  \\n  // Call the function that was not called in the original code\\n  splashOut->doUpdateFont(gfxState);\\n\\n  delete splashOut;\\n  delete gfxState;\\n  delete gfxFont;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}