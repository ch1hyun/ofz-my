{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.55",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if(Size < 1) return 0; \\n\\n  unsigned char err = (unsigned char) Data[0]; \\n\\n  if(err > HPE_UNKNOWN) return 0; \\n\\n  http_errno_name((enum http_errno)err); \\n  \\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  uint32_t enumval = 0;\\n  if (size < sizeof(enumval)) {\\n    return 0;\\n  }\\n  memcpy(&enumval, data, sizeof(enumval));\\n  enumval = enumval % (_HTTP_ERRNO_MAX + 1); // Changed 'HTTP_ERRNO_MAX' back to '_HTTP_ERRNO_MAX'\\n  const char* name = http_errno_name((enum http_errno)(enumval)); // Changed 'static_cast<enum http_errno>(enumval)' to '(enum http_errno)(enumval)'\\n  return 0;\\n}",
        "model": ""
    }

    ]
}