{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size == 0)\\n    return 0;\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  enum http_errno httpErrNo = static_cast<enum http_errno>(fuzzed_data.ConsumeIntegralInRange<unsigned short>(0, sizeof(enum http_errno)-1));\\n  const char * errorName = http_errno_name(httpErrNo);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.44",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <string.h>\\n#include <http_parser.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0)\\n    return 0;\\n\\n  enum http_errno httpError = (enum http_errno)(data[0] % (HPE_UNKNOWN - 1));\\n  \\n  const char* errno_name = http_errno_name(httpError);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}