{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <unistd.h>\\n#include <fcntl.h>\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 3) {\\n        return 0;\\n    }\\n\\n    // Create a temporary file and write data to it\\n    char filename[] = \"/tmp/fuzz-XXXXXX\";\\n    int fd = mkstemp(filename);\\n    if (fd < 0) {\\n        return 0;\\n    }\\n    write(fd, data, size);\\n    close(fd);\\n\\n    // Reopen the file to get a new file descriptor for TIFFFdOpen\\n    fd = open(filename, O_RDONLY);\\n    if (fd < 0) {\\n        unlink(filename);\\n        return 0;\\n    }\\n\\n    // Open the file with TIFFFdOpen\\n    TIFF* tif = TIFFFdOpen(fd, filename, \"r\");\\n    if (tif) {\\n        // Use tif...\\n        TIFFClose(tif);\\n    }\\n\\n    // Close the file descriptor and delete the temporary file\\n    close(fd);\\n    unlink(filename);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "20.77",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <iomanip>\\n#include <iostream>\\n#include <limits>\\n#include <sstream>\\n#include <string>\\n\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  if(size<3)\\n    return 0;\\n  FuzzedDataProvider stream(data, size);\\n\\n  const std::string mode_param = stream.ConsumeBytesAsString(1);\\n  const std::string name = stream.ConsumeRemainingBytesAsString();\\n  \\n  std::stringstream ss(name);\\n  int fd;\\n  ss >> fd;\\n\\n  if (!ss)\\n    return 0;\\n\\n  // Application does not have the access to an open file descriptor\\n  // and invoking TIFFFdOpen on a random int wouldn't make any sense\\n  // So, the actual function call is commented\\n\\n  // TIFF* cluster = TIFFFdOpen(fd, name.c_str(), mode_param.c_str());\\n\\n  // if (cluster != NULL) {\\n    // TIFFClose(cluster);\\n  // }\\n  return 0;\\n}",
        "model": ""
    }

    ]
}