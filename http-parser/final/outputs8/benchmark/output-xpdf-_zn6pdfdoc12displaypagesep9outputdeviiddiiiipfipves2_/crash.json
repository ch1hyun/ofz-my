{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.05",
        "coverage_diff": "0.0038081952361481907",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  bool useMediaBox = fdp.ConsumeBool();\\n  bool crop = fdp.ConsumeBool();\\n  bool printing = fdp.ConsumeBool();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  BaseStream* stream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  globalParams->setEnableFreeType(const_cast<char*>(\"yes\"));\\n\\n  SplashColor paperColor;\\n  paperColor[0] = 255;\\n  paperColor[1] = 255;\\n  paperColor[2] = 255;\\n  SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, paperColor);\\n  \\n  PDFDoc doc(stream, NULL, NULL);\\n  if (doc.isOk()) {\\n    splashOut.startDoc(doc.getXRef());\\n    doc.displayPages(&splashOut, 1, doc.getNumPages(), hDPI, vDPI, rotate, useMediaBox, crop, printing, NULL, NULL);\\n  }\\n\\n  delete globalParams;\\n  return 0;\\n} ",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.88",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  double hdpi = 100; // Assume 100dpi as a reasonable resolution\\n  double vdpi = 100; // Assume 100dpi as a reasonable resolution\\n  int rotate = 0; // Assume no rotation initially\\n  GBool useMediaBox = gTrue; // Assume we want to use MediaBox\\n  GBool crop = gFalse; // Assume no cropping \\n  GBool printing = gFalse; // Assume not for printing\\n  // Grab the rest of the input data to use as payload for `PDFDoc`.\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  // set up XRef\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a boolean.\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = nullptr;\\n  try {\\n    doc = new PDFDoc(stream);\\n    if (doc->isOk() == gTrue) {\\n      GString fileName(\"dummy\"); // We just need a filename here for the function signature so use a dummy one.\\n      // Create a splash output device\\n      SplashColor paperColor;\\n      paperColor[0] = 255;\\n      paperColor[1] = 255;\\n      paperColor[2] = 255;\\n      SplashOutputDev* splashOut = new SplashOutputDev(splashModeBGR8, 4, gFalse, paperColor);\\n      splashOut->startDoc(doc->getXRef());\\n\\n      // Fuzz the function-under-test\\n      doc->displayPages(splashOut, 1, doc->getNumPages(), hdpi, vdpi, rotate, useMediaBox, crop, printing, NULL, NULL);\\n      \\n      delete splashOut;\\n    }\\n  } catch (...) {\\n    delete doc;\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}