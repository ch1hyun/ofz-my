{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "2.02",
        "coverage_diff": "0.00032069012514932135",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  int page = fdp.ConsumeIntegral<int>();\\n  double hDPI = fdp.ConsumeFloatingPoint<double>();\\n  double vDPI = fdp.ConsumeFloatingPoint<double>();\\n  int rotate = fdp.ConsumeIntegral<int>();\\n  GBool useMediaBox = fdp.ConsumeIntegral<GBool>();\\n  GBool crop = fdp.ConsumeIntegral<GBool>();\\n  GBool printing = fdp.ConsumeIntegral<GBool>();\\n  int sliceX = fdp.ConsumeIntegral<int>();\\n  int sliceY = fdp.ConsumeIntegral<int>();\\n  int sliceW = fdp.ConsumeIntegral<int>();\\n  int sliceH = fdp.ConsumeIntegral<int>();\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream = new MemStream(payload.data(),  0, payload.size(), &obj);\\n\\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(stream);\\n    if (doc->isOk() == gTrue) {\\n      OutputDev *output_dev = nullptr;\\n      doc->displayPageSlice(output_dev, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n    }\\n  } catch (...) {\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"GlobalParams.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Annot.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size == 0) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider stream(data, size);\\n\\n  int page = stream.ConsumeIntegral<int>();\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeIntegral<char>();\\n  GBool crop = stream.ConsumeIntegral<char>();\\n  GBool printing = stream.ConsumeIntegral<char>();\\n  int sliceX = stream.ConsumeIntegral<int>();\\n  int sliceY = stream.ConsumeIntegral<int>();\\n  int sliceW = stream.ConsumeIntegral<int>();\\n  int sliceH = stream.ConsumeIntegral<int>();\\n  \\n  // Create GlobalParams and configure as needed\\n  GlobalParams globalParams(\"/usr/local/etc/xpdfrc\");\\n  \\n  // Create a new PDFDoc using stream\\n  Object obj;\\n  size_t dataSize = stream.remaining_bytes();\\n  std::vector<uint8_t> dataBytes = stream.ConsumeBytes<uint8_t>(dataSize);\\n  MemStream str((char*)dataBytes.data(), 0, dataSize, &obj);\\n  PDFDoc doc(&str);\\n\\n  SplashColorMode colorMode = splashModeRGB8;\\n  int bitmapRowPad = 4;\\n  GBool reverseVideo = gFalse;\\n  SplashColor paperColor;\\n  SplashOutputDev splashOut(colorMode, bitmapRowPad, reverseVideo, paperColor);\\n  OutputDev *output_dev = &splashOut;\\n  void *callbackData = nullptr;\\n  GBool (*abortCheckCbk)(void *data) = nullptr;\\n  \\n  // Display page slice\\n  if (doc.getNumPages() > 0) {\\n    doc.displayPageSlice(output_dev, page, hDPI, vDPI, rotate, useMediaBox, crop, printing,\\n                          sliceX, sliceY, sliceW, sliceH,\\n                          abortCheckCbk, callbackData);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}