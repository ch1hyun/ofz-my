{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.12",
        "coverage_diff": "0.00047301793459524896",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <iostream>\\n#include <string>\\n#include <vector>\\n\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/splash/SplashPath.h\"\\n\\nclass FuzzOutputDev : public OutputDev {\\n  public:\\n    FuzzOutputDev() {}\\n    virtual ~FuzzOutputDev() {}\\n    virtual void saveState(GfxState *) {}\\n    virtual void restoreState(GfxState *) {}\\n    virtual void updateFillColor() {}\\n    virtual void eoFill() {}\\n    virtual void updateStrokeColor() {}\\n    virtual void stroke(SplashPath *) {}\\n    virtual void moveTo(double, double) {}\\n    virtual void lineTo(double, double) {}\\n    virtual GBool upsideDown() {return gTrue;}\\n    virtual GBool useDrawChar() {return gTrue;}\\n    virtual GBool interpretType3Chars() {return gTrue;}\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  int first_page, last_page, rotate;\\n  double h_dpi, v_dpi;\\n  bool use_media_box, crop, printing;\\n  std::string user_passwd, owner_passwd;\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  auto payload = fuzzed_data_provider.ConsumeRemainingBytes<char>();\\n  if (payload.empty()) {\\n    return 0;\\n  }\\n\\n  Object hint;\\n  GString *fileName = new GString(payload.data(), payload.size());\\n  globalParams = new GlobalParams(\"\");\\n  PDFDoc *doc = new PDFDoc(fileName);\\n\\n  if (!doc->isOk()) {\\n    delete doc;\\n    delete globalParams;\\n    return 0;\\n  }\\n\\n  FuzzOutputDev dev;\\n  doc->displayPages(&dev, first_page, last_page, h_dpi, v_dpi, rotate, use_media_box, crop, printing);\\n  \\n  delete doc;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.03",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n#include \"config.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"gmempp.h\"\\n#include \"parseargs.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fdp(data, size);\\n\\n    int first_page = fdp.ConsumeIntegralInRange<int>(1, 100);\\n    int last_page = fdp.ConsumeIntegralInRange<int>(first_page, 100); \\n    double h_dpi = fdp.ConsumeFloatingPointInRange<double>(72.0, 300.0);\\n    double v_dpi = fdp.ConsumeFloatingPointInRange<double>(72.0, 300.0);\\n    int rotate = fdp.ConsumeIntegralInRange<int>(0, 360);\\n    GBool use_crop_box = fdp.ConsumeBool();\\n    GBool printing = fdp.ConsumeBool();\\n\\n    std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n    if (payload.empty()) {\\n        return 0;\\n    }\\n\\n    Object xpdf_obj;\\n    xpdf_obj.initNull();\\n    BaseStream *stream = new MemStream(payload.data(), 0, payload.size(), &xpdf_obj);\\n\\n    // Initialize the globalParams before using it\\n    globalParams = new GlobalParams(nullptr);\\n\\n    PDFDoc *doc = new PDFDoc(stream);\\n\\n    SplashColor paper_color = {255, 255, 255};\\n    SplashOutputDev *splash_out = new SplashOutputDev(splashModeBGR8, 4, false, paper_color);\\n    splash_out->startDoc(doc->getXRef());\\n\\n    doc->displayPages(splash_out, first_page, last_page, h_dpi, v_dpi, rotate, use_crop_box, false, printing);\\n\\n    delete doc;\\n    delete splash_out;\\n    delete globalParams;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}