{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1C.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Initialize the input data\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  // Create a PDFRectangle instance\\n  PDFRectangle pageBox;\\n  \\n  // Create a GfxState instance\\n  GfxState *gfxState = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n  \\n  // Define colorMode and white\\n  SplashColorMode colorMode = splashModeMono1;\\n  SplashColor white;\\n  for(int i = 0; i < splashMaxColorComps; i++) white[i] = 0xff;\\n  \\n  // Create a SplashOutputDev instance\\n  SplashOutputDev *splashOutputDev = new SplashOutputDev(colorMode, 4, gFalse, white, gTrue, gTrue);\\n\\n  // Call the target function\\n  // splashOutputDev->doUpdateFont(gfxState); // This function is private and can't be accessed directly.\\n  // Instead, we can use the updateFont function which is public and internally calls doUpdateFont.\\n  splashOutputDev->updateFont(gfxState);\\n\\n  // Clean up\\n  delete gfxState;\\n  delete splashOutputDev;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev12doupdatefontep8gfxstate",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1C.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiType1.h\"\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n    \\n    FuzzedDataProvider fuzzed_data(data, size);\\n    \\n    double hDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double vDPIA = fuzzed_data.ConsumeFloatingPoint<double>();\\n    PDFRectangle pageBox;\\n    int rotateA = fuzzed_data.ConsumeIntegral<int>();\\n    GBool upsideDown = fuzzed_data.ConsumeBool();\\n    GfxState state(hDPIA, vDPIA, &pageBox, rotateA, upsideDown);\\n\\n    SplashColorMode colorModeA = static_cast<SplashColorMode>(fuzzed_data.ConsumeIntegral<int>());\\n    int bitmapRowPadA = fuzzed_data.ConsumeIntegral<int>();\\n    GBool reverseVideoA = fuzzed_data.ConsumeBool();\\n    SplashColorPtr paperColorA = nullptr; // assuming paperColorA can be nullptr, otherwise it needs to be initialized properly\\n    GBool bitmapTopDownA = fuzzed_data.ConsumeBool();\\n    GBool allowAntialiasA = fuzzed_data.ConsumeBool();\\n    SplashOutputDev splash_output_dev(colorModeA, bitmapRowPadA, reverseVideoA, paperColorA, bitmapTopDownA, allowAntialiasA);\\n\\n    // doUpdateFont is private, so we can't call it directly. \\n    // We need to find a public method that calls doUpdateFont internally and use that instead.\\n    // Assuming updateAll is a public method that calls doUpdateFont\\n    while(fuzzed_data.remaining_bytes() > 0) {\\n        splash_output_dev.updateAll(&state);\\n    }\\n    \\n    return 0;\\n}",
        "model": ""
    }

    ]
}