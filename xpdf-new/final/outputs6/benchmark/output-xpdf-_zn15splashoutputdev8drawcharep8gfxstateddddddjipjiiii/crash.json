{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.57",
        "coverage_diff": "0.004521730764605431",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode c = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode u = fdp.ConsumeIntegral<Unicode>();\\n  GBool is_invisible = fdp.ConsumeBool();\\n  GBool is_image = fdp.ConsumeBool();\\n  GBool is_dot = fdp.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n\\n  // Call the target function\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, c, nBytes, &u, 1, is_invisible, is_image, is_dot);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <stdint.h>\\n#include <stddef.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double x_radius = stream.ConsumeFloatingPoint<double>();\\n  double y_radius = stream.ConsumeFloatingPoint<double>();\\n  double angle1 = stream.ConsumeFloatingPoint<double>();\\n  double angle2 = stream.ConsumeFloatingPoint<double>();\\n  CharCode code = stream.ConsumeIntegral<CharCode>();\\n  int nBytes = stream.ConsumeIntegralInRange<int>(1, 100);\\n  auto unicode = (Unicode *)malloc(sizeof(Unicode) * nBytes);\\n  for (int i = 0; i< nBytes; i++) {\\n    unicode[i] = stream.ConsumeIntegral<Unicode>();\\n  }\\n  GBool dopath = stream.ConsumeIntegral<GBool>();\\n  std::vector<double> m_array;\\n  for (int i = 0; i < 6; i++) {\\n    m_array.push_back(stream.ConsumeFloatingPoint<double>());\\n  }\\n  double w = stream.ConsumeFloatingPoint<double>();\\n  double h = stream.ConsumeFloatingPoint<double>();\\n  int nComps = stream.ConsumeIntegralInRange<int>(1, 4);\\n  int bitmap_row = stream.ConsumeIntegral<int>();\\n  int bitmap_column = stream.ConsumeIntegral<int>();\\n\\n  if (m_array.size() != 6) {\\n    free(unicode);\\n    return 0;\\n  }\\n\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72, 72, &pageBox, 0, gFalse);\\n  \\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse);\\n  GString *fileNameA = new GString(\"dummy.pdf\");\\n  PDFDoc *pdfDoc = new PDFDoc(fileNameA);\\n  splashOut->startDoc(pdfDoc->getXRef());\\n  splashOut->drawChar(state, x, y, x_radius, y_radius, angle1, angle2, code, nBytes, unicode, nBytes, gTrue, gTrue, gTrue);\\n\\n  delete splashOut;\\n  delete state;\\n  delete pdfDoc;\\n  free(unicode);\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}