{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <http_parser.h>\\n\\nconst char* callback(enum http_errno err);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size != sizeof(int)) {\\n    return 0;\\n  }\\n  \\n  int *int_data = (int *) data;\\n  enum http_errno input = (enum http_errno)(*int_data % HTTP_ERRNO_MAX);\\n  \\n  const char* result = callback(input);\\n  \\n  return 0;\\n}\\n\\nconst char* callback(enum http_errno input){\\n  return http_errno_name(input);\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#ifdef __cplusplus\\nextern \"C\" {\\n#endif\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  \\n  if (size == 0)\\n    return 0;\\n  \\n  // Reduce value to make it fit the valid enumeration range\\n  enum http_errno errno_enum =\\n      (enum http_errno)(data[0] % (_HTTP_ERRNO_H + 1));\\n  \\n  // Call function under test with the valid enumeration value\\n  const char* err_name = http_errno_name(errno_enum);\\n\\n  return 0;\\n}\\n\\n#ifdef __cplusplus\\n}\\n#endif\\nIn the above code, I have replaced 'HTTP_ERRNO_MAX' with '_HTTP_ERRNO_H' which is the correct identifier for the maximum value in the http_errno enumeration.",
        "model": ""
    }

    ]
}