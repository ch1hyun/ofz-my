{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n#include \"XRef.h\" // Include XRef header file\\n\\nclass DummyOutputDev : public OutputDev {\\npublic:\\n    GBool upsideDown() override { return false; }\\n    GBool useDrawChar() override { return false; }\\n    GBool interpretType3Chars() override { return false; }\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize parameters for opSetExtGState function\\n    Object obj;\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Create necessary objects for Gfx constructor\\n    PDFDoc doc(nullptr); // Passing nullptr as we don't need to load a specific file\\n    DummyOutputDev out; // Using a dummy implementation to avoid abstract class issue\\n    XRef xref(nullptr, gTrue); // Create XRef object with repair flag set to true\\n    Dict resDict(&xref); // Pass XRef object to Dict constructor\\n    PDFRectangle box;\\n    PDFRectangle cropBox;\\n\\n    // Call the function-under-test by providing necessary arguments\\n    Gfx gfx(&doc, &out, &resDict, &box, &cropBox);\\n    gfx.opSetExtGState(&obj, value);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "triage": "-",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"Dict.h\"\\n#include \"Gfx.h\"\\n\\n// Forward declaration of the Gfx class\\nclass Gfx;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Initialize Fuzzed Data Provider\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create dummy Object pointer and int variable\\n    Object* obj = reinterpret_cast<Object*>(0x12345678); // Dummy object pointer\\n    int value = stream.ConsumeIntegral<int>();\\n\\n    // Create dummy objects for testing\\n    PDFDoc* doc = new PDFDoc(nullptr); // Using constructor with nullptr for fileNameA\\n    OutputDev* out = new OutputDev(); // As OutputDev is an abstract class, we cannot instantiate it directly\\n    Dict* resDict = new Dict(); // Using default constructor for Dict\\n    Gfx gfx(doc, out, resDict); // Using a constructor with minimal arguments\\n\\n    // Call a public method of Gfx class for fuzzing\\n    gfx.drawForm(nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr);\\n\\n    delete doc;\\n    delete resDict;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}