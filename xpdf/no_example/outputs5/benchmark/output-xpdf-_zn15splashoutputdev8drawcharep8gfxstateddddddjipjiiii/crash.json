{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"CharTypes.h\"\\n#include \"GfxState.h\"\\n#include \"Splash.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fdp(data, size);\\n\\n  // Initialize variables needed for SplashOutputDev::drawChar\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegralInRange<int>(1,10);  // To ensure we have enough data left to consume unicode array\\n  GBool freeCMap = fdp.ConsumeBool();\\n  GBool reverse = fdp.ConsumeBool();\\n  GBool composing = fdp.ConsumeBool();\\n\\n  // Use FDP to consume an array of unicode values of length 'nBytes'\\n  std::vector<Unicode> u(nBytes);\\n  for(int i=0; i<nBytes; i++) {\\n    u[i] = fdp.ConsumeIntegral<Unicode>();\\n  }\\n\\n  // 'gfxState' needs to be a valid object for functionality of SplashOutputDev::drawChar\\n  // but constructing GfxState fully is beyond the scope of this example.\\n  // For the purpose of this example, we use a nullptr. Ideally, it should be a properly constructed instance of GfxState.\\n  GfxState* gfxState = nullptr;\\n  \\n  // Initialize a SplashOutputDev object to call drawChar on\\n  SplashColorMode colorMode = splashModeBGR8; // Corrected the color mode\\n  int bitmapRowPad = 1;\\n  GBool colorProfile = gFalse;\\n  SplashColor initialColor = {0};\\n  \\n  SplashOutputDev splashOut(colorMode, bitmapRowPad, colorProfile, initialColor);\\n  splashOut.beginType3Char(gfxState, x, y, dx, dy, code, u.data(), nBytes); // Added missing parameters\\n  splashOut.drawChar(gfxState, x, y, dx, dy, originX, originY, code, nBytes, u.data(), nBytes, freeCMap, reverse, composing);\\n  splashOut.endType3Char(gfxState);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/xpdf/Ref.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/UnicodeMap.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Lexer.h\"\\n#include \"/src/xpdf-4.05/xpdf/Parser.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  SplashColor paperColor = {0xff, 0xff, 0xff};\\n  SplashOutputDev splashOut(splashModeRGB8, 1, gFalse, paperColor);\\n  \\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  \\n  size_t code = fdp.ConsumeIntegralInRange<size_t>(0, 0xffffffff);\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  \\n  std::vector<char> uVec = fdp.ConsumeBytes<char>(nBytes);\\n  Unicode *u = reinterpret_cast<Unicode*>(uVec.data());\\n  \\n  GfxFont *gfxFont = nullptr;\\n  GfxState gfxState(x, y, gfxFont);\\n  \\n  GBool reverse = fdp.ConsumeBool();\\n  GBool seac = fdp.ConsumeBool();\\n  GBool horiz = fdp.ConsumeBool();\\n  \\n  if(u && nBytes > 0) {\\n    splashOut.drawChar(&gfxState, x, y, dx, dy, originX, originY,\\n                       (CharCode)code, nBytes, u, nBytes, reverse, seac, horiz);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}