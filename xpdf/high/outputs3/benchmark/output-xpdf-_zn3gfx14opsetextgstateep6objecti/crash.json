{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"Error.h\"\\n#include \"Gfx.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"XRef.h\"\\n#include \"GlobalParams.h\"\\n#include \"GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  Object objArr[2];\\n  objArr[0].initNull();\\n  objArr[1].initNull();\\n\\n  // Initialize global parameters\\n  globalParams = new GlobalParams(\"/path/to/cfg/file\"); // provide a path to a config file\\n\\n  // Set up PDFDoc and XRef\\n  PDFDoc *doc = new PDFDoc(new MemStream(const_cast<char *>(reinterpret_cast<const char*>(data)), 0, size, objArr), nullptr, nullptr, nullptr);\\n  XRef *xref = doc->getXRef();\\n\\n  // Create GfxState and initialize Gfx\\n  double hDPI = 72;\\n  double vDPI = 72;\\n  int rotate = 0;\\n  GBool useMediaBox = gTrue;\\n  PDFRectangle *mediaBox = doc->getCatalog()->getPage(1)->getMediaBox(); // get media box from the catalog\\n  GfxState *state = new GfxState(hDPI, vDPI, mediaBox, rotate, useMediaBox);\\n  Gfx *gfx = new Gfx(doc, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr); // use the correct constructor\\n\\n  // Check if data is sufficient for two objects in arr\\n  if (fdp.remaining_bytes() < 2) {\\n    return 0;\\n  }\\n\\n  size_t argCount = fdp.ConsumeIntegral<size_t>();\\n\\n  // Use vector instead of dynamic array\\n  std::vector<Object> args(argCount);\\n\\n  // Initialize arguments\\n  for (size_t i = 0; i < argCount; ++i) {\\n    if (fdp.ConsumeBool()) {\\n      args[i].initNull();\\n    } else if (fdp.ConsumeBool()) {\\n      args[i].initBool(fdp.ConsumeBool());\\n    } else {\\n      args[i].initInt(fdp.ConsumeIntegral<int>());\\n    }\\n  }\\n\\n  // Call the function under test\\n  // gfx->opSetExtGState(args.data(), argCount); // opSetExtGState is a private member, cannot be called directly\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <vector>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"Dict.h\"\\n#include \"OutputDev.h\"\\n#include \"PDFDoc.h\"\\n#include \"Gfx.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  int numArgs = fdp.ConsumeIntegralInRange<int>(1, 3);\\n\\n  Object dict;\\n  dict.initNull();\\n\\n  std::string name = fdp.ConsumeRandomLengthString();\\n  int64_t refNum = fdp.ConsumeIntegral<int64_t>();\\n  int64_t refGen = fdp.ConsumeIntegral<int64_t>();\\n\\n  std::vector<Object> args(numArgs);\\n  args[0].initNull();\\n  if(numArgs > 1) {\\n    args[1].initName(name.c_str());\\n  }\\n  if(numArgs > 2) {\\n    args[2].initRef(refNum, refGen);\\n  }\\n\\n  GString fileName(\"dummy.pdf\"); // Create a dummy file name\\n  PDFDoc doc(&fileName); // Initialize doc with the dummy file name\\n  \\n  // Initialize pdf_out with required parameters\\n  SplashColor splashColor;\\n  SplashOutputDev pdf_out(splashModeRGB8, 4, false, splashColor); \\n\\n  Gfx gfx(&doc, &pdf_out,\\n           0, 0, 0, 0, 0, 0,\\n           gFalse);\\n  \\n  // 'opSetExtGState' is a private member of 'Gfx' and cannot be accessed directly.\\n  // Instead, use a public method that internally calls 'opSetExtGState'.\\n  // Create an Object with name \"setExtGState\"\\n  Object cmd;\\n  cmd.initName(\"setExtGState\");\\n  gfx.execOp(&cmd, args.data(), numArgs); \\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}