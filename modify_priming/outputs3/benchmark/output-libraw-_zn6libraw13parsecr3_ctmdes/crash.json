{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "01",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n\\n#include \"fuzzer/FuzzedDataProvider.h\"\\n\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\nextern \"C\" void data_cb(LibRaw_abstract_datastream*,void*,size_t){}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  LibRaw raw;\\n  FuzzedDataProvider stream(data, size);\\n  const short s = stream.ConsumeIntegral<short>();\\n\\n  raw.imgdata.rawdata.ifp = LibRaw_abstract_datastream::fcreate(data_cb, \"w+b\");\\n\\n  if (raw.imgdata.rawdata.ifp == nullptr) {\\n    return 0;\\n  }\\n\\n  raw.imgdata.rawdata.alloc(data, size);\\n\\n  if (raw.parse(s) != 0) { // assuming parse is a valid method\\n    raw.recycle();\\n    return 0;\\n  }\\n\\n  // Call the function parseCR3_CTMD as required by the error message.\\n  raw.parseCR3_CTMD(s);\\n\\n  raw.recycle();\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13parsecr3_ctmdes",
        "sample": "02",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/libraw/libraw/libraw.h\"\\n\\n#include <cstddef>\\n#include <cstdint>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  LibRaw libRaw;\\n  if (stream.remaining_bytes() < sizeof(short)) {\\n    return 0;\\n  }\\n\\n  short buffer = stream.ConsumeIntegral<short>();\\n  libRaw.open_buffer(&buffer);\\n  \\n  // Call the required function\\n  libRaw.parseCR3_CTMD(buffer);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}