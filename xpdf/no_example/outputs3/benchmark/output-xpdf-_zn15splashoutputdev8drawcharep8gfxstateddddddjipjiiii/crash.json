{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"SplashFont.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/JPXStream.h\"\\n#include \"/src/xpdf-4.05/xpdf/JBIG2Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream-CCITT.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/freetype/include/freetype/ftbdf.h\"\\n#include \"/src/freetype/include/freetype/ftoutln.h\"\\n#include \"/src/freetype/include/freetype/ftlcdfil.h\"\\n#include \"/src/freetype/include/freetype/ftlist.h\"\\n#include \"/src/freetype/include/freetype/ftmm.h\"\\n#include \"GfxState.h\"\\n#include \"PDFDoc.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n  std::vector<uint8_t> testDouble = stream.ConsumeBytes<uint8_t>(8*sizeof(double));\\n  \\n  while(testDouble.size()<8){\\n    testDouble.push_back(0);\\n  }\\n\\n  std::vector<char> testchar = stream.ConsumeBytes<char>(2);\\n  while(testchar.size()<2){\\n    testchar.push_back(0);\\n  }\\n\\n  Unicode u[1] = { stream.ConsumeIntegral<uint16_t>() };\\n\\n  GBool testGBool = static_cast<GBool>(stream.ConsumeIntegral<unsigned char>());\\n\\n  char aStr[] = \"\\033[0;0H\";\\n  Object xpdf_obj;\\n  xpdf_obj.initNull();\\n  PDFDoc *doc = new PDFDoc(new MemStream(aStr, 0, 8, &xpdf_obj));\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, splashClearColorPtr);\\n  splashOut->startDoc(doc->getXRef());\\n  \\n  GfxState *gfxState = new GfxState(72.0, 72.0, nullptr, 0, gTrue);\\n\\n  splashOut->drawChar(gfxState, testDouble[0], testDouble[1], testDouble[2],\\n                      testDouble[3], testDouble[4], testDouble[5], testchar[0], 0,\\n                      u, sizeof(u) / sizeof(u[0]), testGBool, gFalse, testGBool);\\n  \\n  delete gfxState;\\n  delete splashOut;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stdint.h>\\n#include <string.h>\\n#include <iostream>\\n#include <vector>\\n\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharTypes.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Lexer.h\"\\n#include \"/src/xpdf-4.05/xpdf/Parser.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Decrypt.h\"\\n#include \"/src/xpdf-4.05/xpdf/XFAScanner.h\"\\n#include \"/src/xpdf-4.05/xpdf/SecurityHandler.h\"\\n#include <splash/SplashFont.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double ox = fdp.ConsumeFloatingPoint<double>();\\n  double oy = fdp.ConsumeFloatingPoint<double>();\\n\\n  CharCode c = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  \\n  std::string unicode_str = fdp.ConsumeRandomLengthString();\\n  size_t str_size = unicode_str.size();\\n  Unicode* u = (Unicode*) malloc(sizeof(Unicode) * str_size);\\n  int len = str_size;\\n  for (size_t i=0; i< str_size ; i++)\\n    u[i] = (Unicode) unicode_str[i];\\n  \\n  GBool reverse = fdp.ConsumeBool();\\n  GBool primary = fdp.ConsumeBool();\\n  GBool horizontal = fdp.ConsumeBool();\\n\\n  PDFRectangle box(0, 0, 200, 200);\\n  SplashColor color;\\n  color[0] = 0x00;\\n  color[1] = 0x00;\\n  color[2] = 0x00;\\n  \\n  SplashFont* font = nullptr;\\n  GfxState state(72, 72, &box, 0, gTrue);\\n  \\n  SplashOutputDev splash(splashModeRGB8, 4, gFalse, color);\\n  splash.startDoc(nullptr);\\n  splash.drawChar(&state, x, y, dx, dy, ox, oy, c, nBytes, u, len, reverse,primary, horizontal);\\n  \\n  free(u);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}