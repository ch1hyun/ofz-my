{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n// Include the libraries that define the missing types\\n#include <xpdf/PDFDoc.h>\\n#include <xpdf/OutputDev.h>\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  virtual GBool upsideDown() { return gFalse; }\\n  virtual GBool useDrawChar() { return gTrue; }\\n  virtual GBool interpretType3Chars() { return gFalse; }\\n};\\n\\nGBool abortCheckCbk(void *data) {\\n  return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  \\n  GString filename(\"dummy\");\\n  PDFDoc pdfdoc(&filename);\\n  MyOutputDev* outputdev = new MyOutputDev();\\n  int pg = fuzzed_data_provider.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data_provider.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data_provider.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data_provider.ConsumeBool();\\n  GBool crop = fuzzed_data_provider.ConsumeBool();\\n  GBool printing = fuzzed_data_provider.ConsumeBool();\\n  int sliceX = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int sliceY = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int sliceW = fuzzed_data_provider.ConsumeIntegral<int>();\\n  int sliceH = fuzzed_data_provider.ConsumeIntegral<int>();\\n  \\n  pdfdoc.displayPageSlice(outputdev, pg, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, nullptr);\\n  \\n  delete outputdev;\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GlobalParams.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fdp(data, size);\\n\\n    GString fileName(\"dummy\");\\n    PDFDoc pdfDoc(&fileName);\\n    SplashColor paperColor;\\n    SplashOutputDev splashOutputDev(splashModeBGR8, 4, gFalse, paperColor);\\n\\n    int pageNum = fdp.ConsumeIntegral<int>();\\n    double hDPI = fdp.ConsumeFloatingPoint<double>();\\n    double vDPI = fdp.ConsumeFloatingPoint<double>();\\n    int rotate = fdp.ConsumeIntegral<int>();\\n    GBool useMediaBox = fdp.ConsumeBool();\\n    GBool crop = fdp.ConsumeBool();\\n    GBool printing = fdp.ConsumeBool();\\n    int sliceX = fdp.ConsumeIntegral<int>();\\n    int sliceY = fdp.ConsumeIntegral<int>();\\n    int sliceW = fdp.ConsumeIntegral<int>();\\n    int sliceH = fdp.ConsumeIntegral<int>();\\n\\n    if (pageNum <= 0 || hDPI <= 0 || vDPI <= 0 || sliceW <= 0 || sliceH <= 0) {\\n        return 0;\\n    }\\n\\n    // Initialize the global parameters\\n    globalParams = new GlobalParams();\\n\\n    pdfDoc.displayPageSlice(&splashOutputDev, pageNum, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, nullptr, nullptr);\\n\\n    // Clean up the global parameters\\n    delete globalParams;\\n    globalParams = nullptr;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}