{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <poppler/PDFDoc.h>\\n#include <poppler/SplashOutputDev.h>\\n#include <poppler/Error.h>\\n\\n#include <string>\\n#include <vector>\\n\\n// A concrete implementation of OutputDev.\\nclass FuzzingOutputDev : public OutputDev {\\npublic:\\n  bool upsideDown() override { return false; }\\n  bool useDrawChar() override { return false; }\\n  bool interpretType3Chars() override { return false; }\\n  bool needNonText() override { return false; }\\n  void startPage(int, GfxState *, XRef *) override {}\\n  void endPage() override {}\\n};\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  // Construct all the parameters for displayPages.\\n  int firstPage = stream.ConsumeIntegral<int>();\\n  int lastPage = stream.ConsumeIntegral<int>();\\n  if (firstPage > lastPage) {\\n    std::swap(firstPage, lastPage);\\n  }\\n  double hDPI = stream.ConsumeFloatingPoint<double>();\\n  double vDPI = stream.ConsumeFloatingPoint<double>();\\n  int rotate = stream.ConsumeIntegral<int>();\\n  GBool useMediaBox = stream.ConsumeBool();\\n  GBool crop = stream.ConsumeBool();\\n  GBool printing = stream.ConsumeBool();\\n  void *stateInfo = nullptr;\\n\\n  // Construct the raw data into a PDFDoc.\\n  std::string documentData = stream.ConsumeRemainingBytesAsString();\\n  PDFDoc doc(\\n    new MemStream(\\n      documentData.data(),\\n      0,\\n      documentData.size(),\\n      Object(objNull)\\n    ),\\n    nullptr,  // ownerPassword\\n    nullptr  // userPassword\\n  );\\n\\n  // Construct an OutputDev for the function-under-test.\\n  FuzzingOutputDev outputDev;\\n\\n  // Call the function-under-test.\\n  doc.displayPages(\\n    &outputDev,\\n    firstPage,\\n    lastPage,\\n    hDPI,\\n    vDPI,\\n    rotate,\\n    useMediaBox,\\n    crop,\\n    printing,\\n    nullptr, // progressCallback\\n    stateInfo // progressCallback data\\n  );\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Construct fuzzer data provider with received input buffer\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Extract parameters for the function-under-test\\n    int first_page = stream.ConsumeIntegral<int>();\\n    int last_page = stream.ConsumeIntegral<int>();\\n    double hDPI = stream.ConsumeFloatingPoint<double>();\\n    double vDPI = stream.ConsumeFloatingPoint<double>();\\n    int rotate = stream.ConsumeIntegralInRange<int>(0, 360);\\n    GBool useMediaBox = stream.ConsumeBool();\\n    GBool crop = stream.ConsumeBool();\\n    GBool printing = stream.ConsumeBool();\\n    // We need to initialize the loop pointer as nullptr because the infinite\\n    // loop is not of any interest during fuzzing.\\n    DW_TAG_subroutine_typeInfinite_loop *stopWhenDone = nullptr;\\n    // Initialize the void pointer to NULL\\n    void *voidPtr = (void *)NULL;\\n\\n    // Call function-under-test\\n    PDFDoc.displayPages(OutputDev *, first_page, last_page, hDPI, vDPI, rotate, useMediaBox, crop, printing, stopWhenDone, voidPtr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}