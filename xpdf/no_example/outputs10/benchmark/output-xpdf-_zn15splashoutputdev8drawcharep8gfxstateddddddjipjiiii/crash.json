{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/XRef.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"/src/xpdf-4.05/xpdf/Page.h\"\\n#include \"/src/xpdf-4.05/xpdf/Lexer.h\"\\n#include \"/src/xpdf-4.05/xpdf/Parser.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if(!size){\\n        return 0;    \\n    }    \\n\\n    FuzzedDataProvider fdp(data, size);\\n    \\n    double matrix[6]; \\n    for (int i=0;i<6;i++)\\n        matrix[i] = fdp.ConsumeFloatingPoint<double>();\\n   \\n    double x = fdp.ConsumeFloatingPoint<double>();\\n    double y = fdp.ConsumeFloatingPoint<double>();\\n    double dx = fdp.ConsumeFloatingPoint<double>();\\n    double dy = fdp.ConsumeFloatingPoint<double>();\\n    double ox = fdp.ConsumeFloatingPoint<double>();\\n    double oy = fdp.ConsumeFloatingPoint<double>();\\n\\n    CharCode code = fdp.ConsumeIntegral<CharCode>();\\n    int nBytes = fdp.ConsumeIntegral<int>();\\n\\n    Unicode *u;\\n    u = new Unicode[nBytes];\\n    for (int j=0;j<nBytes;j++)\\n        u[j] = fdp.ConsumeIntegral<Unicode>();\\n    \\n    GBool colorRamp = fdp.ConsumeBool();\\n    GBool fill = fdp.ConsumeBool();\\n    GBool stroke = fdp.ConsumeBool();\\n    \\n    GfxState gfxstate(72.0, 72.0, nullptr, 0, gFalse);\\n    SplashColorMode colorMode = splashModeRGB8; \\n    SplashColor splashColor;\\n    SplashOutputDev splashOut(colorMode, 4, gFalse, splashColor);\\n    \\n    splashOut.drawChar(&gfxstate, x, y, dx, dy, ox, oy, code, nBytes, u, nBytes, colorRamp, fill, stroke);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <assert.h>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"/src/xpdf-4.05/xpdf/CharCodeToUnicode.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Dict.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/Ref.h\"\\n#include <splash/SplashFont.h>\\n#include <splash/SplashGlyphBitmap.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Ensure we have enough data to proceed.\\n  if (size < 48) return 0;\\n  \\n  FuzzedDataProvider stream(data, size);\\n\\n  double x = stream.ConsumeFloatingPoint<double>();\\n  double y = stream.ConsumeFloatingPoint<double>();\\n  double dx = stream.ConsumeFloatingPoint<double>();\\n  double dy = stream.ConsumeFloatingPoint<double>();\\n  double originX = stream.ConsumeFloatingPoint<double>();\\n  double originY = stream.ConsumeFloatingPoint<double>();\\n\\n  CharCode c = static_cast<CharCode>(stream.ConsumeIntegral<uint32_t>());\\n\\n  // To prevent a buffer overflow.\\n  int nBytes = stream.remaining_bytes() % 10;\\n  if (stream.remaining_bytes() < nBytes + 10) return 0;\\n\\n  Unicode toUBuf[nBytes];\\n  for (int i = 0; i < nBytes; i++){\\n      Unicode uni = stream.ConsumeIntegral<Unicode>();\\n      toUBuf[i] = uni;\\n  }\\n\\n  GBool fontChanged = stream.ConsumeBool();\\n  GBool horizontal = stream.ConsumeBool();\\n  GBool reverse = stream.ConsumeBool();\\n\\n  SplashColor paperColor;\\n  paperColor[0] = 255; // white\\n  paperColor[1] = 255;\\n  paperColor[2] = 255;\\n  \\n  SplashOutputDev *output = new SplashOutputDev(splashModeRGB8, 4, gFalse, paperColor);\\n  PDFRectangle box;\\n  GfxState *state = new GfxState(72.0, 72.0, &box, 0, gFalse);\\n\\n  output->drawChar(state, x, y, dx, dy, originX, originY, c, nBytes, toUBuf, nBytes, fontChanged, horizontal, reverse);\\n  \\n  delete state;\\n  delete output;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}