{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n#include <http_parser.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n  if (size < 1) return 0;\\n\\n  // Use the first byte of the fuzzing input to get a value in\\n  // the range of valid http_errno values\\n  enum http_errno errno_value = (enum http_errno)((float)data[0] / 255 * (HPE_INVALID_EOF_STATE - 2));\\n\\n  // Call the function under test.\\n  const char *err_name = http_errno_name(errno_value);\\n\\n  // Check if err_name is not null\\n  if (err_name) {\\n    // Do something with err_name to increase code coverage\\n    printf(\"%s\\\n\", err_name);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <string.h>\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if(size < 1) {\\n    return 0;\\n  }\\n\\n  enum http_errno err = (enum http_errno)data[0];\\n  if (err < 0 || err >= _HTTP_ERRNO_H) {\\n    return 0;\\n  }\\n  const char * errName = http_errno_name(err);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}