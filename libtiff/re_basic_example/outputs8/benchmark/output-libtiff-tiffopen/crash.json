{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <string>\\n\\n#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // We need at least two non-null bytes, which will be interpreted as file names.\\n  if (size < 2)\\n    return 0;\\n  \\n  // Divide the data into two parts. Each will serve as a file name for TIFFOpen.\\n  const std::string name1 = stream.ConsumeBytesAsString(stream.remaining_bytes() / 2);\\n  const std::string name2 = stream.ConsumeBytesAsString(stream.remaining_bytes());\\n  \\n  // Fuzz the function.\\n  TIFF* tiff_ptr = TIFFOpen(name1.c_str(), name2.c_str());\\n  \\n  if (tiff_ptr) {\\n    TIFFClose(tiff_ptr);\\n  }\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stddef.h>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  TIFF *tif = TIFFOpen(\"/dev/null\", \"w\");\\n  if (!tif) return 0;\\n  TIFFWriteRawStrip(tif, 0, (tdata_t)Data, Size);\\n  TIFFClose(tif);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}