{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.89",
        "coverage_diff": "0.0039450113720991085",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <stdio.h> // Added this line\\n#include <stdlib.h> // Added this line\\n\\n#include <tiffio.h>\\n\\n// Path to a dummy file that will be created at startup and opened by TIFFOpen.\\nconst char *dummy_file_path = \"/tmp/libtiff-fuzzing-dummy\";\\n\\n// Set up a placeholder environment to give the fuzzer something to open.\\nstatic bool placeholder_initialized = []() {\\n  FILE *dummy_file = fopen(dummy_file_path, \"wb\");\\n  if (!dummy_file) {\\n    abort();\\n  }\\n  fwrite(\"\\0\", 1, 1, dummy_file);\\n  fclose(dummy_file);\\n  return true;\\n}();\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  const std::string mode = stream.ConsumeBytesAsString(3);\\n  TIFF *t = TIFFOpen(dummy_file_path, mode.c_str());\\n\\n  if (t) {\\n    TIFFClose(t);\\n    t = nullptr;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstdint>\\n#include <cstddef>\\n#include <tiffio.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n  if (Size == 0) return 0; // Add this line to ensure that Data is not null\\n  TIFF* tif = TIFFOpen(\"/dev/null\", \"w\");\\n  if (!tif) return 0;\\n  TIFFSetField(tif, TIFFTAG_IMAGEWIDTH, 256); // Set necessary fields\\n  TIFFSetField(tif, TIFFTAG_IMAGELENGTH, 256);\\n  TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, 8);\\n  TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, 1);\\n  TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, 256);\\n  TIFFWriteEncodedStrip(tif, 0, (tdata_t)Data, Size);\\n  TIFFClose(tif);\\n  return 0;\\n}",
        "model": ""
    }

    ]
}