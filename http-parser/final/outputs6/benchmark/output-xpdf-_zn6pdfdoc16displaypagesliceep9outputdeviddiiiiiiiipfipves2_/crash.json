{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <poppler/PDFDocFactory.h>\\n#include <poppler/PDFDoc.h>\\n#include <poppler/OutputDev.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    if (Size < 1) {\\n        return 0;\\n    }\\n    PDFDoc *doc = PDFDocFactory().createPDFDoc(GooString(Data, Size), nullptr, nullptr);\\n    if (!doc->isOk()) {\\n        delete doc;\\n        return 0;\\n    }\\n    SplashColor paperColor;\\n    SplashOutputDev splashOut(splashModeXBGR8, 4, gFalse, paperColor);\\n    doc->displayPageSlice(&splashOut, 1, 72.0, 72.0, 0, gTrue, gFalse, gFalse, 0, 0, 100, 100, nullptr, nullptr);\\n    delete doc;\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"outputDev.h\"\\n#include \"functionInfiniteLoop.h\"\\n#include \"data.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {\\n    if (Size == 0) {\\n        return 0;\\n    }\\n    \\n    PDFDoc pdfDoc;\\n    OutputDev outputDev;\\n    int page = 1;\\n    double hDPI = 72.0;\\n    double vDPI = 72.0;\\n    int rotate = 0;\\n    bool useMediaBox = false;\\n    bool crop = true;\\n    bool printing = false;\\n    int sliceX = 0;\\n    int sliceY = 0;\\n    int sliceW = 100;\\n    int sliceH = 100;\\n    FunctionInfiniteLoop functionInfiniteLoop;\\n    Data inputData(Data, Size);  // Use the byte array as input\\n    \\n    pdfDoc.displayPageSlice(&outputDev, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, &functionInfiniteLoop, &inputData);\\n    \\n    return 0;\\n}",
        "model": ""
    }

    ]
}