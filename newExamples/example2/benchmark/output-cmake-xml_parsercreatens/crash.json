{
    "samples": [

    {
        "benchmark": "output-cmake-xml_parsercreatens",
        "sample": "01",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <stdlib.h>\\n\\nextern \"C\" {\\n    #include \"/src/CMake/Utilities/cmexpat/lib/expat.h\"\\n}\\n\\n#include \"FuzzedDataProvider.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  const std::string name_space_sep_str = fuzzed_data.ConsumeBytesAsString(1);\\n  const XML_Char name_space_sep = name_space_sep_str.c_str()[0];\\n\\n  const std::string encoding_str = fuzzed_data.ConsumeRemainingBytesAsString();\\n  const XML_Char *encoding = encoding_str.empty() ? NULL : encoding_str.c_str();\\n\\n  XML_Parser parser = XML_ParserCreateNS(encoding, name_space_sep);\\n  if (parser) {\\n    XML_ParserFree(parser);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-cmake-xml_parsercreatens",
        "sample": "02",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stdint.h>\\n#include <string.h>\\n\\n#include \"/src/CMake/Utilities/cmexpat/lib/expat.h\"\\n#include \"fuzzed_data_provider.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 2) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  \\n  std::string data_string = fuzzed_data_provider.ConsumeBytesAsString(size - 1);\\n  \\n  extern \"C\" {\\n    XML_Parser p = XML_ParserCreateNS(data_string.c_str(), data[size-1]);\\n  }\\n\\n  if (p) {\\n    extern \"C\" {\\n      XML_ParserFree(p);\\n    }\\n    return 0;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}