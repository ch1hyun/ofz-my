{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <tiffio.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstdlib>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  TIFFReadWriteProc read_proc = [](thandle_t, void* buf, toff_t, tsize_t) -> tsize_t { return 0; };\\n  TIFFReadWriteProc write_proc = [](thandle_t, void* buf, toff_t, tsize_t) -> tsize_t { return 0; };\\n  TIFFSeekProc seek_proc = [](thandle_t, toff_t, int) -> toff_t { return 0; };\\n  TIFFCloseProc close_proc = [](thandle_t) -> int { return 0; };\\n  TIFFSizeProc size_proc = [](thandle_t) -> toff_t { return 0; };\\n  TIFFMapFileProc map_file_proc = [](thandle_t, void** base, toff_t* size) -> int { return 0; };\\n  TIFFUnmapFileProc unmap_file_proc = [](thandle_t, void* base, toff_t size) { };\\n\\n  TIFF *tif = TIFFClientOpen(\"dummy\", \"r\", nullptr, read_proc, write_proc, seek_proc, close_proc, size_proc, map_file_proc, unmap_file_proc);\\n\\n  if (!tif) {\\n    return 0;\\n  }\\n  uint64_t sub_dir_offset = stream.ConsumeIntegral<uint64_t>();\\n  \\n  // Call the function-under-test\\n  TIFFSetSubDirectory(tif, sub_dir_offset);\\n  TIFFClose(tif);\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffsetsubdirectory",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n#include <cstring>\\n\\n#include \"tiffio.h\"\\n#include \"tiffio.hxx\"\\n\\nstruct vorbis_data {\\n  const uint8_t *current;\\n  const uint8_t *data;\\n  size_t size;\\n};\\n\\ntmsize_t read_func(thandle_t fd, void *ptr, tmsize_t size) {\\n  vorbis_data *vd = (vorbis_data *)(fd);\\n  size_t len = size;\\n  if (vd->current + len > vd->data + vd->size) {\\n    len = vd->data + vd->size - vd->current;\\n  }\\n  memcpy(ptr, vd->current, len);\\n  vd->current += len;\\n  return len;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  vorbis_data data_st;\\n  data_st.size = size;\\n  data_st.current = data;\\n  data_st.data = data;\\n  thandle_t ts = &data_st;\\n  \\n  TIFF *tif = TIFFClientOpen(\"MemTIFF\", \"r\", ts, \\n                             read_func, NULL, NULL, NULL, NULL, NULL, NULL);\\n\\n  if (!tif) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider provider(data, size);\\n  uint64_t dirOff = provider.ConsumeIntegral<uint64_t>();\\n\\n  TIFFSetSubDirectory(tif, dirOff);\\n\\n  // Add more calls to TIFF library functions to increase code coverage\\n  uint32_t width = TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &width) ? width : 0;\\n  uint32_t height = TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &height) ? height : 0;\\n  uint16_t bitsPerSample = TIFFGetField(tif, TIFFTAG_BITSPERSAMPLE, &bitsPerSample) ? bitsPerSample : 0;\\n  uint16_t samplesPerPixel = TIFFGetField(tif, TIFFTAG_SAMPLESPERPIXEL, &samplesPerPixel) ? samplesPerPixel : 0;\\n\\n  TIFFClose(tif);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}