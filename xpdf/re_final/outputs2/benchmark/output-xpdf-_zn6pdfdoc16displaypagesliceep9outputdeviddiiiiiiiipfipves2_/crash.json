{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <xpdf/PDFDoc.h>\\n#include <xpdf/OutputDev.h>\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n\\nclass MyOutputDev : public OutputDev {\\npublic:\\n  virtual GBool upsideDown() { return gTrue; }\\n  virtual GBool useDrawChar() { return gTrue; }\\n  virtual GBool interpretType3Chars() { return gTrue; }\\n};\\n\\nGBool abortCheckCbk(void *data) {\\n  return gFalse;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n  GString fileName(\"dummy\");\\n  PDFDoc pdf_doc(&fileName);\\n  MyOutputDev output_dev;\\n  int pg = fuzzed_data.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data.ConsumeBool();\\n  GBool crop = fuzzed_data.ConsumeBool();\\n  GBool printing = fuzzed_data.ConsumeBool();\\n  int sliceX = fuzzed_data.ConsumeIntegral<int>();\\n  int sliceY = fuzzed_data.ConsumeIntegral<int>();\\n  int sliceW = fuzzed_data.ConsumeIntegral<int>();\\n  int sliceH = fuzzed_data.ConsumeIntegral<int>();\\n  void *sliceA = nullptr;\\n\\n  pdf_doc.displayPageSlice(&output_dev, pg, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, abortCheckCbk, sliceA);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    \\n    // Assuming the parameters are randomly generated by the fuzzer\\n    SplashOutputDev *out = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse); // This should be an actual OutputDev object\\n    int page = fuzzed_data.ConsumeIntegral<int>();\\n    double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n    double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n    int rotate = fuzzed_data.ConsumeIntegral<int>();\\n    GBool useMediaBox = fuzzed_data.ConsumeBool();\\n    GBool crop = fuzzed_data.ConsumeBool();\\n    GBool printing = fuzzed_data.ConsumeBool();\\n    int sliceX = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceY = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceW = fuzzed_data.ConsumeIntegral<int>();\\n    int sliceH = fuzzed_data.ConsumeIntegral<int>();\\n    void *sliceA = nullptr; // This should be an actual sliceA object\\n\\n    GString *fileNameA = new GString(\"fuzzed.pdf\");\\n    PDFDoc doc(fileNameA);\\n    doc.displayPageSlice(out, page, hDPI, vDPI, rotate, useMediaBox, crop, printing, sliceX, sliceY, sliceW, sliceH, nullptr);\\n    \\n    delete fileNameA;\\n    delete out;\\n    return 0;\\n}",
        "model": ""
    }

    ]
}