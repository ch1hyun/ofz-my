{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <tiffio.h>\\n#include <unistd.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    std::string mode = stream.ConsumeBytesAsString(stream.ConsumeIntegralInRange<uint8_t>(1,3));\\n    std::string name = stream.ConsumeBytesAsString(stream.remaining_bytes());\\n\\n    // create the tempfile and write the data to the file\\n    char filename[] = \"/tmp/fuzz-XXXXXX\";\\n    int fd = mkstemp(filename);\\n    write(fd, data , size);\\n\\n    // Call the function under test here on your fuzz target.\\n    TIFF* tif = TIFFFdOpenExt(fd, mode.c_str(), \"r\", NULL);\\n\\n    if (tif) {\\n        // Clean up after using the fuzz target.\\n        TIFFClose(tif);\\n    }\\n    // Once the target has been called, finish any cleanup necessary.\\n    close(fd);\\n    remove(filename);\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "Without the original code, it's impossible to provide a solution. Please provide the original code.",
        "model": ""
    }

    ]
}