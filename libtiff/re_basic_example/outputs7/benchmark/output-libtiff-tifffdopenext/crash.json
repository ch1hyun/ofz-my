{
    "samples": [

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdint>\\n#include <cstring>\\n#include <tiffio.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Extract the operation mode\\n  std::string mode_str = stream.ConsumeBytesAsString(1);\\n  const char *mode = mode_str.c_str();\\n\\n  // Create a temporary file using the rest of the input\\n  int fd = open(\"/tmp/libtiff.tif\", O_RDWR|O_CREAT|O_TRUNC, S_IRWXU);\\n  uint8_t dummy = 0;\\n  write(fd, &dummy, 1);  // Make the file non-empty to suppress warnings\\n  lseek(fd, 0, SEEK_SET);\\n\\n  // Call function-under-test\\n  TIFFOpenOptions options;\\n  memset(&options, 0, sizeof(options));\\n  TIFF *tiff = TIFFFdOpenExt(fd, \"/tmp/libtiff.tif\", mode, &options);\\n  \\n  if (tiff) {\\n    TIFFClose(tiff);\\n  }\\n\\n  close(fd);\\n  \\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tifffdopenext",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.60",
        "coverage_diff": "0.0026568443934545014",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  std::string name = fuzzed_data_provider.ConsumeRandomLengthString();\\n  std::string access = fuzzed_data_provider.ConsumeRandomLengthString();\\n  \\n  // Generate a random int for the first parameter of TIFFFdOpenExt\\n  int fd = fuzzed_data_provider.ConsumeIntegral<int>();\\n\\n  TIFF* tif = TIFFFdOpenExt(fd, name.c_str(), access.c_str(), NULL);\\n  if (tif != nullptr) {\\n    TIFFClose(tif);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}