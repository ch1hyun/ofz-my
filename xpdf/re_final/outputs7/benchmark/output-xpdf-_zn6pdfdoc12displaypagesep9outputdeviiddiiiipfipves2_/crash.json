{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <vector>\\n\\n#include \"Object.h\"\\n#include \"Stream.h\"\\n#include \"/src/xpdf-4.05/xpdf/PDFDoc.h\"\\n#include \"OutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n  \\n  FuzzedDataProvider fuzzed_data(data, size);\\n  \\n  GString fileName(\"test.pdf\");\\n  PDFDoc *doc = PDFDoc::createPDFDoc(fileName);\\n  \\n  class MyOutputDev : public OutputDev {\\n  public:\\n    virtual GBool upsideDown() { return gFalse; }\\n    virtual GBool useDrawChar() { return gTrue; }\\n    virtual GBool interpretType3Chars() { return gFalse; }\\n  };\\n  \\n  MyOutputDev output_dev;\\n  \\n  int startPage = fuzzed_data.ConsumeIntegral<int>();\\n  int endPage = fuzzed_data.ConsumeIntegral<int>();\\n  double hDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  double vDPI = fuzzed_data.ConsumeFloatingPoint<double>();\\n  int rotate = fuzzed_data.ConsumeIntegral<int>();\\n  GBool useMediaBox = fuzzed_data.ConsumeBool();\\n  GBool crop = fuzzed_data.ConsumeBool();\\n  GBool printing = fuzzed_data.ConsumeBool();\\n  void *void_ptr = nullptr;\\n\\n  doc->displayPages(&output_dev, startPage, endPage, hDPI, vDPI, rotate, useMediaBox, crop, printing, nullptr, void_ptr);\\n\\n  delete doc;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc12displaypagesep9outputdeviiddiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GlobalParams.h\"\\n#include \"PDFDoc.h\"\\n#include \"SplashOutputDev.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 3) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  // Create an instance of PDFDoc\\n  GString fileName(\"dummy\");\\n  PDFDoc doc(&fileName);\\n\\n  // Create an instance of OutputDev\\n  SplashColor paperColor;\\n  SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, paperColor);\\n  splashOut.startDoc(doc.getXRef());\\n\\n  // Call the function under test\\n  doc.displayPages(&splashOut, 1, 1, 1.0, 1.0, 0, gTrue, gTrue, gTrue, nullptr, nullptr);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}