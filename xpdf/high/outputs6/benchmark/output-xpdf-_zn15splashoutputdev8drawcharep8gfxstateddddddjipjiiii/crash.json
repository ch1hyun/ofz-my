{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "The error messages indicate that the linker is unable to find the definitions for the functions in the FoFiTrueType, FoFiType1C, FoFiType1, and FoFiIdentifier classes. These classes are part of the xpdf library, so the most likely cause of the problem is that the xpdf library is not being linked correctly. \\n\\nEnsure that the xpdf library is being linked correctly in your build process. This is typically done by adding `-lxpdf` to the linker command line. \\n\\nIf you are using a build system like make or cmake, you will need to add the xpdf library to the list of libraries that your target is linked against. The exact way to do this will depend on the specifics of your build system. \\n\\nIf you are building manually, you will need to add `-lxpdf` to the command line when you invoke the linker. \\n\\nFor example, if your original linker command line was something like this:\\n\\n```\\ng++ -o myprog myprog.o\\n```\\n\\nYou would change it to this:\\n\\n```\\ng++ -o myprog myprog.o -lxpdf\\n```\\n\\nThis tells the linker to search the xpdf library when looking for function definitions. \\n\\nIf the xpdf library is installed in a non-standard location, you may also need to tell the linker where to find it by adding a `-L` option to the command line. For example:\\n\\n```\\ng++ -o myprog myprog.o -L/path/to/xpdf -lxpdf\\n```\\n\\nThis tells the linker to look in `/path/to/xpdf` when searching for libraries. \\n\\nPlease note that the exact command line will depend on the specifics of your build environment and the location of the xpdf library.",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Running",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider data_provider(data, size);\\n\\n  int rotate = data_provider.ConsumeIntegral<int>();\\n  double x_rad = data_provider.ConsumeFloatingPoint<double>();\\n  double y_rad = data_provider.ConsumeFloatingPoint<double>();\\n  double angle1 = data_provider.ConsumeFloatingPoint<double>();\\n  double angle2 = data_provider.ConsumeFloatingPoint<double>();\\n  double x = data_provider.ConsumeFloatingPoint<double>();\\n  double y = data_provider.ConsumeFloatingPoint<double>();\\n  CharCode c = data_provider.ConsumeIntegral<char>();\\n  Unicode u = data_provider.ConsumeIntegral<Unicode>();\\n  int is_invisible = data_provider.ConsumeBool();\\n  int is_image = data_provider.ConsumeBool();\\n  int is_dot = data_provider.ConsumeBool();\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n  PDFRectangle pageBox;\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, rotate, gFalse);\\n  \\n  SplashColor paperColor = {0, 0, 0, 0};\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeMono1, 1, gFalse, paperColor);\\n  \\n  // Call the function drawChar\\n  splashOut->drawChar(state, x_rad, y_rad, angle1, angle2, x, y, c, 1, &u, 1, is_invisible, is_image, is_dot);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}