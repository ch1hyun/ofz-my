{
    "samples": [

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "8.78",
        "coverage_diff": "0.007648491435702353",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <cstddef>\\n#include <cstdlib>\\n#include <unistd.h> // added this line\\n#include \"tiffio.h\"\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  const std::string mode = stream.PickValueInArray({\"r\",\"r+\", \"w+\", \"a+\"});\\n  \\n  std::string file = stream.ConsumeRemainingBytesAsString();\\n\\n  char filename[] = \"/tmp/fuzz-XXXXXX\";\\n  int fd = mkstemp(filename);\\n  if (fd < 0) {\\n    return 0;\\n  }\\n\\n  ssize_t ret = write(fd, file.data(), file.size());\\n  if (ret < 0) {\\n    close(fd);\\n    return 0;\\n  }\\n\\n  TIFF *tif = TIFFOpen(filename, mode.c_str());\\n  if (tif) {\\n    TIFFClose(tif);\\n  }\\n\\n  close(fd);\\n  remove(filename);\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libtiff-tiffopen",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <string>\\n#include \"tiffio.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider fuzzed_data(data, size);\\n\\n  const std::string fileName = fuzzed_data.ConsumeRandomLengthString();\\n  const std::string mode = fuzzed_data.PickValueInArray({\"r\", \"r+\", \"w\", \"w+\", \"a\", \"a+\"});\\n \\n  // Call the function under test\\n  TIFF* handle = TIFFOpen(fileName.c_str(), mode.c_str());\\n  if (handle != nullptr) {\\n    TIFFClose(handle);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}