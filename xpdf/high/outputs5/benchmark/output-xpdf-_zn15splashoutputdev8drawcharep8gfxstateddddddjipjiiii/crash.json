{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"gfile.h\"\\n#include \"gmem.h\"\\n#include \"parseargs.h\"\\n#include \"/src/xpdf-4.05/xpdf/OutputDev.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiTrueType.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiType1C.h\"\\n#include \"/src/xpdf-4.05/fofi/FoFiType1.h\" // Corrected path\\n#include \"/src/xpdf-4.05/xpdf/FoFiIdentifier.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  \\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode code = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegral<int>();\\n  Unicode unicode = fdp.ConsumeIntegral<Unicode>();\\n  int uLen = fdp.ConsumeIntegral<int>();\\n  GBool charType = fdp.ConsumeBool();\\n  GBool embolden = fdp.ConsumeBool();\\n  GBool inverse = fdp.ConsumeBool();\\n\\n  SplashColor paperColor = {0xff, 0xff, 0xff, 0xff};\\n  SplashOutputDev splashOut(splashModeRGB8, 4, gFalse, paperColor, gTrue);\\n  \\n  PDFRectangle box;\\n  GfxState state(72.0, 72.0, &box, 0, gFalse);\\n  \\n  splashOut.startDoc(NULL);\\n  \\n  splashOut.drawChar(&state, x, y, dx, dy, originX, originY, code, nBytes, &unicode, uLen, charType, embolden, inverse);\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn15splashoutputdev8drawcharep8gfxstateddddddjipjiiii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.04",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n\\n#include \"GfxState.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"GString.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n\\n  double x = fdp.ConsumeFloatingPoint<double>();\\n  double y = fdp.ConsumeFloatingPoint<double>();\\n  double dx = fdp.ConsumeFloatingPoint<double>();\\n  double dy = fdp.ConsumeFloatingPoint<double>();\\n  double originX = fdp.ConsumeFloatingPoint<double>();\\n  double originY = fdp.ConsumeFloatingPoint<double>();\\n  CharCode c = fdp.ConsumeIntegral<CharCode>();\\n  int nBytes = fdp.ConsumeIntegralInRange<int>(1,8); // limit unicode array size to prevent overflow\\n\\n  if (nBytes > fdp.remaining_bytes()) {\\n    return 0;  // not enough data for unicode array.\\n  }\\n\\n  Unicode *u = new Unicode[nBytes];\\n  int unicodeLength = nBytes;\\n  GBool is_invisible = fdp.ConsumeBool();\\n  GBool is_image = fdp.ConsumeBool();\\n  GBool is_dot = fdp.ConsumeBool();\\n\\n  // Consume each unicode characters\\n  for (int i = 0; i < nBytes; i++) {\\n    u[i] = fdp.ConsumeIntegral<Unicode>();\\n  }\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setupBaseFonts(NULL);\\n\\n  GString *password = new GString(\"password\");\\n  GString *ownerPassword = new GString(\"ownerPassword\");\\n  PDFDoc *doc = new PDFDoc(new GString(\"dummy.pdf\"), password, ownerPassword);\\n\\n  // Create a SplashOutputDev instance\\n  SplashOutputDev *splashOut = new SplashOutputDev(splashModeRGB8, 4, gFalse, gFalse);\\n\\n  // Create a PDFRectangle instance\\n  PDFRectangle pageBox(0, 0, 100, 100);\\n\\n  // Create a GfxState instance\\n  GfxState *state = new GfxState(72.0, 72.0, &pageBox, 0, gTrue);\\n\\n  // Call the function under test\\n  splashOut->drawChar(state, x, y, dx, dy, originX, originY, c, nBytes, u, unicodeLength, is_invisible, is_image, is_dot);\\n\\n  // Clean up\\n  delete[] u;\\n  delete splashOut;\\n  delete state;\\n  delete doc;\\n  delete ownerPassword;\\n  delete password;\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}