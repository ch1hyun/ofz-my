{
    "samples": [

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "5.26",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n\\n#include \"libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Store the vector in a local variable to prevent it from being destroyed\\n  auto buffer = stream.ConsumeRemainingBytes<uint8_t>();\\n\\n  LibRaw RawProcessor;\\n  if (LIBRAW_SUCCESS != RawProcessor.open_buffer(\\n                          (void*)buffer.data(), buffer.size())) {\\n    return 0; // Unable to open the file\\n  }\\n\\n  if (LIBRAW_SUCCESS != RawProcessor.unpack()) {\\n    return 0; // Unable to unpack the file\\n  }\\n\\n  // Decode the file\\n  if (LIBRAW_SUCCESS == RawProcessor.raw2image()) {\\n    RawProcessor.sraw_midpoint();\\n  }\\n\\n  RawProcessor.recycle();\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libraw-_zn6libraw13sraw_midpointev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.81",
        "coverage_diff": "0.00018951187156509734",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n\\n#include \"libraw/libraw.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  LibRaw rawProcessor;\\n  std::string string_data = stream.ConsumeRemainingBytesAsString();\\n\\n  if (LIBRAW_SUCCESS != rawProcessor.open_buffer(\\n                          const_cast<char*>(string_data.c_str()), string_data.length())) {\\n      return 0;\\n  }\\n\\n  if (LIBRAW_SUCCESS != rawProcessor.unpack()) {\\n      rawProcessor.recycle();\\n      return 0;\\n  }\\n\\n  rawProcessor.sraw_midpoint();\\n\\n  rawProcessor.recycle();\\n  \\n  return 0;\\n}",
        "model": ""
    }

    ]
}