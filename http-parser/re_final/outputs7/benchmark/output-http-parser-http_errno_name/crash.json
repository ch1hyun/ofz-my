{
    "samples": [

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n#include <stdlib.h>\\n\\nconst int max_valid_http_errno = HPE_PAUSED;\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size != sizeof(int)) {\\n    return 0;\\n  }\\n\\n  int http_error = *((int*)data);\\n\\n  if (http_error >= 0 && http_error <= max_valid_http_errno) {\\n    const char* name = http_errno_name(http_error);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-http-parser-http_errno_name",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0025157232704402514",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include \"http_parser.h\"\\n#include <stdint.h>\\n\\nextern const char * http_errno_name(enum http_errno);\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size != sizeof(int)) {\\n      return 0;\\n    }\\n  \\n    // Get the enumeration value from the input data\\n    int errno_val = *(int *)data;\\n  \\n    // We only call the function-under-test if the input data represents a valid http_errno value\\n    if (errno_val >= 0 && errno_val <= HPE_PAUSED) { // HPE_PAUSED is the largest value in the http_errno enumeration\\n      const char * name = http_errno_name((enum http_errno) errno_val);\\n    }\\n  \\n    return 0;\\n}",
        "model": ""
    }

    ]
}