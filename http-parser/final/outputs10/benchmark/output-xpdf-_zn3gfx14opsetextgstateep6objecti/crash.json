{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <stddef.h>\\n#include <stdint.h>\\n#include <string>\\n\\n#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"/src/xpdf-4.05/goo/gtypes.h\"\\n#include \"/src/xpdf-4.05/goo/GString.h\"\\n#include \"/src/xpdf-4.05/xpdf/Object.h\"\\n#include \"/src/xpdf-4.05/xpdf/Catalog.h\"\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include \"document.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"pdf.h\"\\n#include \"state.h\"\\n#include \"stream.h\"\\n#include \"xref.h\"\\n#include \"parseargs.h\"\\n#include \"gmem.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size <= 4) return 0;\\n\\n  FuzzedDataProvider stream(data, size);\\n  int opSetExtGStateArg = stream.ConsumeIntegral<int>();\\n  std::string fileName = stream.ConsumeRemainingBytesAsString();\\n  Object obj;\\n  obj.initNull();  \\n\\n  if (fileName.size() < 1) {\\n    return 0;\\n  }\\n\\n  globalParams = new GlobalParams(\"\");\\n  globalParams->setErrQuiet(1);\\n  \\n  PDFDoc *doc = NULL;\\n  try {\\n    doc = new PDFDoc(new GooString(fileName.c_str()), NULL, NULL);\\n    if (!doc->isOk()) {\\n      delete doc;\\n      return 0;\\n    }\\n    for (int i = 1; i <= doc->getNumPages(); i++) {\\n      const PDFRectangle *box;\\n      box = doc->getPageCropBox(i);\\n      if (box) {\\n        GfxState state;\\n        Gfx *gfx = new Gfx(doc, &state, i, box, doc->getPageRotate(i), NULL);\\n        gfx->opSetExtGState(&obj, opSetExtGStateArg);\\n        delete gfx;\\n      }\\n    }\\n    delete doc;\\n  }\\n  catch (...) {\\n    delete doc;\\n  }\\n\\n  delete globalParams;\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n#include <png.h>\\n#include <stddef.h>\\n#include \"/src/xpdf-4.05/xpdf/GfxState.h\"\\n#include <stdint.h>\\n\\nconst int ext_gstate_operations_num = 2;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  if (size < 1) {\\n    return 0;\\n  }\\n\\n  FuzzedDataProvider fuzzed_data_provider(data, size);\\n  \\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n\\n  // Ignore return value\\n  GString fileName(\"disablePlatformFonts yes\");\\n  char *cstr = fileName.getCString();\\n  (void) globalParams->parseLine(cstr, NULL, 0);\\n\\n  GString pdfFileName = fuzzed_data_provider.ConsumeRandomLengthString().c_str();\\n  PDFDoc doc(&pdfFileName);\\n\\n  if (!doc.isOk()) {\\n    delete globalParams;\\n    return 0;\\n  }\\n\\n  Object obj;\\n  Gfx gfx(&doc, NULL, -1, 0.0, 0.0, NULL, NULL, NULL, gFalse);\\n\\n  for (int i = 1; i <= doc.getNumPages() && i <= 3; ++i) {\\n    int ext_gstate_operations = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, ext_gstate_operations_num);\\n    Page *page = doc.getCatalog()->getPage(i);\\n    gfx.displayPageSlice(page, 72, 72, 0, gFalse, gTrue, gFalse, -1, -1, -1, -1, gFalse, NULL, NULL, NULL, NULL);\\n\\n    for (int j = 0; j < ext_gstate_operations; ++j) {\\n      // Create a GState object and use it as an argument for the opSetExtGState method\\n      GfxState *state = gfx.getState();\\n      gfx.restoreState(state);\\n    }\\n  }\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}