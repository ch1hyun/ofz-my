{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "The error message is not provided, so it's impossible to provide a specific solution. However, here are some common issues and their solutions:\\n\\n1. If the error is about missing header files, make sure all the required libraries are included. If the libraries are not found, check the file paths.\\n\\n2. If the error is about undeclared identifiers, check if the identifiers are declared before they are used. Also, check if they are declared in the included libraries.\\n\\n3. If the error is about unknown type names, check if the type names are declared in the included libraries. If they are not, you may need to include additional libraries.\\n\\n4. If the error is about incorrect function calls, check if the function is called with the correct number and type of arguments. Also, check if the function is declared in the included libraries.\\n\\nWithout the specific error message, it's impossible to provide a more specific solution.",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn6pdfdoc16displaypagesliceep9outputdeviddiiiiiiiipfipves2_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.80",
        "coverage_diff": "8.017253128733033e-06",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <aconf.h>\\n#include <png.h>\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\n#include \"GString.h\"\\n#include \"GlobalParams.h\"\\n#include \"JBIG2Stream.h\"\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"Stream.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  const double hdpi = fdp.ConsumeFloatingPoint<double>();\\n  const double vdpi = fdp.ConsumeFloatingPoint<double>();\\n  const int rotate = fdp.ConsumeIntegral<int>();\\n  const GBool useCropBox = fdp.ConsumeBool();\\n  const GBool crop = fdp.ConsumeBool();\\n  const GBool printing = fdp.ConsumeBool();\\n  const int sliceX = fdp.ConsumeIntegral<int>();\\n  const int sliceY = fdp.ConsumeIntegral<int>();\\n  const int sliceW = fdp.ConsumeIntegral<int>();\\n  const int sliceH = fdp.ConsumeIntegral<int>();\\n\\n  Object obj;\\n  obj.initNull();\\n  MemStream *stream = new MemStream(payload.data(), 0, payload.size(), &obj);\\n\\n  globalParams = new GlobalParams(NULL);\\n  globalParams->setErrQuiet(1);\\n  globalParams->setupBaseFonts(NULL);\\n  char yes[] = \"yes\";\\n  globalParams->setEnableFreeType(yes); // Yes, it's a string and not a bool.\\n  globalParams->setErrQuiet(1);\\n\\n  PDFDoc *doc = new PDFDoc(stream);\\n  if (doc->isOk() == gTrue) {\\n    SplashColor paperColor;\\n    paperColor[0] = paperColor[1] = paperColor[2] = 0xff;\\n    SplashOutputDev *splash = new SplashOutputDev(splashModeRGB8, 0, gFalse, paperColor);\\n    splash->startDoc(doc->getXRef());\\n    doc->displayPageSlice(splash, 1, hdpi, vdpi, rotate, useCropBox, crop, printing,\\n                          sliceX, sliceY, sliceW, sliceH, NULL, NULL);\\n    delete splash;\\n  }\\n  delete doc;\\n\\n  delete globalParams;\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}