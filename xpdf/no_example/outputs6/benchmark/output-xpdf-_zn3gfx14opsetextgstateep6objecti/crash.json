{
    "samples": [

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include <stddef.h>\\n#include <stdint.h>\\n#include <stdio.h>\\n#include <string.h>\\n\\n#include \"Object.h\"\\n#include \"PDFDoc.h\"\\n#include \"GfxState.h\"\\n#include \"Catalog.h\"\\n#include \"Gfx.h\"\\n#include \"Splash.h\"\\n#include \"SplashBitmap.h\"\\n#include \"SplashOutputDev.h\"\\n#include \"parseargs.h\"\\n#include \"/src/xpdf-4.05/xpdf/Gfx.h\"\\n#include \"GlobalParams.h\"\\n#include \"Stream.h\"\\n\\nint LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  // Create a FuzzedDataProvider instance from the fuzz input.\\n  FuzzedDataProvider fdp(data, size);\\n\\n  std::string filename = fdp.ConsumeBytesAsString(fdp.remaining_bytes() / 2);\\n  FILE *file = fopen(filename.c_str(), \"r\");\\n  \\n  std::string msg = fdp.ConsumeRemainingBytesAsString();\\n  char *message = strdup(msg.c_str());\\n\\n  if (file) {\\n    Object obj;\\n    obj.initNull();\\n\\n    PDFDoc *doc = new PDFDoc(new GString(filename.c_str()), nullptr, nullptr);\\n\\n    if (doc->isOk()) {\\n        Dict *extgstate = doc->getCatalog()->getPage(1)->getResourceDict();\\n        if (extgstate) {\\n            SplashOutputDev colorMode(gSplashColorModeRGB8, 4, false, nullptr);\\n            GfxState *state = doc->getCatalog()->getPage(1)->getGfxState();\\n            if (state) {\\n                state->setExtGState(extgstate, fdp.ConsumeIntegralInRange(0,255));\\n                // Create a Gfx object\\n                Gfx *gfx = new Gfx(doc, &colorMode, 1, extgstate, nullptr, nullptr, nullptr);\\n                // Call the function under test\\n                gfx->display(state);\\n                delete gfx;\\n            }\\n        }\\n    }\\n    delete doc;\\n    free(message);\\n    fclose(file);\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-xpdf-_zn3gfx14opsetextgstateep6objecti",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\n#include \"GString.h\"\\n#include \"GfxState.h\"\\n#include \"PDFDoc.h\"\\n#include \"Stream.h\"\\n#include \"Lexer.h\"\\n#include \"gmem.h\"\\n#include \"config.h\"\\n#include \"Object.h\"\\n#include \"GlobalParams.h\"\\n#include \"XRef.h\"\\n#include \"Catalog.h\"\\n#include \"Page.h\"\\n#include \"Gfx.h\"\\n#include <vector>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider fdp(data, size);\\n  std::vector<char> payload = fdp.ConsumeRemainingBytes<char>();\\n\\n  // Initialize GfxState and other necessary structures to create Gfx\\n  GlobalParams *globalParams = new GlobalParams(\"./xpdfrc\");\\n  Object obj;\\n  MemStream *str = new MemStream(payload.data(), 0, payload.size(), &obj);\\n  PDFRectangle box(0, 0, 1, 1);\\n  GfxState *state = new GfxState(72, 72, &box, 0, gFalse);\\n  XRef *xref = new XRef(str, gFalse);\\n  PDFDoc *doc = new PDFDoc(str, nullptr, nullptr, nullptr);\\n  Catalog *cat = doc->getCatalog();\\n  Page *page = cat->getPage(1);\\n  Dict *resDict = page->getResourceDict();\\n  // Fix the error by providing the correct arguments to the Gfx constructor\\n  Gfx *xGfx = new Gfx(doc, nullptr, resDict, 72, 72, &box, &box, 0, nullptr, nullptr);\\n\\n  int nArgs = fdp.ConsumeIntegralInRange<int>(0, 10);\\n  Object args[nArgs];\\n  try {\\n    // Call the required function\\n    // xGfx->opSetExtGState(args, nArgs); // opSetExtGState is a private member of Gfx, can't be accessed here\\n  } catch (...) {\\n    delete xGfx;\\n    delete state;\\n    delete doc;\\n    delete globalParams;\\n  }\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}